<snippet>
  <content><![CDATA[- name: ${1:Module to manage permissions of users/groups in oVirt/RHV}
  ovirt.ovirt.ovirt_permission:
    auth: ${2:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
    authz_name: ${3:# Authorization provider of the user/group}
    fetch_nested: ${4:# If I(True) the module will fetch additional data from the API}
    group_name: ${5:# Name of the group to manage}
    namespace: ${6:# Namespace of the authorization provider, where user/group resides}
    nested_attributes: ${7:# Specifies list of the attributes which should be fetched from the API}
    object_id: ${8:# ID of the object where the permissions should be managed}
    object_name: ${9:# Name of the object where the permissions should be managed}
    object_type: ${10:# The object where the permissions should be managed}
    poll_interval: ${11:# Number of the seconds the module waits until another poll request on entity status is sent}
    quota_name: ${12:# Name of the quota to assign permission}
    role: ${13:# Name of the role to be assigned to user/group on specific object}
    state: ${14:# Should the permission be present/absent}
    timeout: ${15:# The amount of time in seconds the module should wait for the instance to get into desired state}
    user_name: ${16:# Username of the user to manage}
    wait: ${17:# C(yes) if the module should wait for the entity to get into desired state}
  tags:
    - ovirt
    - ovirt
    - ovirt_permission]]></content>
  <tabTrigger>ovirt.ovirt.ovirt_permission</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module to manage permissions of users/groups in oVirt/RHV</description>
</snippet>