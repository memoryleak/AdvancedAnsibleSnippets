<snippet>
  <content><![CDATA[- name: ${1:NetApp ONTAP name mappings}
  netapp.ontap.na_ontap_name_mappings:
    state: ${2:# Whether the specified name mappings should exist or not}
    vserver: ${3:# Name of the vserver to use}
    client_match: ${4:# Client workstation IP Address which is matched when searching for the pattern}
    direction: ${5:# Direction in which the name mapping is applied}
    index: ${6:# Position in the list of name mappings}
    pattern: ${7:# Pattern used to match the name while searching for a name that can be used as a replacement}
    replacement: ${8:# The name that is used as a replacement, if the pattern associated with this entry matches}
    from_index: ${9:# If no entry with index is found, it is created by reindexing the entry for from_index}
    hostname: ${10:# The hostname or IP address of the ONTAP instance}
    username: ${11:# This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required}
    password: ${12:# Password for the specified user}
    cert_filepath: ${13:# path to SSL client cert file (}
    key_filepath: ${14:# path to SSL client key file}
    https: ${15:# Enable and disable https}
    validate_certs: ${16:# If set to C(no), the SSL certificates will not be validated}
    http_port: ${17:# Override the default port (80 or 443) with this port}
    ontapi: ${18:# The ontap api version to use}
    use_rest: ${19:# Whether to use REST or ZAPI}
    feature_flags: ${20:# Enable or disable a new feature}
    force_ontap_version: ${21:# Override the cluster ONTAP version when using REST}
  tags:
    - netapp
    - ontap
    - na_ontap_name_mappings]]></content>
  <tabTrigger>netapp.ontap.na_ontap_name_mappings</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>NetApp ONTAP name mappings</description>
</snippet>