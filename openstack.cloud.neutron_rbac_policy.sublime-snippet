<snippet>
  <content><![CDATA[- name: ${1:Create or delete a Neutron RBAC policy}
  openstack.cloud.neutron_rbac_policy:
    action: ${2:# Action for the RBAC policy}
    api_timeout: ${3:# How long should the socket layer wait before timing out for API calls}
    auth: ${4:# Dictionary containing auth information as needed by the cloud's auth plugin strategy}
    auth_type: ${5:# Name of the auth plugin to use}
    ca_cert: ${6:# A path to a CA Cert bundle that can be used as part of verifying SSL API requests}
    client_cert: ${7:# A path to a client certificate to use as part of the SSL transaction}
    client_key: ${8:# A path to a client key to use as part of the SSL transaction}
    cloud: ${9:# Named cloud or cloud config to operate against}
    id: ${10:# The RBAC policy ID}
    interface: ${11:# Endpoint URL type to fetch from the service catalog}
    object_id: ${12:# The object ID (the subject of the policy) to which the RBAC rule applies}
    object_type: ${13:# Type of the object that this RBAC policy affects}
    project_id: ${14:# The ID of the project to which C(object_id) belongs to}
    region_name: ${15:# Name of the region}
    sdk_log_level: ${16:# Log level of the OpenStackSDK}
    sdk_log_path: ${17:# Path to the logfile of the OpenStackSDK}
    state: ${18:# Whether the RBAC rule should be C(present) or C(absent)}
    target_project_id: ${19:# The ID of the project to which access to be allowed or revoked aka disallowed}
    timeout: ${20:# How long should ansible wait for the requested resource}
    validate_certs: ${21:# Whether or not SSL API requests should be verified}
    wait: ${22:# Should ansible wait until the requested resource is complete}
  tags:
    - openstack
    - cloud
    - neutron_rbac_policy]]></content>
  <tabTrigger>openstack.cloud.neutron_rbac_policy</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Create or delete a Neutron RBAC policy</description>
</snippet>