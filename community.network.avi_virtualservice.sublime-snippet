<snippet>
  <content><![CDATA[- name: ${1:Module for setup of VirtualService Avi RESTful Object}
  community.network.avi_virtualservice:
    state: ${2:# The state that should be applied on the entity}
    avi_api_update_method: ${3:# Default method for object update is HTTP PUT}
    avi_api_patch_op: ${4:# Patch operation to use when using avi_api_update_method as patch}
    active_standby_se_tag: ${5:# This configuration only applies if the virtualservice is in legacy active standby ha mode and load distribution among active standby is enabled}
    allow_invalid_client_cert: ${6:# Process request even if invalid client certificate is presented}
    analytics_policy: ${7:# Determines analytics settings for the application}
    analytics_profile_ref: ${8:# Specifies settings related to analytics}
    apic_contract_graph: ${9:# The name of the contract/graph associated with the virtual service}
    application_profile_ref: ${10:# Enable application layer specific features for the virtual service}
    auto_allocate_floating_ip: ${11:# Auto-allocate floating/elastic ip from the cloud infrastructure}
    auto_allocate_ip: ${12:# Auto-allocate vip from the provided subnet}
    availability_zone: ${13:# Availability-zone to place the virtual service}
    avi_allocated_fip: ${14:# (internal-use) fip allocated by avi in the cloud infrastructure}
    avi_allocated_vip: ${15:# (internal-use) vip allocated by avi in the cloud infrastructure}
    azure_availability_set: ${16:# (internal-use)applicable for azure only}
    bulk_sync_kvcache: ${17:# (this is a beta feature)}
    client_auth: ${18:# Http authentication configuration for protected resources}
    close_client_conn_on_config_update: ${19:# Close client connection on vs config update}
    cloud_config_cksum: ${20:# Checksum of cloud configuration for vs}
    cloud_ref: ${21:# It is a reference to an object of type cloud}
    cloud_type: ${22:# Enum options - cloud_none, cloud_vcenter, cloud_openstack, cloud_aws, cloud_vca, cloud_apic, cloud_mesos, cloud_linuxserver, cloud_docker_ucp,}
    connections_rate_limit: ${23:# Rate limit the incoming connections to this virtual service}
    content_rewrite: ${24:# Profile used to match and rewrite strings in request and/or response body}
    created_by: ${25:# Creator name}
    delay_fairness: ${26:# Select the algorithm for qos fairness}
    description: ${27:# User defined description for the object}
    discovered_network_ref: ${28:# (internal-use) discovered networks providing reachability for client facing virtual service ip}
    discovered_networks: ${29:# (internal-use) discovered networks providing reachability for client facing virtual service ip}
    discovered_subnet: ${30:# (internal-use) discovered subnets providing reachability for client facing virtual service ip}
    dns_info: ${31:# Service discovery specific data including fully qualified domain name, type and time-to-live of the dns record}
    dns_policies: ${32:# Dns policies applied on the dns traffic of the virtual service}
    east_west_placement: ${33:# Force placement on all se's in service group (mesos mode only)}
    enable_autogw: ${34:# Response traffic to clients will be sent back to the source mac address of the connection, rather than statically sent to a default gateway}
    enable_rhi: ${35:# Enable route health injection using the bgp config in the vrf context}
    enable_rhi_snat: ${36:# Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf context}
    enabled: ${37:# Enable or disable the virtual service}
    error_page_profile_ref: ${38:# Error page profile to be used for this virtualservice}
    floating_ip: ${39:# Floating ip to associate with this virtual service}
    floating_subnet_uuid: ${40:# If auto_allocate_floating_ip is true and more than one floating-ip subnets exist, then the subnet for the floating ip address allocation}
    flow_dist: ${41:# Criteria for flow distribution among ses}
    flow_label_type: ${42:# Criteria for flow labelling}
    fqdn: ${43:# Dns resolvable, fully qualified domain name of the virtualservice}
    host_name_xlate: ${44:# Translate the host name sent to the servers to this value}
    http_policies: ${45:# Http policies applied on the data traffic of the virtual service}
    ign_pool_net_reach: ${46:# Ignore pool servers network reachability constraints for virtual service placement}
    ip_address: ${47:# Ip address of the virtual service}
    ipam_network_subnet: ${48:# Subnet and/or network for allocating virtualservice ip by ipam provider module}
    l4_policies: ${49:# L4 policies applied to the data traffic of the virtual service}
    limit_doser: ${50:# Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while}
    max_cps_per_client: ${51:# Maximum connections per second per client ip}
    microservice_ref: ${52:# Microservice representing the virtual service}
    min_pools_up: ${53:# Minimum number of up pools to mark vs up}
    name: ${54:# Name for the virtual service}
    network_profile_ref: ${55:# Determines network settings such as protocol, tcp or udp, and related options for the protocol}
    network_ref: ${56:# Manually override the network on which the virtual service is placed}
    network_security_policy_ref: ${57:# Network security policies for the virtual service}
    nsx_securitygroup: ${58:# A list of nsx service groups representing the clients which can access the virtual ip of the virtual service}
    performance_limits: ${59:# Optional settings that determine performance limits like max connections or bandwidth etc}
    pool_group_ref: ${60:# The pool group is an object that contains pools}
    pool_ref: ${61:# The pool is an object that contains destination servers and related attributes such as load-balancing and persistence}
    port_uuid: ${62:# (internal-use) network port assigned to the virtual service ip address}
    remove_listening_port_on_vs_down: ${63:# Remove listening port if virtualservice is down}
    requests_rate_limit: ${64:# Rate limit the incoming requests to this virtual service}
    saml_sp_config: ${65:# Application-specific saml config}
    scaleout_ecmp: ${66:# Disable re-distribution of flows across service engines for a virtual service}
    se_group_ref: ${67:# The service engine group to use for this virtual service}
    security_policy_ref: ${68:# Security policy applied on the traffic of the virtual service}
    server_network_profile_ref: ${69:# Determines the network settings profile for the server side of tcp proxied connections}
    service_metadata: ${70:# Metadata pertaining to the service provided by this virtual service}
    service_pool_select: ${71:# Select pool based on destination port}
    services: ${72:# List of services defined for this virtual service}
    sideband_profile: ${73:# Sideband configuration to be used for this virtualservice}
    snat_ip: ${74:# Nat'ted floating source ip address(es) for upstream connection to servers}
    sp_pool_refs: ${75:# Gslb pools used to manage site-persistence functionality}
    ssl_key_and_certificate_refs: ${76:# Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated connections}
    ssl_profile_ref: ${77:# Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections}
    ssl_profile_selectors: ${78:# Select ssl profile based on client ip address match}
    ssl_sess_cache_avg_size: ${79:# Expected number of ssl session cache entries (may be exceeded)}
    sso_policy: ${80:# Client authentication and authorization policy for the virtualservice}
    sso_policy_ref: ${81:# The sso policy attached to the virtualservice}
    static_dns_records: ${82:# List of static dns records applied to this virtual service}
    subnet: ${83:# Subnet providing reachability for client facing virtual service ip}
    subnet_uuid: ${84:# It represents subnet for the virtual service ip address allocation when auto_allocate_ip is true}
    tenant_ref: ${85:# It is a reference to an object of type tenant}
    topology_policies: ${86:# Topology policies applied on the dns traffic of the virtual service based ongslb topology algorithm}
    traffic_clone_profile_ref: ${87:# Server network or list of servers for cloning traffic}
    traffic_enabled: ${88:# Knob to enable the virtual service traffic on its assigned service engines}
    type: ${89:# Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual hosted virtual service}
    url: ${90:# Avi controller URL of the object}
    use_bridge_ip_as_vip: ${91:# Use bridge ip as vip on each host in mesos deployments}
    use_vip_as_snat: ${92:# Use the virtual ip as the snat ip for health monitoring and sending traffic to the backend servers instead of the service engine interface ip}
    uuid: ${93:# Uuid of the virtualservice}
    vh_domain_name: ${94:# The exact name requested from the client's sni-enabled tls hello domain name field}
    vh_parent_vs_uuid: ${95:# Specifies the virtual service acting as virtual hosting (sni) parent}
    vip: ${96:# List of virtual service ips}
    vrf_context_ref: ${97:# Virtual routing context that the virtual service is bound to}
    vs_datascripts: ${98:# Datascripts applied on the data traffic of the virtual service}
    vsvip_cloud_config_cksum: ${99:# Checksum of cloud configuration for vsvip}
    vsvip_ref: ${100:# Mostly used during the creation of shared vs, this field refers to entities that can be shared across virtual services}
    waf_policy_ref: ${101:# Waf policy for the virtual service}
    weight: ${102:# The quality of service weight to assign to traffic transmitted from this virtual service}
    controller: ${103:# IP address or hostname of the controller}
    username: ${104:# Username used for accessing Avi controller}
    password: ${105:# Password of Avi user in Avi controller}
    tenant: ${106:# Name of tenant used for all Avi API calls and context of object}
    tenant_uuid: ${107:# UUID of tenant used for all Avi API calls and context of object}
    api_version: ${108:# Avi API version of to use for Avi API and objects}
    avi_credentials: ${109:# Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details}
    api_context: ${110:# Avi API context that includes current session ID and CSRF Token}
    avi_disable_session_cache_as_fact: ${111:# It disables avi session information to be cached as a fact}
  tags:
    - community
    - network
    - avi_virtualservice]]></content>
  <tabTrigger>community.network.avi_virtualservice</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module for setup of VirtualService Avi RESTful Object</description>
</snippet>