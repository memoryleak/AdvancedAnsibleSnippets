<snippet>
  <content><![CDATA[- name: ${1:Runs puppet}
  community.general.puppet:
    certname: ${2:# The name to use when handling certificates}
    confdir: ${3:# Path to the directory containing the puppet}
    debug: ${4:# Enable full debugging}
    environment: ${5:# Puppet environment to be used}
    environment_lang: ${6:# The lang environment to use when running the puppet agent}
    execute: ${7:# Execute a specific piece of Puppet code}
    facter_basename: ${8:# Basename of the facter output file}
    facts: ${9:# A dict of values to pass in as persistent external facter facts}
    logdest: ${10:# Where the puppet logs should go, if puppet apply is being used}
    manifest: ${11:# Path to the manifest file to run puppet apply on}
    modulepath: ${12:# Path to an alternate location for puppet modules}
    noop: ${13:# Override puppet}
    puppetmaster: ${14:# The hostname of the puppetmaster to contact}
    show_diff: ${15:# Whether to print file changes details}
    skip_tags: ${16:# A list of puppet tags to be excluded}
    summarize: ${17:# Whether to print a transaction summary}
    tags: ${18:# A list of puppet tags to be used}
    timeout: ${19:# How long to wait for C(puppet) to finish}
    use_srv_records: ${20:# Toggles use_srv_records flag}
    verbose: ${21:# Print extra information}
    waitforlock: ${22:# The maximum amount of time C(puppet) should wait for an already running C(puppet) agent to finish before starting}
  tags:
    - community
    - general
    - puppet]]></content>
  <tabTrigger>community.general.puppet</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Runs puppet</description>
</snippet>