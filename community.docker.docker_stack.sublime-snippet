<snippet>
  <content><![CDATA[- name: ${1:docker stack module}
  community.docker.docker_stack:
    absent_retries: ${2:# If larger than V(0) and O(state=absent) the module will retry up to O(absent_retries) times to delete the stack until all the resources have been effectively deleted}
    absent_retries_interval: ${3:# Interval in seconds between consecutive O(absent_retries)}
    api_version: ${4:# The version of the Docker API running on the Docker Host}
    ca_path: ${5:# Use a CA certificate when performing server verification by providing the path to a CA certificate file}
    cli_context: ${6:# The Docker CLI context to use}
    client_cert: ${7:# Path to the client's TLS certificate file}
    client_key: ${8:# Path to the client's TLS key file}
    compose: ${9:# List of compose definitions}
    docker_cli: ${10:# Path to the Docker CLI}
    docker_host: ${11:# The URL or Unix socket path used to connect to the Docker API}
    name: ${12:# Stack name}
    prune: ${13:# If true will add the C(--prune) option to the C(docker stack deploy) command}
    resolve_image: ${14:# If set will add the C(--resolve-image) option to the C(docker stack deploy) command}
    state: ${15:# Service state}
    tls: ${16:# Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server}
    tls_hostname: ${17:# When verifying the authenticity of the Docker Host server, provide the expected name of the server}
    validate_certs: ${18:# Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server}
    with_registry_auth: ${19:# If true will add the C(--with-registry-auth) option to the C(docker stack deploy) command}
  tags:
    - community
    - docker
    - docker_stack]]></content>
  <tabTrigger>community.docker.docker_stack</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>docker stack module</description>
</snippet>