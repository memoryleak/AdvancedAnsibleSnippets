<snippet>
  <content><![CDATA[- name: ${1:Bind EPGs to Contracts (fv:RsCons, fv:RsProv)}
  cisco.aci.aci_epg_to_contract:
    annotation: ${2:# User-defined string for annotating an object}
    ap: ${3:# Name of an existing application network profile, that will contain the EPGs}
    certificate_name: ${4:# The X}
    contract: ${5:# The name of the contract}
    contract_label: ${6:# Contract label to match}
    contract_type: ${7:# Determines if the EPG should Provide or Consume the Contract}
    epg: ${8:# The name of the end point group}
    host: ${9:# IP Address or hostname of APIC resolvable by Ansible control host}
    output_level: ${10:# Influence the output of this ACI module}
    output_path: ${11:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    password: ${12:# The password to use for authentication}
    port: ${13:# Port number to be used for REST connection}
    priority: ${14:# QoS class}
    private_key: ${15:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    provider_match: ${16:# The matching algorithm for Provided Contracts}
    state: ${17:# Use C(present) or C(absent) for adding or removing}
    subject_label: ${18:# Subject label to match}
    tenant: ${19:# Name of an existing tenant}
    timeout: ${20:# The socket level timeout in seconds}
    use_proxy: ${21:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${22:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${23:# The username to use for authentication}
    validate_certs: ${24:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_epg_to_contract]]></content>
  <tabTrigger>cisco.aci.aci_epg_to_contract</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Bind EPGs to Contracts (fv:RsCons, fv:RsProv)</description>
</snippet>