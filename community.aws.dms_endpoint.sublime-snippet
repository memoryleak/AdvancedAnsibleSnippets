<snippet>
  <content><![CDATA[- name: ${1:Creates or destroys a data migration services endpoint}
  community.aws.dms_endpoint:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    certificatearn: ${5:# Amazon Resource Name (ARN) for the certificate}
    databasename: ${6:# Name for the database on the origin or target side}
    debug_botocore_endpoint_logs: ${7:# Use a C(botocore}
    dmstransfersettings: ${8:# The settings in JSON format for the DMS transfer type of source endpoint}
    dynamodbsettings: ${9:# Settings in JSON format for the target Amazon DynamoDB endpoint if source or target is dynamodb}
    elasticsearchsettings: ${10:# Settings in JSON format for the target Elasticsearch endpoint}
    endpoint_url: ${11:# URL to connect to instead of the default AWS endpoints}
    endpointidentifier: ${12:# An identifier name for the endpoint}
    endpointtype: ${13:# Type of endpoint we want to manage}
    enginename: ${14:# Database engine that we want to use, please refer to the AWS DMS for more information on the supported engines and their limitations}
    externaltabledefinition: ${15:# The external table definition}
    extraconnectionattributes: ${16:# Extra attributes for the database connection, the AWS documentation states ' For more information about extra connection attributes, see the documentation section for your data store}
    kinesissettings: ${17:# Settings in JSON format for the target Amazon Kinesis Data Streams endpoint}
    kmskeyid: ${18:# Encryption key to use to encrypt replication storage and connection information}
    mongodbsettings: ${19:# Settings in JSON format for the source MongoDB endpoint}
    password: ${20:# Password used to connect to the database this attribute can only be written the AWS API does not return this parameter}
    port: ${21:# TCP port for access to the database}
    profile: ${22:# A named AWS profile to use for authentication}
    purge_tags: ${23:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
    region: ${24:# The AWS region to use}
    retries: ${25:# number of times we should retry when deleting a resource}
    s3settings: ${26:# S3 buckets settings for the target Amazon S3 endpoint}
    secret_key: ${27:# AWS secret access key}
    servername: ${28:# Servername that the endpoint will connect to}
    serviceaccessrolearn: ${29:# Amazon Resource Name (ARN) for the service access role that you want to use to create the endpoint}
    session_token: ${30:# AWS STS session token for use with temporary credentials}
    sslmode: ${31:# Mode used for the SSL connection}
    state: ${32:# State of the endpoint}
    tags: ${33:# A list of tags to add to the endpoint}
    timeout: ${34:# Time in seconds we should wait for when deleting a resource}
    username: ${35:# Username our endpoint will use to connect to the database}
    validate_certs: ${36:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    wait: ${37:# Whether Ansible should wait for the object to be deleted when I(state=absent)}
  tags:
    - community
    - aws
    - dms_endpoint]]></content>
  <tabTrigger>community.aws.dms_endpoint</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates or destroys a data migration services endpoint</description>
</snippet>