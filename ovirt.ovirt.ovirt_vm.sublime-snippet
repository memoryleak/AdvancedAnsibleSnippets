<snippet>
  <content><![CDATA[- name: ${1:Module to manage Virtual Machines in oVirt/RHV}
  ovirt.ovirt.ovirt_vm:
    name: ${2:# Name of the Virtual Machine to manage}
    id: ${3:# ID of the Virtual Machine to manage}
    state: ${4:# Should the Virtual Machine be running/stopped/present/absent/suspended/next_run/registered/exported/reboot}
    cluster: ${5:# Name of the cluster, where Virtual Machine should be created}
    allow_partial_import: ${6:# Boolean indication whether to allow partial registration of Virtual Machine when C(state) is registered}
    vnic_profile_mappings: ${7:# Mapper which maps an external virtual NIC profile to one that exists in the engine when C(state) is registered}
    cluster_mappings: ${8:# Mapper which maps cluster name between VM's OVF and the destination cluster this VM should be registered to, relevant when C(state) is registered}
    role_mappings: ${9:# Mapper which maps role name between VM's OVF and the destination role this VM should be registered to, relevant when C(state) is registered}
    domain_mappings: ${10:# Mapper which maps aaa domain name between VM's OVF and the destination aaa domain this VM should be registered to, relevant when C(state) is registered}
    affinity_group_mappings: ${11:# Mapper which maps affinity name between VM's OVF and the destination affinity this VM should be registered to, relevant when C(state) is registered}
    affinity_label_mappings: ${12:# Mapper which maps affinity label name between VM's OVF and the destination label this VM should be registered to, relevant when C(state) is registered}
    lun_mappings: ${13:# Mapper which maps lun between VM's OVF and the destination lun this VM should contain, relevant when C(state) is registered}
    reassign_bad_macs: ${14:# Boolean indication whether to reassign bad macs when C(state) is registered}
    template: ${15:# Name of the template, which should be used to create Virtual Machine}
    template_version: ${16:# Version number of the template to be used for VM}
    use_latest_template_version: ${17:# Specify if latest template version should be used, when running a stateless VM}
    storage_domain: ${18:# Name of the storage domain where all template disks should be created}
    disk_format: ${19:# Specify format of the disk}
    memory: ${20:# Amount of memory of the Virtual Machine}
    memory_guaranteed: ${21:# Amount of minimal guaranteed memory of the Virtual Machine}
    memory_max: ${22:# Upper bound of virtual machine memory up to which memory hot-plug can be performed}
    cpu_shares: ${23:# Set a CPU shares for this Virtual Machine}
    cpu_cores: ${24:# Number of virtual CPUs cores of the Virtual Machine}
    cpu_sockets: ${25:# Number of virtual CPUs sockets of the Virtual Machine}
    cpu_threads: ${26:# Number of threads per core of the Virtual Machine}
    type: ${27:# Type of the Virtual Machine}
    quota_id: ${28:# Virtual Machine quota ID to be used for disk}
    operating_system: ${29:# Operating system of the Virtual Machine, for example 'rhel_8x64'}
    boot_devices: ${30:# List of boot devices which should be used to boot}
    boot_menu: ${31:# I(True) enable menu to select boot device, I(False) to disable it}
    bios_type: ${32:# Set bios type, necessary for some operating systems and secure boot}
    usb_support: ${33:# I(True) enable USB support, I(False) to disable it}
    serial_console: ${34:# I(True) enable VirtIO serial console, I(False) to disable it}
    sso: ${35:# I(True) enable Single Sign On by Guest Agent, I(False) to disable it}
    host: ${36:# Specify host where Virtual Machine should be running}
    high_availability: ${37:# If I(yes) Virtual Machine will be set as highly available}
    high_availability_priority: ${38:# Indicates the priority of the virtual machine inside the run and migration queues}
    lease: ${39:# Name of the storage domain this virtual machine lease reside on}
    custom_compatibility_version: ${40:# Enables a virtual machine to be customized to its own compatibility version}
    host_devices: ${41:# Single Root I/O Virtualization - technology that allows single device to expose multiple endpoints that can be passed to VMs}
    delete_protected: ${42:# If I(yes) Virtual Machine will be set as delete protected}
    stateless: ${43:# If I(yes) Virtual Machine will be set as stateless}
    clone: ${44:# If I(yes) then the disks of the created virtual machine will be cloned and independent of the template}
    clone_permissions: ${45:# If I(yes) then the permissions of the template (only the direct ones, not the inherited ones) will be copied to the created virtual machine}
    cd_iso: ${46:# ISO file from ISO storage domain which should be attached to Virtual Machine}
    force: ${47:# Please check to I(Synopsis) to more detailed description of force parameter, it can behave differently in different situations}
    nics: ${48:# List of NICs, which should be attached to Virtual Machine}
    disks: ${49:# List of disks, which should be attached to Virtual Machine}
    sysprep: ${50:# Dictionary with values for Windows Virtual Machine initialization using sysprep}
    cloud_init: ${51:# Dictionary with values for Unix-like Virtual Machine initialization using cloud init}
    cloud_init_nics: ${52:# List of dictionaries representing network interfaces to be setup by cloud init}
    cloud_init_persist: ${53:# If I(yes) the C(cloud_init) or C(sysprep) parameters will be saved for the virtual machine and the virtual machine won't be started as run-once}
    kernel_params_persist: ${54:# If I(true) C(kernel_params), C(initrd_path) and C(kernel_path) will persist in virtual machine configuration, if I(False) it will be used for run once}
    kernel_path: ${55:# Path to a kernel image used to boot the virtual machine}
    initrd_path: ${56:# Path to an initial ramdisk to be used with the kernel specified by C(kernel_path) option}
    kernel_params: ${57:# Kernel command line parameters (formatted as string) to be used with the kernel specified by C(kernel_path) option}
    instance_type: ${58:# Name of virtual machine's hardware configuration}
    description: ${59:# Description of the Virtual Machine}
    comment: ${60:# Comment of the Virtual Machine}
    timezone: ${61:# Sets time zone offset of the guest hardware clock}
    serial_policy: ${62:# Specify a serial number policy for the Virtual Machine}
    serial_policy_value: ${63:# Allows you to specify a custom serial number}
    vmware: ${64:# Dictionary of values to be used to connect to VMware and import a virtual machine to oVirt}
    xen: ${65:# Dictionary of values to be used to connect to XEN and import a virtual machine to oVirt}
    kvm: ${66:# Dictionary of values to be used to connect to kvm and import a virtual machine to oVirt}
    cpu_mode: ${67:# CPU mode of the virtual machine}
    placement_policy: ${68:# The configuration of the virtual machine's placement policy}
    placement_policy_hosts: ${69:# List of host names}
    ticket: ${70:# If I(true), in addition return I(remote_vv_file) inside I(vm) dictionary, which contains compatible content for remote-viewer application}
    cpu_pinning: ${71:# CPU Pinning topology to map virtual machine CPU to host CPU}
    soundcard_enabled: ${72:# If I(true), the sound card is added to the virtual machine}
    smartcard_enabled: ${73:# If I(true), use smart card authentication}
    io_threads: ${74:# Number of IO threads used by virtual machine}
    ballooning_enabled: ${75:# If I(true), use memory ballooning}
    numa_tune_mode: ${76:# Set how the memory allocation for NUMA nodes of this VM is applied (relevant if NUMA nodes are set for this VM)}
    numa_nodes: ${77:# List of vNUMA Nodes to set for this VM and pin them to assigned host's physical NUMA node}
    rng_device: ${78:# Random number generator (RNG)}
    custom_properties: ${79:# Properties sent to VDSM to configure various hooks}
    watchdog: ${80:# Assign watchdog device for the virtual machine}
    graphical_console: ${81:# Assign graphical console to the virtual machine}
    exclusive: ${82:# When C(state) is I(exported) this parameter indicates if the existing VM with the same name should be overwritten}
    export_domain: ${83:# When C(state) is I(exported)this parameter specifies the name of the export storage domain}
    export_ova: ${84:# Dictionary of values to be used to export VM as OVA}
    force_migrate: ${85:# If I(true), the VM will migrate when I(placement_policy=user-migratable) but not when I(placement_policy=pinned)}
    migrate: ${86:# If I(true), the VM will migrate to any available host}
    next_run: ${87:# If I(true), the update will not be applied to the VM immediately and will be only applied when virtual machine is restarted}
    snapshot_name: ${88:# Snapshot to clone VM from}
    snapshot_vm: ${89:# Source VM to clone VM from}
    custom_emulated_machine: ${90:# Sets the value of the custom_emulated_machine attribute}
    virtio_scsi_enabled: ${91:# Enable Virtio SCSI support}
    multi_queues_enabled: ${92:# If `true`, each virtual interface will get the optimal number of queues, depending on the available virtual Cpus}
    virtio_scsi_multi_queues: ${93:# Number of queues for a Virtio-SCSI controller, possible values: -1 - Indicates that the queues will be automatically set}
    wait_after_lease: ${94:# Number of seconds which should the module wait after the lease is changed}
    volatile: ${95:# Indicates that this run configuration will be discarded even in the case of guest-initiated reboot}
    wait: ${96:# C(yes) if the module should wait for the entity to get into desired state}
    fetch_nested: ${97:# If I(True) the module will fetch additional data from the API}
    nested_attributes: ${98:# Specifies list of the attributes which should be fetched from the API}
    auth: ${99:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
    timeout: ${100:# The amount of time in seconds the module should wait for the instance to get into desired state}
    poll_interval: ${101:# Number of the seconds the module waits until another poll request on entity status is sent}
  tags:
    - ovirt
    - ovirt
    - ovirt_vm]]></content>
  <tabTrigger>ovirt.ovirt.ovirt_vm</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module to manage Virtual Machines in oVirt/RHV</description>
</snippet>