<snippet>
  <content><![CDATA[- name: ${1:Manage lines in text files}
  ansible.builtin.lineinfile:
    attributes: ${2:# The attributes the resulting filesystem object should have}
    backrefs: ${3:# Used with O(state=present)}
    backup: ${4:# Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly}
    create: ${5:# Used with O(state=present)}
    firstmatch: ${6:# Used with O(insertafter) or O(insertbefore)}
    group: ${7:# Name of the group that should own the filesystem object, as would be fed to I(chown)}
    insertafter: ${8:# Used with O(state=present)}
    insertbefore: ${9:# Used with O(state=present)}
    line: ${10:# The line to insert/replace into the file}
    mode: ${11:# The permissions the resulting filesystem object should have}
    others: ${12:# All arguments accepted by the M(ansible}
    owner: ${13:# Name of the user that should own the filesystem object, as would be fed to I(chown)}
    path: ${14:# The file to modify}
    regexp: ${15:# The regular expression to look for in every line of the file}
    search_string: ${16:# The literal string to look for in every line of the file}
    selevel: ${17:# The level part of the SELinux filesystem object context}
    serole: ${18:# The role part of the SELinux filesystem object context}
    setype: ${19:# The type part of the SELinux filesystem object context}
    seuser: ${20:# The user part of the SELinux filesystem object context}
    state: ${21:# Whether the line should be there or not}
    unsafe_writes: ${22:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
    validate: ${23:# The validation command to run before copying the updated file into the final destination}
  tags:
    - lineinfile]]></content>
  <tabTrigger>ansible.builtin.lineinfile</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage lines in text files</description>
</snippet>