<snippet>
  <content><![CDATA[- name: ${1:Prune old completed and failed builds}
  community.okd.openshift_adm_prune_builds:
    api_key: ${2:# Token used to authenticate with the API}
    ca_cert: ${3:# Path to a CA certificate used to authenticate with the API}
    client_cert: ${4:# Path to a certificate used to authenticate with the API}
    client_key: ${5:# Path to a key file used to authenticate with the API}
    context: ${6:# The name of a context found in the config file}
    host: ${7:# Provide a URL for accessing the API}
    impersonate_groups: ${8:# Group(s) to impersonate for the operation}
    impersonate_user: ${9:# Username to impersonate for the operation}
    keep_younger_than: ${10:# Specify the minimum age (in minutes) of a Build for it to be considered a candidate for pruning}
    kubeconfig: ${11:# Path to an existing Kubernetes config file}
    namespace: ${12:# Use to specify namespace for builds to be deleted}
    no_proxy: ${13:# The comma separated list of hosts/domains/IP/CIDR that shouldn't go through proxy}
    orphans: ${14:# If C(true), prune all builds whose associated BuildConfig no longer exists and whose status is complete, failed, error, or cancelled}
    password: ${15:# Provide a password for authenticating with the API}
    persist_config: ${16:# Whether or not to save the kube config refresh tokens}
    proxy: ${17:# The URL of an HTTP proxy to use for the connection}
    proxy_headers: ${18:# The Header used for the HTTP proxy}
    username: ${19:# Provide a username for authenticating with the API}
    validate_certs: ${20:# Whether or not to verify the API server's SSL certificates}
  tags:
    - community
    - okd
    - openshift_adm_prune_builds]]></content>
  <tabTrigger>community.okd.openshift_adm_prune_builds</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Prune old completed and failed builds</description>
</snippet>