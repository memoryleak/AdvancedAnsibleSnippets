<snippet>
  <content><![CDATA[- name: ${1:Manage a Kinesis Stream}
  community.aws.kinesis_stream:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    encryption_state: ${6:# Enable or Disable encryption on the Kinesis Stream}
    encryption_type: ${7:# The type of encryption}
    endpoint_url: ${8:# URL to connect to instead of the default AWS endpoints}
    key_id: ${9:# The GUID or alias for the KMS key}
    name: ${10:# The name of the Kinesis Stream you are managing}
    profile: ${11:# A named AWS profile to use for authentication}
    region: ${12:# The AWS region to use}
    retention_period: ${13:# The length of time (in hours) data records are accessible after they are added to the stream}
    secret_key: ${14:# AWS secret access key}
    session_token: ${15:# AWS STS session token for use with temporary credentials}
    shards: ${16:# The number of shards you want to have with this stream}
    state: ${17:# Create or Delete the Kinesis Stream}
    tags: ${18:# A dictionary of resource tags of the form: C( tag1: value1, tag2: value2 )}
    validate_certs: ${19:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    wait: ${20:# Wait for operation to complete before returning}
    wait_timeout: ${21:# How many seconds to wait for an operation to complete before timing out}
  tags:
    - community
    - aws
    - kinesis_stream]]></content>
  <tabTrigger>community.aws.kinesis_stream</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage a Kinesis Stream</description>
</snippet>