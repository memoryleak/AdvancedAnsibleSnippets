<snippet>
  <content><![CDATA[- name: ${1:Assemble configuration files from fragments}
  ansible.builtin.assemble:
    src: ${2:# An already existing directory full of source files}
    dest: ${3:# A file to create using the concatenation of all of the source files}
    backup: ${4:# Create a backup file (if C(yes)), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly}
    delimiter: ${5:# A delimiter to separate the file contents}
    remote_src: ${6:# If C(no), it will search for src at originating/master machine}
    regexp: ${7:# Assemble files only if C(regex) matches the filename}
    ignore_hidden: ${8:# A boolean that controls if files that start with a '}
    validate: ${9:# The validation command to run before copying into place}
    decrypt: ${10:# This option controls the autodecryption of source files using vault}
    mode: ${11:# The permissions the resulting filesystem object should have}
    owner: ${12:# Name of the user that should own the filesystem object, as would be fed to I(chown)}
    group: ${13:# Name of the group that should own the filesystem object, as would be fed to I(chown)}
    seuser: ${14:# The user part of the SELinux filesystem object context}
    serole: ${15:# The role part of the SELinux filesystem object context}
    setype: ${16:# The type part of the SELinux filesystem object context}
    selevel: ${17:# The level part of the SELinux filesystem object context}
    unsafe_writes: ${18:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
    attributes: ${19:# The attributes the resulting filesystem object should have}
  tags:
    - ansible
    - builtin
    - assemble]]></content>
  <tabTrigger>ansible.builtin.assemble</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Assemble configuration files from fragments</description>
</snippet>