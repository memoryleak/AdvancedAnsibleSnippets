<snippet>
  <content><![CDATA[- name: ${1:download a chart from a repository and (optionally) unpack it in local directory}
  kubernetes.core.helm_pull:
    binary_path: ${2:# The path of a helm binary to use}
    chart_ca_cert: ${3:# Verify certificates of HTTPS-enabled servers using this CA bundle}
    chart_devel: ${4:# Use development versions, too}
    chart_ref: ${5:# chart name on chart repository}
    chart_ssl_cert_file: ${6:# Identify HTTPS client using this SSL certificate file}
    chart_ssl_key_file: ${7:# Identify HTTPS client using this SSL key file}
    chart_version: ${8:# Specify a version constraint for the chart version to use}
    destination: ${9:# location to write the chart}
    pass_credentials: ${10:# Pass credentials to all domains}
    provenance: ${11:# Fetch the provenance file, but don't perform verification}
    repo_password: ${12:# Chart repository password where to locate the requested chart}
    repo_url: ${13:# chart repository url where to locate the requested chart}
    repo_username: ${14:# Chart repository username where to locate the requested chart}
    skip_tls_certs_check: ${15:# Whether or not to check tls certificate for the chart download}
    untar_chart: ${16:# if set to true, will untar the chart after downloading it}
    verify_chart: ${17:# Verify the package before using it}
    verify_chart_keyring: ${18:# location of public keys used for verification}
  tags:
    - kubernetes
    - core
    - helm_pull]]></content>
  <tabTrigger>kubernetes.core.helm_pull</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>download a chart from a repository and (optionally) unpack it in local directory</description>
</snippet>