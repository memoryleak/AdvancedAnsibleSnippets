<snippet>
  <content><![CDATA[- name: ${1:Creates a GCP NodePool}
  google.cloud.gcp_container_node_pool:
    access_token: ${2:# An OAuth2 access token if credential type is accesstoken}
    auth_kind: ${3:# The type of credential used}
    autoscaling: ${4:# Autoscaler configuration for this NodePool}
    cluster: ${5:# The cluster this node pool belongs to}
    conditions: ${6:# Which conditions caused the current node pool state}
    config: ${7:# The node configuration of the pool}
    env_type: ${8:# Specifies which Ansible environment you're running this module within}
    initial_node_count: ${9:# The initial node count for the pool}
    location: ${10:# The location where the node pool is deployed}
    management: ${11:# Management configuration for this NodePool}
    max_pods_constraint: ${12:# The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool}
    name: ${13:# The name of the node pool}
    project: ${14:# The Google Cloud Platform project to use}
    scopes: ${15:# Array of scopes to be used}
    service_account_contents: ${16:# The contents of a Service Account JSON file, either in a dictionary or as a JSON string that represents it}
    service_account_email: ${17:# An optional service account email address if machineaccount is selected and the user does not wish to use the default email}
    service_account_file: ${18:# The path of a Service Account JSON file if serviceaccount is selected as type}
    state: ${19:# Whether the given object should exist in GCP}
    version: ${20:# The version of the Kubernetes of this node}
  tags:
    - google
    - cloud
    - gcp_container_node_pool]]></content>
  <tabTrigger>google.cloud.gcp_container_node_pool</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates a GCP NodePool</description>
</snippet>