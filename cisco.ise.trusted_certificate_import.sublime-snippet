<snippet>
  <content><![CDATA[- name: ${1:Resource module for Trusted Certificate Import}
  cisco.ise.trusted_certificate_import:
    allowBasicConstraintCAFalse: ${2:# Allow certificates with Basic Constraints CA Field as False (required)}
    allowOutOfDateCert: ${3:# Allow out of date certificates (required)}
    allowSHA1Certificates: ${4:# Allow SHA1 based certificates (required)}
    data: ${5:# Certificate content (required)}
    description: ${6:# Description of the certificate}
    name: ${7:# Name of the certificate}
    trustForCertificateBasedAdminAuth: ${8:# Trust for Certificate based Admin authentication}
    trustForCiscoServicesAuth: ${9:# Trust for authentication of Cisco Services}
    trustForClientAuth: ${10:# Trust for client authentication and Syslog}
    trustForIseAuth: ${11:# Trust for authentication within Cisco ISE}
    validateCertificateExtensions: ${12:# Validate trust certificate extension}
    ise_hostname: ${13:# The Identity Services Engine hostname}
    ise_username: ${14:# The Identity Services Engine username to authenticate}
    ise_password: ${15:# The Identity Services Engine password to authenticate}
    ise_verify: ${16:# Flag to enable or disable SSL certificate verification}
    ise_version: ${17:# Informs the SDK which version of Identity Services Engine to use}
    ise_wait_on_rate_limit: ${18:# Flag for Identity Services Engine SDK to enable automatic rate-limit handling}
    ise_debug: ${19:# Flag for Identity Services Engine SDK to enable debugging}
    ise_uses_api_gateway: ${20:# Flag that informs the SDK whether to use the Identity Services Engine's API Gateway to send requests}
    ise_uses_csrf_token: ${21:# Flag that informs the SDK whether we send the CSRF token to ISE's ERS APIs}
  tags:
    - cisco
    - ise
    - trusted_certificate_import]]></content>
  <tabTrigger>cisco.ise.trusted_certificate_import</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Resource module for Trusted Certificate Import</description>
</snippet>