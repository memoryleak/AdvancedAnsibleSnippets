<snippet>
  <content><![CDATA[- name: ${1:Manage user accounts}
  ansible.builtin.user:
    append: ${2:# If V(true), add the user to the groups specified in O(groups)}
    authorization: ${3:# Sets the authorization of the user}
    comment: ${4:# Optionally sets the description (aka I(GECOS)) of user account}
    create_home: ${5:# Unless set to V(false), a home directory will be made for the user when the account is created or if the home directory does not exist}
    expires: ${6:# An expiry time for the user in epoch, it will be ignored on platforms that do not support this}
    force: ${7:# This only affects O(state=absent), it forces removal of the user and associated directories on supported platforms}
    generate_ssh_key: ${8:# Whether to generate a SSH key for the user in question}
    group: ${9:# Optionally sets the user's primary group (takes a group name)}
    groups: ${10:# A list of supplementary groups which the user is also a member of}
    hidden: ${11:# macOS only, optionally hide the user from the login window and system preferences}
    home: ${12:# Optionally set the user's home directory}
    local: ${13:# Forces the use of 'local' command alternatives on platforms that implement it}
    login_class: ${14:# Optionally sets the user's login class, a feature of most BSD OSs}
    move_home: ${15:# If set to V(true) when used with O(home), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists}
    name: ${16:# Name of the user to create, remove or modify}
    non_unique: ${17:# Optionally when used with the C(-u) option, this option allows to change the user ID to a non-unique value}
    password: ${18:# If provided, set the user's password to the provided encrypted hash (Linux) or plain text password (macOS)}
    password_expire_account_disable: ${19:# Number of days after a password expires until the account is disabled}
    password_expire_max: ${20:# Maximum number of days between password change}
    password_expire_min: ${21:# Minimum number of days between password change}
    password_expire_warn: ${22:# Number of days of warning before password expires}
    password_lock: ${23:# Lock the password (C(usermod -L), C(usermod -U), C(pw lock))}
    profile: ${24:# Sets the profile of the user}
    remove: ${25:# This only affects O(state=absent), it attempts to remove directories associated with the user}
    role: ${26:# Sets the role of the user}
    seuser: ${27:# Optionally sets the C(seuser) type C(user_u) on SELinux enabled systems}
    shell: ${28:# Optionally set the user's shell}
    skeleton: ${29:# Optionally set a home skeleton directory}
    ssh_key_bits: ${30:# Optionally specify number of bits in SSH key to create}
    ssh_key_comment: ${31:# Optionally define the comment for the SSH key}
    ssh_key_file: ${32:# Optionally specify the SSH key filename}
    ssh_key_passphrase: ${33:# Set a passphrase for the SSH key}
    ssh_key_type: ${34:# Optionally specify the type of SSH key to generate}
    state: ${35:# Whether the account should exist or not, taking action if the state is different from what is stated}
    system: ${36:# When creating an account O(state=present), setting this to V(true) makes the user a system account}
    uid: ${37:# Optionally sets the I(UID) of the user}
    uid_max: ${38:# Sets the UID_MAX value for user creation}
    uid_min: ${39:# Sets the UID_MIN value for user creation}
    umask: ${40:# Sets the umask of the user}
    update_password: ${41:# V(always) will update passwords if they differ}
  tags:
    - user]]></content>
  <tabTrigger>ansible.builtin.user</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage user accounts</description>
</snippet>