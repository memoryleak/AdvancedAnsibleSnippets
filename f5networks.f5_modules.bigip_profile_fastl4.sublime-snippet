<snippet>
  <content><![CDATA[- name: ${1:Manages Fast L4 profiles}
  f5networks.f5_modules.bigip_profile_fastl4:
    client_timeout: ${2:# Specifies a timeout for Late Binding}
    description: ${3:# Description of the profile}
    explicit_flow_migration: ${4:# Specifies whether a qualified late-binding connection requires an explicit iRule command to migrate down to ePVA hardware}
    hardware_syn_cookie: ${5:# Enables or disables hardware SYN cookie support when PVA10 is present on the system}
    idle_timeout: ${6:# Specifies the length of time a connection is idle (has no traffic) before the connection is eligible for deletion}
    ip_df_mode: ${7:# Specifies the Don't Fragment (DF) bit setting in the IP Header of the outgoing TCP packet}
    ip_tos_to_client: ${8:# For IP traffic passing through the system to clients, specifies whether the system modifies the IP type-of-service (ToS) setting in an IP packet header}
    ip_tos_to_server: ${9:# For IP traffic passing through the system to back-end servers, specifies whether the system modifies the IP type-of-service (ToS) setting in an IP packet header}
    ip_ttl_mode: ${10:# Specifies the outgoing TCP packet's IP Header TTL mode}
    ip_ttl_v4: ${11:# Specifies the outgoing packet's IP Header TTL value for IPv4 traffic}
    ip_ttl_v6: ${12:# Specifies the outgoing packet's IP Header TTL value for IPv6 traffic}
    keep_alive_interval: ${13:# Specifies the keep-alive probe interval, in seconds}
    late_binding: ${14:# Enables intelligent selection of a back-end server or pool, using an iRule to make the selection}
    link_qos_to_client: ${15:# For IP traffic passing through the system to clients, specifies whether the system modifies the link quality-of-service (QoS) setting in an IP packet header}
    link_qos_to_server: ${16:# For IP traffic passing through the system to back-end servers, specifies whether the system modifies the link quality-of-service (QoS) setting in an IP packet header}
    loose_close: ${17:# When C(true), specifies the system closes a loosely-initiated connection when the system receives the first FIN packet from either the client or the server}
    loose_initialization: ${18:# When C(true), specifies the system initializes a connection when it receives any TCP packet, rather than requiring a SYN packet for connection initiation}
    mss_override: ${19:# Specifies a maximum segment size (MSS) override for server-side connections}
    name: ${20:# Specifies the name of the profile}
    parent: ${21:# Specifies the profile from which this profile inherits settings}
    partition: ${22:# Device partition to manage resources on}
    provider: ${23:# A dict object containing connection details}
    pva_acceleration: ${24:# Specifies the Packet Velocity ASIC acceleration policy}
    reassemble_fragments: ${25:# When C(true), specifies the system reassembles IP fragments}
    receive_window_size: ${26:# Specifies the amount of data the BIG-IP system can accept without acknowledging the server}
    reset_on_timeout: ${27:# When C(true), specifies the system sends a reset packet (RST) in addition to deleting the connection, when a connection exceeds the idle timeout value}
    rtt_from_client: ${28:# When C(true), specifies the system uses TCP timestamp options to measure the round-trip time to the client}
    rtt_from_server: ${29:# When C(true), specifies the system uses TCP timestamp options to measure the round-trip time to the server}
    server_sack: ${30:# Specifies whether the BIG-IP system processes Selective ACK (Sack) packets in cookie responses from the server}
    server_timestamp: ${31:# Specifies whether the BIG-IP system processes timestamp request packets in cookie responses from the server}
    state: ${32:# When C(present), ensures the profile exists}
    syn_cookie_enable: ${33:# Specifies whether or not to use SYN Cookie}
    syn_cookie_mss: ${34:# Specifies a value that overrides the SYN cookie maximum segment size (MSS) value in the SYN-ACK packet that is returned to the client}
    tcp_close_timeout: ${35:# Specifies the length of time a connection can remain idle before deletion}
    tcp_generate_isn: ${36:# When C(true), specifies the system generates initial sequence numbers for SYN packets, according to RFC 1948}
    tcp_handshake_timeout: ${37:# Specifies the acceptable duration for a TCP handshake (the maximum idle time between a client synchronization (SYN) and a client acknowledgment (ACK))}
    tcp_strip_sack: ${38:# When C(true), specifies the system blocks a TCP selective ACK SackOK option from passing to the server on an initiating SYN}
    tcp_time_wait_timeout: ${39:# Specifies the number of milliseconds a connection is in the TIME-WAIT state before closing}
    tcp_timestamp_mode: ${40:# Specifies the action the system should take on TCP timestamps}
    tcp_wscale_mode: ${41:# Specifies the action the system should take on TCP windows}
    timeout_recovery: ${42:# Specifies how to handle client-timeout errors for Late Binding}
  tags:
    - f5networks
    - f5_modules
    - bigip_profile_fastl4]]></content>
  <tabTrigger>f5networks.f5_modules.bigip_profile_fastl4</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manages Fast L4 profiles</description>
</snippet>