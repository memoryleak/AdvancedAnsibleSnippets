<snippet>
  <content><![CDATA[- name: ${1:Manage Swarm cluster}
  community.docker.docker_swarm:
    advertise_addr: ${2:# Externally reachable address advertised to other nodes}
    api_version: ${3:# The version of the Docker API running on the Docker Host}
    autolock_managers: ${4:# If set, generate a key and use it to lock data stored on the managers}
    ca_force_rotate: ${5:# An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified}
    ca_path: ${6:# Use a CA certificate when performing server verification by providing the path to a CA certificate file}
    client_cert: ${7:# Path to the client's TLS certificate file}
    client_key: ${8:# Path to the client's TLS key file}
    data_path_addr: ${9:# Address or interface to use for data path traffic}
    data_path_port: ${10:# Port to use for data path traffic}
    debug: ${11:# Debug mode}
    default_addr_pool: ${12:# Default address pool in CIDR format}
    dispatcher_heartbeat_period: ${13:# The delay (in nanoseconds) for an agent to send a heartbeat to the dispatcher}
    docker_host: ${14:# The URL or Unix socket path used to connect to the Docker API}
    election_tick: ${15:# Amount of ticks (in seconds) needed without a leader to trigger a new election}
    force: ${16:# Use with state V(present) to force creating a new Swarm, even if already part of one}
    heartbeat_tick: ${17:# Amount of ticks (in seconds) between each heartbeat}
    join_token: ${18:# Swarm token used to join a swarm cluster}
    keep_old_snapshots: ${19:# Number of snapshots to keep beyond the current snapshot}
    labels: ${20:# User-defined key/value metadata}
    listen_addr: ${21:# Listen address used for inter-manager communication}
    log_entries_for_slow_followers: ${22:# Number of log entries to keep around to sync up slow followers after a snapshot is created}
    name: ${23:# The name of the swarm}
    node_cert_expiry: ${24:# Automatic expiry for nodes certificates, given in nanoseconds}
    node_id: ${25:# Swarm id of the node to remove}
    remote_addrs: ${26:# Remote address of one or more manager nodes of an existing Swarm to connect to}
    rotate_manager_token: ${27:# Rotate the manager join token}
    rotate_worker_token: ${28:# Rotate the worker join token}
    signing_ca_cert: ${29:# The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format}
    signing_ca_key: ${30:# The desired signing CA key for all swarm node TLS leaf certificates, in PEM format}
    snapshot_interval: ${31:# Number of logs entries between snapshot}
    ssl_version: ${32:# Provide a valid SSL version number}
    state: ${33:# Set to V(present), to create/update a new cluster}
    subnet_size: ${34:# Default address pool subnet mask length}
    task_history_retention_limit: ${35:# Maximum number of tasks history stored}
    timeout: ${36:# The maximum amount of time in seconds to wait on a response from the API}
    tls: ${37:# Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server}
    tls_hostname: ${38:# When verifying the authenticity of the Docker Host server, provide the expected name of the server}
    use_ssh_client: ${39:# For SSH transports, use the C(ssh) CLI tool instead of paramiko}
    validate_certs: ${40:# Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server}
  tags:
    - community
    - docker
    - docker_swarm]]></content>
  <tabTrigger>community.docker.docker_swarm</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage Swarm cluster</description>
</snippet>