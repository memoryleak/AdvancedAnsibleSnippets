<snippet>
  <content><![CDATA[- name: ${1:Module for setup of AnalyticsProfile Avi RESTful Object}
  community.network.avi_analyticsprofile:
    apdex_response_threshold: ${2:# If a client receives an http response in less than the satisfactory latency threshold, the request is considered satisfied}
    apdex_response_tolerated_factor: ${3:# Client tolerated response latency factor}
    apdex_rtt_threshold: ${4:# Satisfactory client to avi round trip time(rtt)}
    apdex_rtt_tolerated_factor: ${5:# Tolerated client to avi round trip time(rtt) factor}
    apdex_rum_threshold: ${6:# If a client is able to load a page in less than the satisfactory latency threshold, the pageload is considered satisfied}
    apdex_rum_tolerated_factor: ${7:# Virtual service threshold factor for tolerated page load time (plt) as multiple of apdex_rum_threshold}
    apdex_server_response_threshold: ${8:# A server http response is considered satisfied if latency is less than the satisfactory latency threshold}
    apdex_server_response_tolerated_factor: ${9:# Server tolerated response latency factor}
    apdex_server_rtt_threshold: ${10:# Satisfactory client to avi round trip time(rtt)}
    apdex_server_rtt_tolerated_factor: ${11:# Tolerated client to avi round trip time(rtt) factor}
    api_context: ${12:# Avi API context that includes current session ID and CSRF Token}
    api_version: ${13:# Avi API version of to use for Avi API and objects}
    avi_api_patch_op: ${14:# Patch operation to use when using avi_api_update_method as patch}
    avi_api_update_method: ${15:# Default method for object update is HTTP PUT}
    avi_credentials: ${16:# Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details}
    avi_disable_session_cache_as_fact: ${17:# It disables avi session information to be cached as a fact}
    client_log_config: ${18:# Configure which logs are sent to the avi controller from ses and how they are processed}
    client_log_streaming_config: ${19:# Configure to stream logs to an external server}
    conn_lossy_ooo_threshold: ${20:# A connection between client and avi is considered lossy when more than this percentage of out of order packets are received}
    conn_lossy_timeo_rexmt_threshold: ${21:# A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted due to timeout}
    conn_lossy_total_rexmt_threshold: ${22:# A connection between client and avi is considered lossy when more than this percentage of packets are retransmitted}
    conn_lossy_zero_win_size_event_threshold: ${23:# A client connection is considered lossy when percentage of times a packet could not be transmitted due to tcp zero window is above this threshold}
    conn_server_lossy_ooo_threshold: ${24:# A connection between avi and server is considered lossy when more than this percentage of out of order packets are received}
    conn_server_lossy_timeo_rexmt_threshold: ${25:# A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted due to timeout}
    conn_server_lossy_total_rexmt_threshold: ${26:# A connection between avi and server is considered lossy when more than this percentage of packets are retransmitted}
    conn_server_lossy_zero_win_size_event_threshold: ${27:# A server connection is considered lossy when percentage of times a packet could not be transmitted due to tcp zero window is above this threshold}
    controller: ${28:# IP address or hostname of the controller}
    description: ${29:# User defined description for the object}
    disable_ondemand_metrics: ${30:# Virtual service (vs) metrics are processed only when there is live data traffic on the vs}
    disable_se_analytics: ${31:# Disable node (service engine) level analytics forvs metrics}
    disable_server_analytics: ${32:# Disable analytics on backend servers}
    disable_vs_analytics: ${33:# Disable virtualservice (frontend) analytics}
    enable_advanced_analytics: ${34:# Enables advanced analytics features like anomaly detection}
    exclude_client_close_before_request_as_error: ${35:# Exclude client closed connection before an http request could be completed from being classified as an error}
    exclude_dns_policy_drop_as_significant: ${36:# Exclude dns policy drops from the list of errors}
    exclude_gs_down_as_error: ${37:# Exclude queries to gslb services that are operationally down from the list of errors}
    exclude_http_error_codes: ${38:# List of http status codes to be excluded from being classified as an error}
    exclude_invalid_dns_domain_as_error: ${39:# Exclude dns queries to domains outside the domains configured in the dns application profile from the list of errors}
    exclude_invalid_dns_query_as_error: ${40:# Exclude invalid dns queries from the list of errors}
    exclude_no_dns_record_as_error: ${41:# Exclude queries to domains that did not have configured services/records from the list of errors}
    exclude_no_valid_gs_member_as_error: ${42:# Exclude queries to gslb services that have no available members from the list of errors}
    exclude_persistence_change_as_error: ${43:# Exclude persistence server changed while load balancing' from the list of errors}
    exclude_server_dns_error_as_error: ${44:# Exclude server dns error response from the list of errors}
    exclude_server_tcp_reset_as_error: ${45:# Exclude server tcp reset from errors}
    exclude_sip_error_codes: ${46:# List of sip status codes to be excluded from being classified as an error}
    exclude_syn_retransmit_as_error: ${47:# Exclude 'server unanswered syns' from the list of errors}
    exclude_tcp_reset_as_error: ${48:# Exclude tcp resets by client from the list of potential errors}
    exclude_unsupported_dns_query_as_error: ${49:# Exclude unsupported dns queries from the list of errors}
    healthscore_max_server_limit: ${50:# Skips health score computation of pool servers when number of servers in a pool is more than this setting}
    hs_event_throttle_window: ${51:# Time window (in secs) within which only unique health change events should occur}
    hs_max_anomaly_penalty: ${52:# Maximum penalty that may be deducted from health score for anomalies}
    hs_max_resources_penalty: ${53:# Maximum penalty that may be deducted from health score for high resource utilization}
    hs_max_security_penalty: ${54:# Maximum penalty that may be deducted from health score based on security assessment}
    hs_min_dos_rate: ${55:# Dos connection rate below which the dos security assessment will not kick in}
    hs_performance_boost: ${56:# Adds free performance score credits to health score}
    hs_pscore_traffic_threshold_l4_client: ${57:# Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed}
    hs_pscore_traffic_threshold_l4_server: ${58:# Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed}
    hs_security_certscore_expired: ${59:# Score assigned when the certificate has expired}
    hs_security_certscore_gt30d: ${60:# Score assigned when the certificate expires in more than 30 days}
    hs_security_certscore_le07d: ${61:# Score assigned when the certificate expires in less than or equal to 7 days}
    hs_security_certscore_le30d: ${62:# Score assigned when the certificate expires in less than or equal to 30 days}
    hs_security_chain_invalidity_penalty: ${63:# Penalty for allowing certificates with invalid chain}
    hs_security_cipherscore_eq000b: ${64:# Score assigned when the minimum cipher strength is 0 bits}
    hs_security_cipherscore_ge128b: ${65:# Score assigned when the minimum cipher strength is greater than equal to 128 bits}
    hs_security_cipherscore_lt128b: ${66:# Score assigned when the minimum cipher strength is less than 128 bits}
    hs_security_encalgo_score_none: ${67:# Score assigned when no algorithm is used for encryption}
    hs_security_encalgo_score_rc4: ${68:# Score assigned when rc4 algorithm is used for encryption}
    hs_security_hsts_penalty: ${69:# Penalty for not enabling hsts}
    hs_security_nonpfs_penalty: ${70:# Penalty for allowing non-pfs handshakes}
    hs_security_selfsignedcert_penalty: ${71:# Deprecated}
    hs_security_ssl30_score: ${72:# Score assigned when supporting ssl3}
    hs_security_tls10_score: ${73:# Score assigned when supporting tls1}
    hs_security_tls11_score: ${74:# Score assigned when supporting tls1}
    hs_security_tls12_score: ${75:# Score assigned when supporting tls1}
    hs_security_weak_signature_algo_penalty: ${76:# Penalty for allowing weak signature algorithm(s)}
    name: ${77:# The name of the analytics profile}
    ondemand_metrics_idle_timeout: ${78:# This flag sets the time duration of no live data traffic after which virtual service metrics processing is suspended}
    password: ${79:# Password of Avi user in Avi controller}
    ranges: ${80:# List of http status code ranges to be excluded from being classified as an error}
    resp_code_block: ${81:# Block of http response codes to be excluded from being classified as an error}
    sensitive_log_profile: ${82:# Rules applied to the http application log for filtering sensitive information}
    sip_log_depth: ${83:# Maximum number of sip messages added in logs for a sip transaction}
    state: ${84:# The state that should be applied on the entity}
    tenant: ${85:# Name of tenant used for all Avi API calls and context of object}
    tenant_ref: ${86:# It is a reference to an object of type tenant}
    tenant_uuid: ${87:# UUID of tenant used for all Avi API calls and context of object}
    url: ${88:# Avi controller URL of the object}
    username: ${89:# Username used for accessing Avi controller}
    uuid: ${90:# Uuid of the analytics profile}
  tags:
    - community
    - network
    - avi_analyticsprofile]]></content>
  <tabTrigger>community.network.avi_analyticsprofile</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module for setup of AnalyticsProfile Avi RESTful Object</description>
</snippet>