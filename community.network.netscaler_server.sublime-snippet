<snippet>
  <content><![CDATA[- name: ${1:Manage server configuration}
  community.network.netscaler_server:
    comment: ${2:# Any information about the server}
    delay: ${3:# Time, in seconds, after which all the services configured on the server are disabled}
    disabled: ${4:# When set to C(true) the server state will be set to C(disabled)}
    domain: ${5:# Domain name of the server}
    domainresolveretry: ${6:# Time, in seconds, for which the NetScaler appliance must wait, after DNS resolution fails, before sending the next DNS query to resolve the domain name}
    graceful: ${7:# Shut down gracefully, without accepting any new connections, and disabling each service when all of its connections are closed}
    ipaddress: ${8:# IPv4 or IPv6 address of the server}
    ipv6address: ${9:# Support IPv6 addressing mode}
    name: ${10:# Name for the server}
    nitro_pass: ${11:# The password with which to authenticate to the netscaler node}
    nitro_protocol: ${12:# Which protocol to use when accessing the nitro API objects}
    nitro_timeout: ${13:# Time in seconds until a timeout error is thrown when establishing a new session with Netscaler}
    nitro_user: ${14:# The username with which to authenticate to the netscaler node}
    nsip: ${15:# The ip address of the netscaler appliance where the nitro API calls will be made}
    save_config: ${16:# If C(yes) the module will save the configuration on the netscaler node if it makes any changes}
    state: ${17:# The state of the resource being configured by the module on the netscaler node}
    td: ${18:# Integer value that uniquely identifies the traffic domain in which you want to configure the entity}
    translationip: ${19:# IP address used to transform the server's DNS-resolved IP address}
    translationmask: ${20:# The netmask of the translation ip}
    validate_certs: ${21:# If C(no), SSL certificates will not be validated}
  tags:
    - community
    - network
    - netscaler_server]]></content>
  <tabTrigger>community.network.netscaler_server</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage server configuration</description>
</snippet>