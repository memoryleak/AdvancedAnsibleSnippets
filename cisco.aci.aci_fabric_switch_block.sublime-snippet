<snippet>
  <content><![CDATA[- name: ${1:Manage switch blocks (fabric:NodeBlk)}
  cisco.aci.aci_fabric_switch_block:
    annotation: ${2:# User-defined string for annotating an object}
    association: ${3:# Name of an existing switch association}
    certificate_name: ${4:# The X}
    description: ${5:# Description of the Node Block}
    from_node: ${6:# First Node ID of the block}
    host: ${7:# IP Address or hostname of APIC resolvable by Ansible control host}
    name: ${8:# Name of the block}
    output_level: ${9:# Influence the output of this ACI module}
    output_path: ${10:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    password: ${11:# The password to use for authentication}
    port: ${12:# Port number to be used for REST connection}
    private_key: ${13:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    profile: ${14:# Name of an existing fabric spine or leaf switch profile}
    state: ${15:# Use C(present) or C(absent) for adding or removing}
    switch_type: ${16:# Type of switch profile, leaf or spine}
    timeout: ${17:# The socket level timeout in seconds}
    to_node: ${18:# Last Node ID of the block}
    use_proxy: ${19:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${20:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${21:# The username to use for authentication}
    validate_certs: ${22:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_fabric_switch_block]]></content>
  <tabTrigger>cisco.aci.aci_fabric_switch_block</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage switch blocks (fabric:NodeBlk)</description>
</snippet>