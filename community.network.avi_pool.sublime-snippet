<snippet>
  <content><![CDATA[- name: ${1:Module for setup of Pool Avi RESTful Object}
  community.network.avi_pool:
    a_pool: ${2:# Name of container cloud application that constitutes a pool in a a-b pool configuration, if different from vs app}
    ab_pool: ${3:# A/b pool configuration}
    ab_priority: ${4:# Priority of this pool in a a-b pool pair}
    analytics_policy: ${5:# Determines analytics settings for the pool}
    analytics_profile_ref: ${6:# Specifies settings related to analytics}
    api_context: ${7:# Avi API context that includes current session ID and CSRF Token}
    api_version: ${8:# Avi API version of to use for Avi API and objects}
    apic_epg_name: ${9:# Synchronize cisco apic epg members with pool servers}
    application_persistence_profile_ref: ${10:# Persistence will ensure the same user sticks to the same server for a desired duration of time}
    autoscale_launch_config_ref: ${11:# If configured then avi will trigger orchestration of pool server creation and deletion}
    autoscale_networks: ${12:# Network ids for the launch configuration}
    autoscale_policy_ref: ${13:# Reference to server autoscale policy}
    avi_api_patch_op: ${14:# Patch operation to use when using avi_api_update_method as patch}
    avi_api_update_method: ${15:# Default method for object update is HTTP PUT}
    avi_credentials: ${16:# Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details}
    avi_disable_session_cache_as_fact: ${17:# It disables avi session information to be cached as a fact}
    capacity_estimation: ${18:# Inline estimation of capacity of servers}
    capacity_estimation_ttfb_thresh: ${19:# The maximum time-to-first-byte of a server}
    cloud_config_cksum: ${20:# Checksum of cloud configuration for pool}
    cloud_ref: ${21:# It is a reference to an object of type cloud}
    conn_pool_properties: ${22:# Connection pool properties}
    connection_ramp_duration: ${23:# Duration for which new connections will be gradually ramped up to a server recently brought online}
    controller: ${24:# IP address or hostname of the controller}
    created_by: ${25:# Creator name}
    default_server_port: ${26:# Traffic sent to servers will use this destination server port unless overridden by the server's specific port attribute}
    delete_server_on_dns_refresh: ${27:# Indicates whether existing ips are disabled(false) or deleted(true) on dns hostname refreshdetail -- on a dns refresh, some ips set on pool may}
    description: ${28:# A description of the pool}
    domain_name: ${29:# Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates}
    east_west: ${30:# Inherited config from virtualservice}
    enabled: ${31:# Enable or disable the pool}
    external_autoscale_groups: ${32:# Names of external auto-scale groups for pool servers}
    fail_action: ${33:# Enable an action - close connection, http redirect or local http response - when a pool failure happens}
    fewest_tasks_feedback_delay: ${34:# Periodicity of feedback for fewest tasks server selection algorithm}
    graceful_disable_timeout: ${35:# Used to gracefully disable a server}
    gslb_sp_enabled: ${36:# Indicates if the pool is a site-persistence pool}
    health_monitor_refs: ${37:# Verify server health by applying one or more health monitors}
    host_check_enabled: ${38:# Enable common name check for server certificate}
    inline_health_monitor: ${39:# The passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses}
    ipaddrgroup_ref: ${40:# Use list of servers from ip address group}
    lb_algorithm: ${41:# The load balancing algorithm will pick a server within the pool's list of available servers}
    lb_algorithm_consistent_hash_hdr: ${42:# Http header name to be used for the hash key}
    lb_algorithm_core_nonaffinity: ${43:# Degree of non-affinity for core affinity based server selection}
    lb_algorithm_hash: ${44:# Criteria used as a key for determining the hash between the client and  server}
    lookup_server_by_name: ${45:# Allow server lookup by name}
    max_concurrent_connections_per_server: ${46:# The maximum number of concurrent connections allowed to each server within the pool}
    max_conn_rate_per_server: ${47:# Rate limit connections to each server}
    min_health_monitors_up: ${48:# Minimum number of health monitors in up state to mark server up}
    min_servers_up: ${49:# Minimum number of servers in up state for marking the pool up}
    name: ${50:# The name of the pool}
    networks: ${51:# (internal-use) networks designated as containing servers for this pool}
    nsx_securitygroup: ${52:# A list of nsx service groups where the servers for the pool are created}
    password: ${53:# Password of Avi user in Avi controller}
    pki_profile_ref: ${54:# Avi will validate the ssl certificate present by a server against the selected pki profile}
    placement_networks: ${55:# Manually select the networks and subnets used to provide reachability to the pool's servers}
    prst_hdr_name: ${56:# Header name for custom header persistence}
    request_queue_depth: ${57:# Minimum number of requests to be queued when pool is full}
    request_queue_enabled: ${58:# Enable request queue when pool is full}
    rewrite_host_header_to_server_name: ${59:# Rewrite incoming host header to server name of the server to which the request is proxied}
    rewrite_host_header_to_sni: ${60:# If sni server name is specified, rewrite incoming host header to the sni server name}
    server_auto_scale: ${61:# Server autoscale}
    server_count: ${62:# Field deprecated in 18}
    server_name: ${63:# Fully qualified dns hostname which will be used in the tls sni extension in server connections if sni is enabled}
    server_reselect: ${64:# Server reselect configuration for http requests}
    server_timeout: ${65:# Server timeout value specifies the time within which a server connection needs to be established and a request-response exchange completes}
    servers: ${66:# The pool directs load balanced traffic to this list of destination servers}
    service_metadata: ${67:# Metadata pertaining to the service provided by this pool}
    sni_enabled: ${68:# Enable tls sni for server connections}
    ssl_key_and_certificate_ref: ${69:# Service engines will present a client ssl certificate to the server}
    ssl_profile_ref: ${70:# When enabled, avi re-encrypts traffic to the backend servers}
    state: ${71:# The state that should be applied on the entity}
    tenant: ${72:# Name of tenant used for all Avi API calls and context of object}
    tenant_ref: ${73:# It is a reference to an object of type tenant}
    tenant_uuid: ${74:# UUID of tenant used for all Avi API calls and context of object}
    url: ${75:# Avi controller URL of the object}
    use_service_port: ${76:# Do not translate the client's destination port when sending the connection to the server}
    username: ${77:# Username used for accessing Avi controller}
    uuid: ${78:# Uuid of the pool}
    vrf_ref: ${79:# Virtual routing context that the pool is bound to}
  tags:
    - community
    - network
    - avi_pool]]></content>
  <tabTrigger>community.network.avi_pool</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module for setup of Pool Avi RESTful Object</description>
</snippet>