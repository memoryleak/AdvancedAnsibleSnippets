<snippet>
  <content><![CDATA[- name: ${1:Create, drop, or modify a PostgreSQL table}
  community.postgresql.postgresql_table:
    table: ${2:# Table name}
    state: ${3:# The table state}
    tablespace: ${4:# Set a tablespace for the table}
    owner: ${5:# Set a table owner}
    unlogged: ${6:# Create an unlogged table}
    like: ${7:# Create a table like another table (with similar DDL)}
    including: ${8:# Keywords that are used with like parameter, may be DEFAULTS, CONSTRAINTS, INDEXES, STORAGE, COMMENTS or ALL}
    columns: ${9:# Columns that are needed}
    rename: ${10:# New table name}
    truncate: ${11:# Truncate a table}
    storage_params: ${12:# Storage parameters like fillfactor, autovacuum_vacuum_treshold, etc}
    db: ${13:# Name of database to connect and where the table will be created}
    session_role: ${14:# Switch to session_role after connecting}
    cascade: ${15:# Automatically drop objects that depend on the table (such as views)}
    trust_input: ${16:# If C(false), check whether values of parameters are potentially dangerous}
    login_user: ${17:# The username this module should use to establish its PostgreSQL session}
    login_password: ${18:# The password this module should use to establish its PostgreSQL session}
    login_host: ${19:# Host running the database}
    login_unix_socket: ${20:# Path to a Unix domain socket for local connections}
    port: ${21:# Database port to connect to}
    ssl_mode: ${22:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    ca_cert: ${23:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${24:# Any additional parameters to be passed to libpg}
  tags:
    - community
    - postgresql
    - postgresql_table]]></content>
  <tabTrigger>community.postgresql.postgresql_table</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Create, drop, or modify a PostgreSQL table</description>
</snippet>