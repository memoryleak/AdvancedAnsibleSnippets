<snippet>
  <content><![CDATA[- name: ${1:Manage an AWS VPC Carrier gateway}
  community.aws.ec2_carrier_gateway:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    carrier_gateway_id: ${5:# The Carrier Gateway ID to manage the Carrier Gateway}
    debug_botocore_endpoint_logs: ${6:# Use a C(botocore}
    endpoint_url: ${7:# URL to connect to instead of the default AWS endpoints}
    profile: ${8:# A named AWS profile to use for authentication}
    purge_tags: ${9:# If O(purge_tags=true) and O(tags) is set, existing tags will be purged from the resource to match exactly what is defined by O(tags) parameter}
    region: ${10:# The AWS region to use}
    secret_key: ${11:# AWS secret access key}
    session_token: ${12:# AWS STS session token for use with temporary credentials}
    state: ${13:# Create or terminate the Carrier Gateway}
    tags: ${14:# A dictionary representing the tags to be applied to the resource}
    validate_certs: ${15:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    vpc_id: ${16:# The VPC ID for the VPC in which to manage the Carrier Gateway}
  tags:
    - community
    - aws
    - ec2_carrier_gateway]]></content>
  <tabTrigger>community.aws.ec2_carrier_gateway</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage an AWS VPC Carrier gateway</description>
</snippet>