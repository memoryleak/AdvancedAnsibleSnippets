<snippet>
  <content><![CDATA[- name: ${1:Creates a GCP Address}
  google.cloud.gcp_compute_address:
    access_token: ${2:# An OAuth2 access token if credential type is accesstoken}
    address: ${3:# The static external IP address represented by this resource}
    address_type: ${4:# The type of address to reserve}
    auth_kind: ${5:# The type of credential used}
    description: ${6:# An optional description of this resource}
    env_type: ${7:# Specifies which Ansible environment you're running this module within}
    name: ${8:# Name of the resource}
    network: ${9:# The URL of the network in which to reserve the address}
    network_tier: ${10:# The networking tier used for configuring this address}
    prefix_length: ${11:# The prefix length if the resource represents an IP range}
    project: ${12:# The Google Cloud Platform project to use}
    purpose: ${13:# The purpose of this resource, which can be one of the following values: * GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources}
    region: ${14:# URL of the region where the regional address resides}
    scopes: ${15:# Array of scopes to be used}
    service_account_contents: ${16:# The contents of a Service Account JSON file, either in a dictionary or as a JSON string that represents it}
    service_account_email: ${17:# An optional service account email address if machineaccount is selected and the user does not wish to use the default email}
    service_account_file: ${18:# The path of a Service Account JSON file if serviceaccount is selected as type}
    state: ${19:# Whether the given object should exist in GCP}
    subnetwork: ${20:# The URL of the subnetwork in which to reserve the address}
  tags:
    - google
    - cloud
    - gcp_compute_address]]></content>
  <tabTrigger>google.cloud.gcp_compute_address</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates a GCP Address</description>
</snippet>