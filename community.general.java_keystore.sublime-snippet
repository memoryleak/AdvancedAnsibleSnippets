<snippet>
  <content><![CDATA[- name: ${1:Create a Java keystore in JKS format}
  community.general.java_keystore:
    name: ${2:# Name of the certificate in the keystore}
    certificate: ${3:# Content of the certificate used to create the keystore}
    certificate_path: ${4:# Location of the certificate used to create the keystore}
    private_key: ${5:# Content of the private key used to create the keystore}
    private_key_path: ${6:# Location of the private key used to create the keystore}
    private_key_passphrase: ${7:# Passphrase used to read the private key, if required}
    password: ${8:# Password that should be used to secure the keystore}
    dest: ${9:# Absolute path of the generated keystore}
    force: ${10:# Keystore is created even if it already exists}
    owner: ${11:# Name of the user that should own jks file}
    group: ${12:# Name of the group that should own jks file}
    mode: ${13:# Mode the file should be}
    ssl_backend: ${14:# Backend for loading private keys and certificates}
    keystore_type: ${15:# Type of the Java keystore}
    seuser: ${16:# The user part of the SELinux filesystem object context}
    serole: ${17:# The role part of the SELinux filesystem object context}
    setype: ${18:# The type part of the SELinux filesystem object context}
    selevel: ${19:# The level part of the SELinux filesystem object context}
    unsafe_writes: ${20:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
    attributes: ${21:# The attributes the resulting filesystem object should have}
  tags:
    - community
    - general
    - java_keystore]]></content>
  <tabTrigger>community.general.java_keystore</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Create a Java keystore in JKS format</description>
</snippet>