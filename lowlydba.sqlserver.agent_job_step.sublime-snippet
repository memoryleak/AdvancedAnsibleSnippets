<snippet>
  <content><![CDATA[- name: ${1:Configures a SQL Agent job step}
  lowlydba.sqlserver.agent_job_step:
    command: ${2:# The commands to be executed by SQLServerAgent service through subsystem}
    database: ${3:# The name of the database in which to execute a Transact-SQL step}
    job: ${4:# The name of the job to which to add the step}
    on_fail_action: ${5:# The action to perform if the step fails}
    on_fail_step_id: ${6:# The ID of the step in this job to execute if the step fails and I(on_fail_action=GoToStep)}
    on_success_action: ${7:# The action to perform if the step succeeds}
    on_success_step_id: ${8:# The ID of the step in this job to execute if the step succeeds and I(on_success_action=GoToStep)}
    retry_attempts: ${9:# The number of retry attempts to use if this step fails}
    retry_interval: ${10:# The amount of time in minutes between retry attempts}
    sql_instance: ${11:# The SQL Server instance to modify}
    sql_password: ${12:# Password for SQL Authentication}
    sql_username: ${13:# Username for SQL Authentication}
    state: ${14:# Whether or not the object should be C(present) or C(absent)}
    step_id: ${15:# The sequence identification number for the job step}
    step_name: ${16:# The name of the step}
    subsystem: ${17:# The subsystem used by the SQL Server Agent service to execute command}
  tags:
    - lowlydba
    - sqlserver
    - agent_job_step]]></content>
  <tabTrigger>lowlydba.sqlserver.agent_job_step</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Configures a SQL Agent job step</description>
</snippet>