<snippet>
  <content><![CDATA[- name: ${1:Replace all instances of a particular string in a file using a back-referenced regular expression}
  ansible.builtin.replace:
    after: ${2:# If specified, only content after this match will be replaced/removed}
    attributes: ${3:# The attributes the resulting filesystem object should have}
    backup: ${4:# Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly}
    before: ${5:# If specified, only content before this match will be replaced/removed}
    encoding: ${6:# The character encoding for reading and writing the file}
    group: ${7:# Name of the group that should own the filesystem object, as would be fed to I(chown)}
    mode: ${8:# The permissions the resulting filesystem object should have}
    others: ${9:# All arguments accepted by the M(ansible}
    owner: ${10:# Name of the user that should own the filesystem object, as would be fed to I(chown)}
    path: ${11:# The file to modify}
    regexp: ${12:# The regular expression to look for in the contents of the file}
    replace: ${13:# The string to replace regexp matches}
    selevel: ${14:# The level part of the SELinux filesystem object context}
    serole: ${15:# The role part of the SELinux filesystem object context}
    setype: ${16:# The type part of the SELinux filesystem object context}
    seuser: ${17:# The user part of the SELinux filesystem object context}
    unsafe_writes: ${18:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
    validate: ${19:# The validation command to run before copying the updated file into the final destination}
  tags:
    - replace]]></content>
  <tabTrigger>ansible.builtin.replace</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Replace all instances of a particular string in a file using a back-referenced regular expression</description>
</snippet>