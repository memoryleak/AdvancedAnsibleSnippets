<snippet>
  <content><![CDATA[- name: ${1:Bind EPG to AEP (infra:RsFuncToEpg)}
  cisco.aci.aci_aep_to_epg:
    aep: ${2:# The name of the Attachable Access Entity Profile}
    annotation: ${3:# User-defined string for annotating an object}
    ap: ${4:# Name of an existing application network profile, that will contain the EPGs}
    certificate_name: ${5:# The X}
    encap: ${6:# The VLAN associated with this application EPG}
    epg: ${7:# The name of the end point group}
    host: ${8:# IP Address or hostname of APIC resolvable by Ansible control host}
    interface_mode: ${9:# Determines how layer 2 tags will be read from and added to frames}
    output_level: ${10:# Influence the output of this ACI module}
    output_path: ${11:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    password: ${12:# The password to use for authentication}
    port: ${13:# Port number to be used for REST connection}
    primary_encap: ${14:# The primary VLAN associated with this EPG}
    private_key: ${15:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    state: ${16:# Use C(present) or C(absent) for adding or removing}
    tenant: ${17:# The name of an existing tenant}
    timeout: ${18:# The socket level timeout in seconds}
    use_proxy: ${19:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${20:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${21:# The username to use for authentication}
    validate_certs: ${22:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_aep_to_epg]]></content>
  <tabTrigger>cisco.aci.aci_aep_to_epg</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Bind EPG to AEP (infra:RsFuncToEpg)</description>
</snippet>