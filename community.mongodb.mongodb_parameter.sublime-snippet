<snippet>
  <content><![CDATA[- name: ${1:Change an administrative parameter on a MongoDB server}
  community.mongodb.mongodb_parameter:
    atlas_auth: ${2:# Authentication path intended for MongoDB Atlas Instances}
    auth_mechanism: ${3:# Authentication type}
    connection_options: ${4:# Additional connection options}
    login_database: ${5:# The database where login credentials are stored}
    login_host: ${6:# The host running MongoDB instance to login to}
    login_password: ${7:# The password used to authenticate with}
    login_port: ${8:# The MongoDB server port to login to}
    login_user: ${9:# The MongoDB user to login with}
    param: ${10:# MongoDB administrative parameter to modify}
    param_type: ${11:# Define the type of parameter value}
    replica_set: ${12:# Replica set to connect to (automatically connects to primary for writes)}
    ssl: ${13:# Whether to use an SSL connection when connecting to the database}
    ssl_ca_certs: ${14:# The ssl_ca_certs option takes a path to a CA file}
    ssl_cert_reqs: ${15:# Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided}
    ssl_certfile: ${16:# Present a client certificate using the ssl_certfile option}
    ssl_crlfile: ${17:# The ssl_crlfile option takes a path to a CRL file}
    ssl_keyfile: ${18:# Private key for the client certificate}
    ssl_pem_passphrase: ${19:# Passphrase to decrypt encrypted private keys}
    strict_compatibility: ${20:# Enforce strict requirements for pymongo and MongoDB software versions}
    value: ${21:# MongoDB administrative parameter value to set}
  tags:
    - community
    - mongodb
    - mongodb_parameter]]></content>
  <tabTrigger>community.mongodb.mongodb_parameter</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Change an administrative parameter on a MongoDB server</description>
</snippet>