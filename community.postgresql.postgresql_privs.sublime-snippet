<snippet>
  <content><![CDATA[- name: ${1:Grant or revoke privileges on PostgreSQL database objects}
  community.postgresql.postgresql_privs:
    ca_cert: ${2:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${3:# Any additional parameters to be passed to libpg}
    database: ${4:# Name of database to connect to}
    fail_on_role: ${5:# If C(true), fail when target role (for whom privs need to be granted) does not exist}
    grant_option: ${6:# Whether C(role) may grant/revoke the specified privileges/group memberships to others}
    login_host: ${7:# Host running the database}
    login_password: ${8:# The password this module should use to establish its PostgreSQL session}
    login_unix_socket: ${9:# Path to a Unix domain socket for local connections}
    login_user: ${10:# The username this module should use to establish its PostgreSQL session}
    objs: ${11:# Comma separated list of database objects to set privileges on}
    password: ${12:# The password to authenticate with}
    port: ${13:# Database port to connect to}
    privs: ${14:# Comma separated list of privileges to grant/revoke}
    roles: ${15:# Comma separated list of role (user/group) names to set permissions for}
    schema: ${16:# Schema that contains the database objects specified via I(objs)}
    session_role: ${17:# Switch to session_role after connecting}
    ssl_cert: ${18:# Specifies the file name of the client SSL certificate}
    ssl_key: ${19:# Specifies the location for the secret key used for the client certificate}
    ssl_mode: ${20:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    state: ${21:# If C(present), the specified privileges are granted, if C(absent) they are revoked}
    target_roles: ${22:# A list of existing role (user/group) names to set as the default permissions for database objects subsequently created by them}
    trust_input: ${23:# If C(false), check whether values of parameters I(roles), I(target_roles), I(session_role), I(schema) are potentially dangerous}
    type: ${24:# Type of database object to set privileges on}
  tags:
    - community
    - postgresql
    - postgresql_privs]]></content>
  <tabTrigger>community.postgresql.postgresql_privs</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Grant or revoke privileges on PostgreSQL database objects</description>
</snippet>