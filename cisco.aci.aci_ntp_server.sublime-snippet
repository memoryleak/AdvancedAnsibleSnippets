<snippet>
  <content><![CDATA[- name: ${1:Manage NTP servers}
  cisco.aci.aci_ntp_server:
    ntp_policy: ${2:# Name of an existing NTP policy}
    ntp_server: ${3:# Name of the NTP server}
    description: ${4:# Description of the NTP server}
    min_poll: ${5:# Minimum polling interval}
    max_poll: ${6:# Maximum polling interval}
    preferred: ${7:# Is this the preferred NTP server}
    epg_type: ${8:# Type of management EPG to use to reach the NTP server, inb or oob}
    epg_name: ${9:# Name of the management EPG to reach the NTP server}
    state: ${10:# Use C(present) or C(absent) for adding or removing}
    host: ${11:# IP Address or hostname of APIC resolvable by Ansible control host}
    port: ${12:# Port number to be used for REST connection}
    username: ${13:# The username to use for authentication}
    password: ${14:# The password to use for authentication}
    private_key: ${15:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    certificate_name: ${16:# The X}
    output_level: ${17:# Influence the output of this ACI module}
    timeout: ${18:# The socket level timeout in seconds}
    use_proxy: ${19:# If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${20:# If C(no), an HTTP connection will be used instead of the default HTTPS connection}
    validate_certs: ${21:# If C(no), SSL certificates will not be validated}
    output_path: ${22:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
  tags:
    - cisco
    - aci
    - aci_ntp_server]]></content>
  <tabTrigger>cisco.aci.aci_ntp_server</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage NTP servers</description>
</snippet>