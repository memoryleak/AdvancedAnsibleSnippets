<snippet>
  <content><![CDATA[- name: ${1:Creates, updates or destroys an Amazon ELB}
  amazon.aws.elb_classic_lb:
    state: ${2:# Create or destroy the ELB}
    name: ${3:# The name of the ELB}
    listeners: ${4:# List of ports/protocols for this ELB to listen on (see examples)}
    purge_listeners: ${5:# Purge existing listeners on ELB that are not found in listeners}
    instance_ids: ${6:# List of instance ids to attach to this ELB}
    purge_instance_ids: ${7:# Purge existing instance ids on ELB that are not found in I(instance_ids)}
    zones: ${8:# List of availability zones to enable on this ELB}
    purge_zones: ${9:# Purge existing availability zones on ELB that are not found in I(zones)}
    security_group_ids: ${10:# A list of security groups to apply to the ELB}
    security_group_names: ${11:# A list of security group names to apply to the ELB}
    health_check: ${12:# A dictionary of health check configuration settings (see examples)}
    access_logs: ${13:# A dictionary of access logs configuration settings (see examples)}
    subnets: ${14:# A list of VPC subnets to use when creating the ELB}
    purge_subnets: ${15:# Purge existing subnets on the ELB that are not found in I(subnets)}
    scheme: ${16:# The scheme to use when creating the ELB}
    connection_draining_timeout: ${17:# Wait a specified timeout allowing connections to drain before terminating an instance}
    idle_timeout: ${18:# ELB connections from clients and to servers are timed out after this amount of time}
    cross_az_load_balancing: ${19:# Distribute load across all configured Availability Zones}
    stickiness: ${20:# A dictionary of stickiness policy settings}
    wait: ${21:# When creating, deleting, or adding instances to an ELB, if I(wait=true) Ansible will wait for both the load balancer and related network interfaces to finish creating/deleting}
    wait_timeout: ${22:# Used in conjunction with wait}
    access_key: ${23:# AWS access key ID}
    secret_key: ${24:# AWS secret access key}
    session_token: ${25:# AWS STS session token for use with temporary credentials}
    profile: ${26:# A named AWS profile to use for authentication}
    endpoint_url: ${27:# URL to connect to instead of the default AWS endpoints}
    aws_ca_bundle: ${28:# The location of a CA Bundle to use when validating SSL certificates}
    validate_certs: ${29:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    aws_config: ${30:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${31:# Use a C(botocore}
    region: ${32:# The AWS region to use}
    tags: ${33:# A dictionary representing the tags to be applied to the resource}
    purge_tags: ${34:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
  tags:
    - amazon
    - aws
    - elb_classic_lb]]></content>
  <tabTrigger>amazon.aws.elb_classic_lb</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates, updates or destroys an Amazon ELB</description>
</snippet>