<snippet>
  <content><![CDATA[- name: ${1:Issue Nitro API requests to a Netscaler instance}
  community.network.netscaler_nitro_request:
    nsip: ${2:# The IP address of the Netscaler or MAS instance where the Nitro API calls will be made}
    nitro_user: ${3:# The username with which to authenticate to the Netscaler node}
    nitro_pass: ${4:# The password with which to authenticate to the Netscaler node}
    nitro_protocol: ${5:# Which protocol to use when accessing the Nitro API objects}
    validate_certs: ${6:# If C(no), SSL certificates will not be validated}
    nitro_auth_token: ${7:# The authentication token provided by the C(mas_login) operation}
    resource: ${8:# The type of resource we are operating on}
    name: ${9:# The name of the resource we are operating on}
    attributes: ${10:# The attributes of the Nitro object we are operating on}
    args: ${11:# A dictionary which defines the key arguments by which we will select the Nitro object to operate on}
    filter: ${12:# A dictionary which defines the filter with which to refine the Nitro objects returned by the C(get_filtered) I(operation)}
    operation: ${13:# Define the Nitro operation that we want to perform}
    expected_nitro_errorcode: ${14:# A list of numeric values that signify that the operation was successful}
    action: ${15:# The action to perform when the I(operation) value is set to C(action)}
    instance_ip: ${16:# The IP address of the target Netscaler instance when issuing a Nitro request through a MAS proxy}
    instance_name: ${17:# The name of the target Netscaler instance when issuing a Nitro request through a MAS proxy}
    instance_id: ${18:# The id of the target Netscaler instance when issuing a Nitro request through a MAS proxy}
  tags:
    - community
    - network
    - netscaler_nitro_request]]></content>
  <tabTrigger>community.network.netscaler_nitro_request</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Issue Nitro API requests to a Netscaler instance</description>
</snippet>