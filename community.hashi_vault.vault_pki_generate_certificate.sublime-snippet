<snippet>
  <content><![CDATA[- name: ${1:Generates a new set of credentials (private key and certificate) using HashiCorp Vault PKI}
  community.hashi_vault.vault_pki_generate_certificate:
    alt_names: ${2:# Specifies requested Subject Alternative Names}
    auth_method: ${3:# Authentication method to be used}
    aws_access_key: ${4:# The AWS access key to use}
    aws_iam_server_id: ${5:# If specified, sets the value to use for the C(X-Vault-AWS-IAM-Server-ID) header as part of C(GetCallerIdentity) request}
    aws_profile: ${6:# The AWS profile}
    aws_secret_key: ${7:# The AWS secret key that corresponds to the access key}
    aws_security_token: ${8:# The AWS security token if using temporary access and secret keys}
    azure_client_id: ${9:# The client ID (also known as application ID) of the Azure AD service principal or managed identity}
    azure_client_secret: ${10:# The client secret of the Azure AD service principal}
    azure_resource: ${11:# The resource URL for the application registered in Azure Active Directory}
    azure_tenant_id: ${12:# The Azure Active Directory Tenant ID (also known as the Directory ID) of the service principal}
    ca_cert: ${13:# Path to certificate to use for authentication}
    cert_auth_private_key: ${14:# For C(cert) auth, path to the private key file to authenticate with, in PEM format}
    cert_auth_public_key: ${15:# For C(cert) auth, path to the certificate file to authenticate with, in PEM format}
    common_name: ${16:# Specifies the requested CN for the certificate}
    engine_mount_point: ${17:# Specify the mount point used by the PKI engine}
    exclude_cn_from_sans: ${18:# If true, the given I(common_name) will not be included in DNS or Email Subject Alternate Names (as appropriate)}
    format: ${19:# Specifies the format for returned data}
    ip_sans: ${20:# Specifies requested IP Subject Alternative Names}
    jwt: ${21:# The JSON Web Token (JWT) to use for JWT authentication to Vault}
    mount_point: ${22:# Vault mount point}
    namespace: ${23:# Vault namespace where secrets reside}
    other_sans: ${24:# Specifies custom OID/UTF8-string SANs}
    password: ${25:# Authentication password}
    private_key_format: ${26:# Specifies the format for marshaling the private key}
    proxies: ${27:# URL(s) to the proxies used to access the Vault service}
    region: ${28:# The AWS region for which to create the connection}
    retries: ${29:# Allows for retrying on errors, based on the L(Retry class in the urllib3 library,https://urllib3}
    retry_action: ${30:# Controls whether and how to show messages on I(retries)}
    role_id: ${31:# Vault Role ID or name}
    role_name: ${32:# Specifies the name of the role to create the certificate against}
    secret_id: ${33:# Secret ID to be used for Vault AppRole authentication}
    timeout: ${34:# Sets the connection timeout in seconds}
    token: ${35:# Vault token}
    token_file: ${36:# If no token is specified, will try to read the token from this file in I(token_path)}
    token_path: ${37:# If no token is specified, will try to read the I(token_file) from this path}
    token_validate: ${38:# For token auth, will perform a C(lookup-self) operation to determine the token's validity before using it}
    ttl: ${39:# Specifies requested Time To Live}
    uri_sans: ${40:# Specifies the requested URI Subject Alternative Names}
    url: ${41:# URL to the Vault service}
    username: ${42:# Authentication user name}
    validate_certs: ${43:# Controls verification and validation of SSL certificates, mostly you only want to turn off with self signed ones}
  tags:
    - community
    - hashi_vault
    - vault_pki_generate_certificate]]></content>
  <tabTrigger>community.hashi_vault.vault_pki_generate_certificate</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generates a new set of credentials (private key and certificate) using HashiCorp Vault PKI</description>
</snippet>