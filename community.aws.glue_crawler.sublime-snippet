<snippet>
  <content><![CDATA[- name: ${1:Manage an AWS Glue crawler}
  community.aws.glue_crawler:
    database_name: ${2:# The name of the database where results are written}
    description: ${3:# Description of the crawler being defined}
    name: ${4:# The name you assign to this crawler definition}
    recrawl_policy: ${5:# A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run}
    role: ${6:# The name or ARN of the IAM role associated with this crawler}
    schema_change_policy: ${7:# The policy for the crawler's update and deletion behavior}
    state: ${8:# Create or delete the AWS Glue crawler}
    table_prefix: ${9:# The table prefix used for catalog tables that are created}
    targets: ${10:# A list of targets to crawl}
    access_key: ${11:# AWS access key ID}
    secret_key: ${12:# AWS secret access key}
    session_token: ${13:# AWS STS session token for use with temporary credentials}
    profile: ${14:# A named AWS profile to use for authentication}
    endpoint_url: ${15:# URL to connect to instead of the default AWS endpoints}
    aws_ca_bundle: ${16:# The location of a CA Bundle to use when validating SSL certificates}
    validate_certs: ${17:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    aws_config: ${18:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${19:# Use a C(botocore}
    region: ${20:# The AWS region to use}
    tags: ${21:# A dictionary representing the tags to be applied to the resource}
    purge_tags: ${22:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
  tags:
    - community
    - aws
    - glue_crawler]]></content>
  <tabTrigger>community.aws.glue_crawler</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage an AWS Glue crawler</description>
</snippet>