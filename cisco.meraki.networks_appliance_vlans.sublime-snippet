<snippet>
  <content><![CDATA[- name: ${1:Resource module for networks _appliance _vlans}
  cisco.meraki.networks_appliance_vlans:
    applianceIp: ${2:# The local IP of the appliance on the VLAN}
    cidr: ${3:# CIDR of the pool of subnets}
    dhcpBootFilename: ${4:# DHCP boot option for boot filename}
    dhcpBootNextServer: ${5:# DHCP boot option to direct boot clients to the server to load the boot file from}
    dhcpBootOptionsEnabled: ${6:# Use DHCP boot options specified in other properties}
    dhcpHandling: ${7:# The appliance's handling of DHCP requests on this VLAN}
    dhcpLeaseTime: ${8:# The term of DHCP leases if the appliance is running a DHCP server on this VLAN}
    dhcpOptions: ${9:# The list of DHCP options that will be included in DHCP responses}
    dhcpRelayServerIps: ${10:# The IPs of the DHCP servers that DHCP requests should be relayed to}
    dnsNameservers: ${11:# The DNS nameservers used for DHCP responses, either 'upstream_dns', 'google_dns', 'opendns', or a newline seperated string of IP addresses or domain names}
    fixedIpAssignments: ${12:# The DHCP fixed IP assignments on the VLAN}
    groupPolicyId: ${13:# The id of the desired group policy to apply to the VLAN}
    id: ${14:# The VLAN ID of the new VLAN (must be between 1 and 4094)}
    ipv6: ${15:# IPv6 configuration on the VLAN}
    mandatoryDhcp: ${16:# Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server}
    mask: ${17:# Mask used for the subnet of all bound to the template networks}
    meraki_action_batch_retry_wait_time: ${18:# meraki_action_batch_retry_wait_time (integer), action batch concurrency error retry wait time}
    meraki_api_key: ${19:# meraki_api_key (string), API key generated in dashboard; can also be set as an environment variable MERAKI_DASHBOARD_API_KEY}
    meraki_base_url: ${20:# meraki_base_url (string), preceding all endpoint resources}
    meraki_be_geo_id: ${21:# meraki_be_geo_id (string), optional partner identifier for API usage tracking; can also be set as an environment variable BE_GEO_ID}
    meraki_caller: ${22:# meraki_caller (string), optional identifier for API usage tracking; can also be set as an environment variable MERAKI_PYTHON_SDK_CALLER}
    meraki_certificate_path: ${23:# meraki_certificate_path (string), path for TLS/SSL certificate verification if behind local proxy}
    meraki_inherit_logging_config: ${24:# meraki_inherit_logging_config (boolean), Inherits your own logger instance}
    meraki_log_file_prefix: ${25:# meraki_log_file_prefix (string), log file name appended with date and timestamp}
    meraki_log_path: ${26:# log_path (string), path to output log; by default, working directory of script if not specified}
    meraki_maximum_retries: ${27:# meraki_maximum_retries (integer), retry up to this many times when encountering 429s or other server-side errors}
    meraki_nginx_429_retry_wait_time: ${28:# meraki_nginx_429_retry_wait_time (integer), Nginx 429 retry wait time}
    meraki_output_log: ${29:# meraki_output_log (boolean), create an output log file?}
    meraki_print_console: ${30:# meraki_print_console (boolean), print logging output to console?}
    meraki_requests_proxy: ${31:# meraki_requests_proxy (string), proxy server and port, if needed, for HTTPS}
    meraki_retry_4xx_error: ${32:# meraki_retry_4xx_error (boolean), retry if encountering other 4XX error (besides 429)?}
    meraki_retry_4xx_error_wait_time: ${33:# meraki_retry_4xx_error_wait_time (integer), other 4XX error retry wait time}
    meraki_simulate: ${34:# meraki_simulate (boolean), simulate POST/PUT/DELETE calls to prevent changes?}
    meraki_single_request_timeout: ${35:# meraki_single_request_timeout (integer), maximum number of seconds for each API call}
    meraki_suppress_logging: ${36:# meraki_suppress_logging (boolean), disable all logging? you're on your own then!}
    meraki_use_iterator_for_get_pages: ${37:# meraki_use_iterator_for_get_pages (boolean), list* methods will return an iterator with each object instead of a complete list with all items}
    meraki_wait_on_rate_limit: ${38:# meraki_wait_on_rate_limit (boolean), retry if 429 rate limit error encountered?}
    name: ${39:# The name of the new VLAN}
    networkId: ${40:# NetworkId path parameter}
    reservedIpRanges: ${41:# The DHCP reserved IP ranges on the VLAN}
    subnet: ${42:# The subnet of the VLAN}
    templateVlanType: ${43:# Type of subnetting of the VLAN}
    vlanId: ${44:# VlanId path parameter}
    vpnNatSubnet: ${45:# The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN}
  tags:
    - cisco
    - meraki
    - networks_appliance_vlans]]></content>
  <tabTrigger>cisco.meraki.networks_appliance_vlans</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Resource module for networks _appliance _vlans</description>
</snippet>