<snippet>
  <content><![CDATA[- name: ${1:Add or remove replication slots from a PostgreSQL database}
  community.postgresql.postgresql_slot:
    ca_cert: ${2:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${3:# Any additional parameters to be passed to libpg}
    db: ${4:# Name of database to connect to}
    immediately_reserve: ${5:# Optional parameter that when C(true) specifies that the LSN for this replication slot be reserved immediately, otherwise the default, C(false), specifies that the LSN is reserved on the first connection from a streaming replication client}
    login_host: ${6:# Host running the database}
    login_password: ${7:# The password this module should use to establish its PostgreSQL session}
    login_unix_socket: ${8:# Path to a Unix domain socket for local connections}
    login_user: ${9:# The username this module should use to establish its PostgreSQL session}
    name: ${10:# Name of the replication slot to add or remove}
    output_plugin: ${11:# All logical slots must indicate which output plugin decoder they're using}
    port: ${12:# Database port to connect to}
    session_role: ${13:# Switch to session_role after connecting}
    slot_type: ${14:# Slot type}
    ssl_cert: ${15:# Specifies the file name of the client SSL certificate}
    ssl_key: ${16:# Specifies the location for the secret key used for the client certificate}
    ssl_mode: ${17:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    state: ${18:# The slot state}
    trust_input: ${19:# If C(false), check the value of I(session_role) is potentially dangerous}
  tags:
    - community
    - postgresql
    - postgresql_slot]]></content>
  <tabTrigger>community.postgresql.postgresql_slot</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Add or remove replication slots from a PostgreSQL database</description>
</snippet>