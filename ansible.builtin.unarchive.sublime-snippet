<snippet>
  <content><![CDATA[- name: ${1:Unpacks an archive after (optionally) copying it from the local machine}
  ansible.builtin.unarchive:
    attributes: ${2:# The attributes the resulting filesystem object should have}
    copy: ${3:# If true, the file is copied from local controller to the managed (remote) node, otherwise, the plugin will look for src archive on the managed machine}
    creates: ${4:# If the specified absolute path (file or directory) already exists, this step will B(not) be run}
    decrypt: ${5:# This option controls the auto-decryption of source files using vault}
    dest: ${6:# Remote absolute path where the archive should be unpacked}
    exclude: ${7:# List the directory and file entries that you would like to exclude from the unarchive action}
    extra_opts: ${8:# Specify additional options by passing in an array}
    group: ${9:# Name of the group that should own the filesystem object, as would be fed to C(chown)}
    include: ${10:# List of directory and file entries that you would like to extract from the archive}
    io_buffer_size: ${11:# Size of the volatile memory buffer that is used for extracting files from the archive in bytes}
    keep_newer: ${12:# Do not replace existing files that are newer than files from the archive}
    list_files: ${13:# If set to True, return the list of files that are contained in the tarball}
    mode: ${14:# The permissions the resulting filesystem object should have}
    owner: ${15:# Name of the user that should own the filesystem object, as would be fed to C(chown)}
    remote_src: ${16:# Set to V(true) to indicate the archived file is already on the remote system and not local to the Ansible controller}
    selevel: ${17:# The level part of the SELinux filesystem object context}
    serole: ${18:# The role part of the SELinux filesystem object context}
    setype: ${19:# The type part of the SELinux filesystem object context}
    seuser: ${20:# The user part of the SELinux filesystem object context}
    src: ${21:# If O(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative}
    unsafe_writes: ${22:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
    validate_certs: ${23:# This only applies if using a https URL as the source of the file}
  tags:
    - unarchive]]></content>
  <tabTrigger>ansible.builtin.unarchive</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Unpacks an archive after (optionally) copying it from the local machine</description>
</snippet>