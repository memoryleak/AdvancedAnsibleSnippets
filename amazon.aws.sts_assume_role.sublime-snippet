<snippet>
  <content><![CDATA[- name: ${1:Assume a role using AWS Security Token Service and obtain temporary credentials}
  amazon.aws.sts_assume_role:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    duration_seconds: ${6:# The duration, in seconds, of the role session}
    endpoint_url: ${7:# URL to connect to instead of the default AWS endpoints}
    external_id: ${8:# A unique identifier that is used by third parties to assume a role in their customers' accounts}
    mfa_serial_number: ${9:# The identification number of the MFA device that is associated with the user who is making the AssumeRole call}
    mfa_token: ${10:# The value provided by the MFA device, if the trust policy of the role being assumed requires MFA}
    policy: ${11:# Supplemental policy to use in addition to assumed role's policies}
    profile: ${12:# A named AWS profile to use for authentication}
    region: ${13:# The AWS region to use}
    role_arn: ${14:# The Amazon Resource Name (ARN) of the role that the caller is assuming U(https://docs}
    role_session_name: ${15:# Name of the role's session - will be used by CloudTrail}
    secret_key: ${16:# AWS secret access key}
    session_token: ${17:# AWS STS session token for use with temporary credentials}
    validate_certs: ${18:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - amazon
    - aws
    - sts_assume_role]]></content>
  <tabTrigger>amazon.aws.sts_assume_role</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Assume a role using AWS Security Token Service and obtain temporary credentials</description>
</snippet>