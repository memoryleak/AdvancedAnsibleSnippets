<snippet>
  <content><![CDATA[- name: ${1:Manage content switching vserver}
  community.network.netscaler_cs_vserver:
    appflowlog: ${2:# Enable logging appflow flow information}
    authentication: ${3:# Authenticate users who request a connection to the content switching virtual server}
    authenticationhost: ${4:# FQDN of the authentication virtual server}
    authn401: ${5:# Enable HTTP 401-response based authentication}
    authnprofile: ${6:# Name of the authentication profile to be used when authentication is turned on}
    authnvsname: ${7:# Name of authentication virtual server that authenticates the incoming user requests to this content switching virtual server}
    backupip: ${8:# }
    backupvserver: ${9:# Name of the backup virtual server that you are configuring}
    cacheable: ${10:# Use this option to specify whether a virtual server, used for load balancing or content switching, routes requests to the cache redirection virtual server before sending it to the configured servers}
    casesensitive: ${11:# Consider case in URLs (for policies that use URLs instead of RULES)}
    clttimeout: ${12:# Idle time, in seconds, after which the client connection is terminated}
    comment: ${13:# Information about this virtual server}
    cookiedomain: ${14:# }
    cookietimeout: ${15:# }
    dbprofilename: ${16:# Name of the DB profile}
    disabled: ${17:# When set to C(yes) the cs vserver will be disabled}
    disableprimaryondown: ${18:# Continue forwarding the traffic to backup virtual server even after the primary server comes UP from the DOWN state}
    dnsprofilename: ${19:# Name of the DNS profile to be associated with the VServer}
    domainname: ${20:# Domain name for which to change the time to live (TTL) and/or backup service IP address}
    downstateflush: ${21:# Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN}
    httpprofilename: ${22:# Name of the HTTP profile containing HTTP configuration settings for the virtual server}
    icmpvsrresponse: ${23:# Can be active or passive}
    insertvserveripport: ${24:# Insert the virtual server's VIP address and port number in the request header}
    ipmask: ${25:# IP mask, in dotted decimal notation, for the IP Pattern parameter}
    ippattern: ${26:# IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server}
    ipv46: ${27:# IP address of the content switching virtual server}
    l2conn: ${28:# Use L2 Parameters to identify a connection}
    lbvserver: ${29:# The default Load Balancing virtual server}
    listenpolicy: ${30:# String specifying the listen policy for the content switching virtual server}
    mssqlserverversion: ${31:# The version of the MSSQL server}
    mysqlcharacterset: ${32:# The character set returned by the mysql vserver}
    mysqlprotocolversion: ${33:# The protocol version returned by the mysql vserver}
    mysqlservercapabilities: ${34:# The server capabilities returned by the mysql vserver}
    mysqlserverversion: ${35:# The server version string returned by the mysql vserver}
    name: ${36:# Name for the content switching virtual server}
    netprofile: ${37:# The name of the network profile}
    nitro_pass: ${38:# The password with which to authenticate to the netscaler node}
    nitro_protocol: ${39:# Which protocol to use when accessing the nitro API objects}
    nitro_timeout: ${40:# Time in seconds until a timeout error is thrown when establishing a new session with Netscaler}
    nitro_user: ${41:# The username with which to authenticate to the netscaler node}
    nsip: ${42:# The ip address of the netscaler appliance where the nitro API calls will be made}
    oracleserverversion: ${43:# Oracle server version}
    port: ${44:# Port number for content switching virtual server}
    precedence: ${45:# Type of precedence to use for both RULE-based and URL-based policies on the content switching virtual server}
    push: ${46:# Process traffic with the push virtual server that is bound to this content switching virtual server (specified by the Push VServer parameter)}
    pushlabel: ${47:# Expression for extracting the label from the response received from server}
    pushmulticlients: ${48:# Allow multiple Web 2}
    pushvserver: ${49:# Name of the load balancing virtual server, of type C(PUSH) or C(SSL_PUSH), to which the server pushes updates received on the client-facing load balancing virtual server}
    range: ${50:# Number of consecutive IP addresses, starting with the address specified by the IP Address parameter, to include in a range of addresses assigned to this virtual server}
    redirectportrewrite: ${51:# State of port rewrite while performing HTTP redirect}
    redirecturl: ${52:# URL to which traffic is redirected if the virtual server becomes unavailable}
    rhistate: ${53:# A host route is injected according to the setting on the virtual servers}
    rtspnat: ${54:# Enable network address translation (NAT) for real-time streaming protocol (RTSP) connections}
    save_config: ${55:# If C(yes) the module will save the configuration on the netscaler node if it makes any changes}
    servicetype: ${56:# Protocol used by the virtual server}
    sitedomainttl: ${57:# }
    sobackupaction: ${58:# Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists}
    somethod: ${59:# Type of spillover used to divert traffic to the backup virtual server when the primary virtual server reaches the spillover threshold}
    sopersistence: ${60:# Maintain source-IP based persistence on primary and backup virtual servers}
    sopersistencetimeout: ${61:# Time-out value, in minutes, for spillover persistence}
    sothreshold: ${62:# Depending on the spillover method, the maximum number of connections or the maximum total bandwidth (Kbps) that a virtual server can handle before spillover occurs}
    ssl_certkey: ${63:# The name of the ssl certificate that is bound to this service}
    state: ${64:# The state of the resource being configured by the module on the netscaler node}
    stateupdate: ${65:# Enable state updates for a specific content switching virtual server}
    targettype: ${66:# Virtual server target type}
    tcpprofilename: ${67:# Name of the TCP profile containing TCP configuration settings for the virtual server}
    td: ${68:# Integer value that uniquely identifies the traffic domain in which you want to configure the entity}
    ttl: ${69:# }
    validate_certs: ${70:# If C(no), SSL certificates will not be validated}
    vipheader: ${71:# Name of virtual server IP and port header, for use with the VServer IP Port Insertion parameter}
  tags:
    - community
    - network
    - netscaler_cs_vserver]]></content>
  <tabTrigger>community.network.netscaler_cs_vserver</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage content switching vserver</description>
</snippet>