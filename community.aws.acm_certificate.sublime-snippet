<snippet>
  <content><![CDATA[- name: ${1:Upload and delete certificates in the AWS Certificate Manager service}
  community.aws.acm_certificate:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    certificate: ${5:# The body of the PEM encoded public certificate}
    certificate_arn: ${6:# The ARN of a certificate in ACM to modify or delete}
    certificate_chain: ${7:# The body of the PEM encoded chain for your certificate}
    debug_botocore_endpoint_logs: ${8:# Use a C(botocore}
    domain_name: ${9:# The domain name of the certificate}
    endpoint_url: ${10:# URL to connect to instead of the default AWS endpoints}
    name_tag: ${11:# The unique identifier for tagging resources using AWS tags, with key I(Name)}
    private_key: ${12:# The body of the PEM encoded private key}
    profile: ${13:# A named AWS profile to use for authentication}
    purge_tags: ${14:# If O(purge_tags=true) and O(tags) is set, existing tags will be purged from the resource to match exactly what is defined by O(tags) parameter}
    region: ${15:# The AWS region to use}
    secret_key: ${16:# AWS secret access key}
    session_token: ${17:# AWS STS session token for use with temporary credentials}
    state: ${18:# If I(state=present), the specified public certificate and private key will be uploaded, with I(Name) tag equal to I(name_tag)}
    tags: ${19:# A dictionary representing the tags to be applied to the resource}
    validate_certs: ${20:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - community
    - aws
    - acm_certificate]]></content>
  <tabTrigger>community.aws.acm_certificate</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Upload and delete certificates in the AWS Certificate Manager service</description>
</snippet>