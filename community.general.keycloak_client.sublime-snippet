<snippet>
  <content><![CDATA[- name: ${1:Allows administration of Keycloak clients via Keycloak API}
  community.general.keycloak_client:
    admin_url: ${2:# URL to the admin interface of the client}
    always_display_in_console: ${3:# Whether or not to display this client in account console, even if the user does not have an active session}
    attributes: ${4:# A dict of further attributes for this client}
    auth_client_id: ${5:# OpenID Connect C(client_id) to authenticate to the API with}
    auth_client_secret: ${6:# Client Secret to use in conjunction with O(auth_client_id) (if required)}
    auth_keycloak_url: ${7:# URL to the Keycloak instance}
    auth_password: ${8:# Password to authenticate for API access with}
    auth_realm: ${9:# Keycloak realm name to authenticate to for API access}
    auth_username: ${10:# Username to authenticate for API access with}
    authentication_flow_binding_overrides: ${11:# Override realm authentication flow bindings}
    authorization_services_enabled: ${12:# Are authorization services enabled for this client or not (OpenID connect)}
    authorization_settings: ${13:# a data structure defining the authorization settings for this client}
    base_url: ${14:# Default URL to use when the auth server needs to redirect or link back to the client This is 'baseUrl' in the Keycloak REST API}
    bearer_only: ${15:# The access type of this client is bearer-only}
    client_authenticator_type: ${16:# How do clients authenticate with the auth server? Either V(client-secret) or V(client-jwt) can be chosen}
    client_id: ${17:# Client id of client to be worked on}
    client_template: ${18:# Client template to use for this client}
    connection_timeout: ${19:# Controls the HTTP connections timeout period (in seconds) to Keycloak API}
    consent_required: ${20:# If enabled, users have to consent to client access}
    default_client_scopes: ${21:# List of default client scopes}
    default_roles: ${22:# list of default roles for this client}
    description: ${23:# Description of the client in Keycloak}
    direct_access_grants_enabled: ${24:# Are direct access grants enabled for this client or not (OpenID connect)}
    enabled: ${25:# Is this client enabled or not?}
    frontchannel_logout: ${26:# Is frontchannel logout enabled for this client or not}
    full_scope_allowed: ${27:# Is the 'Full Scope Allowed' feature set for this client or not}
    http_agent: ${28:# Configures the HTTP User-Agent header}
    id: ${29:# Id of client to be worked on}
    implicit_flow_enabled: ${30:# Enable implicit flow for this client or not (OpenID connect)}
    name: ${31:# Name of the client (this is not the same as O(client_id))}
    node_re_registration_timeout: ${32:# Cluster node re-registration timeout for this client}
    not_before: ${33:# Revoke any tokens issued before this date for this client (this is a UNIX timestamp)}
    optional_client_scopes: ${34:# List of optional client scopes}
    protocol: ${35:# Type of client}
    protocol_mappers: ${36:# a list of dicts defining protocol mappers for this client}
    public_client: ${37:# Is the access type for this client public or not}
    realm: ${38:# The realm to create the client in}
    redirect_uris: ${39:# Acceptable redirect URIs for this client}
    registered_nodes: ${40:# dict of registered cluster nodes (with C(nodename) as the key and last registration time as the value)}
    registration_access_token: ${41:# The registration access token provides access for clients to the client registration service}
    root_url: ${42:# Root URL appended to relative URLs for this client}
    secret: ${43:# When using O(client_authenticator_type=client-secret) (the default), you can specify a secret here (otherwise one will be generated if it does not exit)}
    service_accounts_enabled: ${44:# Are service accounts enabled for this client or not (OpenID connect)}
    standard_flow_enabled: ${45:# Enable standard flow for this client or not (OpenID connect)}
    state: ${46:# State of the client}
    surrogate_auth_required: ${47:# Whether or not surrogate auth is required}
    token: ${48:# Authentication token for Keycloak API}
    use_template_config: ${49:# Whether or not to use configuration from the O(client_template)}
    use_template_mappers: ${50:# Whether or not to use mapper configuration from the O(client_template)}
    use_template_scope: ${51:# Whether or not to use scope configuration from the O(client_template)}
    validate_certs: ${52:# Verify TLS certificates (do not disable this in production)}
    web_origins: ${53:# List of allowed CORS origins}
  tags:
    - community
    - general
    - keycloak_client]]></content>
  <tabTrigger>community.general.keycloak_client</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Allows administration of Keycloak clients via Keycloak API</description>
</snippet>