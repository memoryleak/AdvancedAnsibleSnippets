<snippet>
  <content><![CDATA[- name: ${1:Change a PostgreSQL server configuration parameter}
  community.postgresql.postgresql_set:
    ca_cert: ${2:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${3:# Any additional parameters to be passed to libpg}
    db: ${4:# Name of database to connect}
    login_host: ${5:# Host running the database}
    login_password: ${6:# The password this module should use to establish its PostgreSQL session}
    login_unix_socket: ${7:# Path to a Unix domain socket for local connections}
    login_user: ${8:# The username this module should use to establish its PostgreSQL session}
    name: ${9:# Name of PostgreSQL server parameter}
    port: ${10:# Database port to connect to}
    reset: ${11:# Restore parameter to initial state (boot_val)}
    session_role: ${12:# Switch to session_role after connecting}
    ssl_cert: ${13:# Specifies the file name of the client SSL certificate}
    ssl_key: ${14:# Specifies the location for the secret key used for the client certificate}
    ssl_mode: ${15:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    trust_input: ${16:# If C(false), check whether values of parameters are potentially dangerous}
    value: ${17:# Parameter value to set}
  tags:
    - community
    - postgresql
    - postgresql_set]]></content>
  <tabTrigger>community.postgresql.postgresql_set</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Change a PostgreSQL server configuration parameter</description>
</snippet>