<snippet>
  <content><![CDATA[- name: ${1:Manage an Application Load Balancer}
  amazon.aws.elb_application_lb:
    access_key: ${2:# AWS access key ID}
    access_logs_enabled: ${3:# Whether or not to enable access logs}
    access_logs_s3_bucket: ${4:# The name of the S3 bucket for the access logs}
    access_logs_s3_prefix: ${5:# The prefix for the log location in the S3 bucket}
    aws_ca_bundle: ${6:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${7:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${8:# Use a C(botocore}
    deletion_protection: ${9:# Indicates whether deletion protection for the ALB is enabled}
    endpoint_url: ${10:# URL to connect to instead of the default AWS endpoints}
    http2: ${11:# Indicates whether to enable HTTP2 routing}
    http_desync_mitigation_mode: ${12:# Determines how the load balancer handles requests that might pose a security risk to an application}
    http_drop_invalid_header_fields: ${13:# Indicates whether HTTP headers with invalid header fields are removed by the load balancer C(True) or routed to targets C(False)}
    http_x_amzn_tls_version_and_cipher_suite: ${14:# Indicates whether the two headers are added to the client request before sending it to the target}
    http_xff_client_port: ${15:# Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer}
    idle_timeout: ${16:# The number of seconds to wait before an idle connection is closed}
    ip_address_type: ${17:# Sets the type of IP addresses used by the subnets of the specified Application Load Balancer}
    listeners: ${18:# A list of dicts containing listeners to attach to the ALB}
    name: ${19:# The name of the load balancer}
    profile: ${20:# A named AWS profile to use for authentication}
    purge_listeners: ${21:# If C(true), existing listeners will be purged from the ALB to match exactly what is defined by I(listeners) parameter}
    purge_rules: ${22:# When set to C(no), keep the existing load balancer rules in place}
    purge_tags: ${23:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
    region: ${24:# The AWS region to use}
    scheme: ${25:# Internet-facing or internal load balancer}
    secret_key: ${26:# AWS secret access key}
    security_groups: ${27:# A list of the names or IDs of the security groups to assign to the load balancer}
    session_token: ${28:# AWS STS session token for use with temporary credentials}
    state: ${29:# Create or destroy the load balancer}
    subnets: ${30:# A list of the IDs of the subnets to attach to the load balancer}
    tags: ${31:# A dictionary representing the tags to be applied to the resource}
    validate_certs: ${32:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    waf_fail_open: ${33:# Indicates whether to allow a AWS WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF}
    wait: ${34:# Wait for the load balancer to have a state of 'active' before completing}
    wait_timeout: ${35:# The time in seconds to use in conjunction with I(wait)}
  tags:
    - amazon
    - aws
    - elb_application_lb]]></content>
  <tabTrigger>amazon.aws.elb_application_lb</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage an Application Load Balancer</description>
</snippet>