<snippet>
  <content><![CDATA[- name: ${1:Resource module for networks _wireless _ssids}
  cisco.meraki.networks_wireless_ssids:
    activeDirectory: ${2:# The current setting for Active Directory}
    adultContentFilteringEnabled: ${3:# Boolean indicating whether or not adult content will be blocked}
    apTagsAndVlanIds: ${4:# The list of tags and VLAN IDs used for VLAN tagging}
    authMode: ${5:# The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius', 'ipsk-without-radius' or 'ipsk-with-nac')}
    availabilityTags: ${6:# Accepts a list of tags for this SSID}
    availableOnAllAps: ${7:# Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags}
    bandSelection: ${8:# The client-serving radio frequencies of this SSID in the default indoor RF profile}
    concentratorNetworkId: ${9:# The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'}
    defaultVlanId: ${10:# The default VLAN ID used for 'all other APs'}
    disassociateClientsOnVpnFailover: ${11:# Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests}
    dnsRewrite: ${12:# DNS servers rewrite settings}
    dot11r: ${13:# The current setting for 802}
    dot11w: ${14:# The current setting for Protected Management Frames (802}
    enabled: ${15:# Whether or not the SSID is enabled}
    encryptionMode: ${16:# The psk encryption mode for the SSID ('wep' or 'wpa')}
    enterpriseAdminAccess: ${17:# Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')}
    gre: ${18:# Ethernet over GRE settings}
    ipAssignmentMode: ${19:# The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')}
    lanIsolationEnabled: ${20:# Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled}
    ldap: ${21:# The current setting for LDAP}
    localRadius: ${22:# The current setting for Local Authentication, a built-in RADIUS server on the access point}
    mandatoryDhcpEnabled: ${23:# If true, Mandatory DHCP will enforce that clients connecting to this SSID must use the IP address assigned by the DHCP server}
    meraki_action_batch_retry_wait_time: ${24:# meraki_action_batch_retry_wait_time (integer), action batch concurrency error retry wait time}
    meraki_api_key: ${25:# meraki_api_key (string), API key generated in dashboard; can also be set as an environment variable MERAKI_DASHBOARD_API_KEY}
    meraki_base_url: ${26:# meraki_base_url (string), preceding all endpoint resources}
    meraki_be_geo_id: ${27:# meraki_be_geo_id (string), optional partner identifier for API usage tracking; can also be set as an environment variable BE_GEO_ID}
    meraki_caller: ${28:# meraki_caller (string), optional identifier for API usage tracking; can also be set as an environment variable MERAKI_PYTHON_SDK_CALLER}
    meraki_certificate_path: ${29:# meraki_certificate_path (string), path for TLS/SSL certificate verification if behind local proxy}
    meraki_inherit_logging_config: ${30:# meraki_inherit_logging_config (boolean), Inherits your own logger instance}
    meraki_log_file_prefix: ${31:# meraki_log_file_prefix (string), log file name appended with date and timestamp}
    meraki_log_path: ${32:# log_path (string), path to output log; by default, working directory of script if not specified}
    meraki_maximum_retries: ${33:# meraki_maximum_retries (integer), retry up to this many times when encountering 429s or other server-side errors}
    meraki_nginx_429_retry_wait_time: ${34:# meraki_nginx_429_retry_wait_time (integer), Nginx 429 retry wait time}
    meraki_output_log: ${35:# meraki_output_log (boolean), create an output log file?}
    meraki_print_console: ${36:# meraki_print_console (boolean), print logging output to console?}
    meraki_requests_proxy: ${37:# meraki_requests_proxy (string), proxy server and port, if needed, for HTTPS}
    meraki_retry_4xx_error: ${38:# meraki_retry_4xx_error (boolean), retry if encountering other 4XX error (besides 429)?}
    meraki_retry_4xx_error_wait_time: ${39:# meraki_retry_4xx_error_wait_time (integer), other 4XX error retry wait time}
    meraki_simulate: ${40:# meraki_simulate (boolean), simulate POST/PUT/DELETE calls to prevent changes?}
    meraki_single_request_timeout: ${41:# meraki_single_request_timeout (integer), maximum number of seconds for each API call}
    meraki_suppress_logging: ${42:# meraki_suppress_logging (boolean), disable all logging? you're on your own then!}
    meraki_use_iterator_for_get_pages: ${43:# meraki_use_iterator_for_get_pages (boolean), list* methods will return an iterator with each object instead of a complete list with all items}
    meraki_wait_on_rate_limit: ${44:# meraki_wait_on_rate_limit (boolean), retry if 429 rate limit error encountered?}
    minBitrate: ${45:# The minimum bitrate in Mbps of this SSID in the default indoor RF profile}
    name: ${46:# The name of the SSID}
    namedVlans: ${47:# Named VLAN settings}
    networkId: ${48:# NetworkId path parameter}
    number: ${49:# Number path parameter}
    oauth: ${50:# The OAuth settings of this SSID}
    perClientBandwidthLimitDown: ${51:# The download bandwidth limit in Kbps}
    perClientBandwidthLimitUp: ${52:# The upload bandwidth limit in Kbps}
    perSsidBandwidthLimitDown: ${53:# The total download bandwidth limit in Kbps}
    perSsidBandwidthLimitUp: ${54:# The total upload bandwidth limit in Kbps}
    psk: ${55:# The passkey for the SSID}
    radiusAccountingEnabled: ${56:# Whether or not RADIUS accounting is enabled}
    radiusAccountingInterimInterval: ${57:# The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server}
    radiusAccountingServers: ${58:# The RADIUS accounting 802}
    radiusAttributeForGroupPolicies: ${59:# Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role')}
    radiusAuthenticationNasId: ${60:# The template of the NAS identifier to be used for RADIUS authentication (ex}
    radiusCalledStationId: ${61:# The template of the called station identifier to be used for RADIUS (ex}
    radiusCoaEnabled: ${62:# If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server}
    radiusFailoverPolicy: ${63:# This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')}
    radiusFallbackEnabled: ${64:# Whether or not higher priority RADIUS servers should be retried after 60 seconds}
    radiusGuestVlanEnabled: ${65:# Whether or not RADIUS Guest VLAN is enabled}
    radiusGuestVlanId: ${66:# VLAN ID of the RADIUS Guest VLAN}
    radiusLoadBalancingPolicy: ${67:# This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')}
    radiusOverride: ${68:# If true, the RADIUS response can override VLAN tag}
    radiusProxyEnabled: ${69:# If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers}
    radiusServerAttemptsLimit: ${70:# The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5)}
    radiusServerTimeout: ${71:# The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds)}
    radiusServers: ${72:# The RADIUS 802}
    radiusTestingEnabled: ${73:# If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki_8021x_test' to ensure that the RADIUS servers are reachable}
    secondaryConcentratorNetworkId: ${74:# The secondary concentrator to use when the ipAssignmentMode is 'VPN'}
    speedBurst: ${75:# The SpeedBurst setting for this SSID'}
    splashGuestSponsorDomains: ${76:# Array of valid sponsor email domains for sponsored guest splash type}
    splashPage: ${77:# The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain')}
    useVlanTagging: ${78:# Whether or not traffic should be directed to use specific VLANs}
    visible: ${79:# Boolean indicating whether APs should advertise or hide this SSID}
    vlanId: ${80:# The VLAN ID used for VLAN tagging}
    walledGardenEnabled: ${81:# Allow access to a configurable list of IP ranges, which users may access prior to sign-on}
    walledGardenRanges: ${82:# Specify your walled garden by entering an array of addresses, ranges using CIDR notation, domain names, and domain wildcards (e}
    wpaEncryptionMode: ${83:# The types of WPA encryption}
  tags:
    - cisco
    - meraki
    - networks_wireless_ssids]]></content>
  <tabTrigger>cisco.meraki.networks_wireless_ssids</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Resource module for networks _wireless _ssids</description>
</snippet>