<snippet>
  <content><![CDATA[- name: ${1:Return supported guest ID list and VM recommended config option for specific guest OS}
  community.vmware.vmware_vm_config_option:
    datacenter: ${2:# The datacenter name used to get specified cluster or host}
    cluster_name: ${3:# Name of the cluster}
    esxi_hostname: ${4:# ESXi hostname}
    get_hardware_versions: ${5:# Return the list of VM hardware versions supported for creation and the default hardware version on the specified entity}
    get_guest_os_ids: ${6:# Return the list of guest OS IDs supported on the specified entity}
    get_config_options: ${7:# Return the dict of VM recommended config options for guest ID specified by C(guest_id) with hardware version specified by C(hardware_version) or the default hardware version}
    guest_id: ${8:# The guest OS ID from the returned list when C(get_guest_os_ids) is set to C(True), e}
    hardware_version: ${9:# The hardware version from the returned list when C(get_hardware_versions) is set to C(True), e}
    hostname: ${10:# The hostname or IP address of the vSphere vCenter or ESXi server}
    username: ${11:# The username of the vSphere vCenter or ESXi server}
    password: ${12:# The password of the vSphere vCenter or ESXi server}
    validate_certs: ${13:# Allows connection when SSL certificates are not valid}
    port: ${14:# The port number of the vSphere vCenter or ESXi server}
    proxy_host: ${15:# Address of a proxy that will receive all HTTPS requests and relay them}
    proxy_port: ${16:# Port of the HTTP proxy that will receive all HTTPS requests and relay them}
  tags:
    - community
    - vmware
    - vmware_vm_config_option]]></content>
  <tabTrigger>community.vmware.vmware_vm_config_option</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Return supported guest ID list and VM recommended config option for specific guest OS</description>
</snippet>