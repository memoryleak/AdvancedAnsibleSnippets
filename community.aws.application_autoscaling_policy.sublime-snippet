<snippet>
  <content><![CDATA[- name: ${1:Manage Application Auto Scaling Scaling Policies}
  community.aws.application_autoscaling_policy:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    endpoint_url: ${6:# URL to connect to instead of the default AWS endpoints}
    maximum_tasks: ${7:# The maximum value to scale to in response to a scale out event}
    minimum_tasks: ${8:# The minimum value to scale to in response to a scale in event}
    override_task_capacity: ${9:# Whether or not to override values of minimum and/or maximum tasks if it's already set}
    policy_name: ${10:# The name of the scaling policy}
    policy_type: ${11:# The policy type}
    profile: ${12:# A named AWS profile to use for authentication}
    region: ${13:# The AWS region to use}
    resource_id: ${14:# The identifier of the resource associated with the scalable target}
    scalable_dimension: ${15:# The scalable dimension associated with the scalable target}
    secret_key: ${16:# AWS secret access key}
    service_namespace: ${17:# The namespace of the AWS service}
    session_token: ${18:# AWS STS session token for use with temporary credentials}
    state: ${19:# Whether a policy should be C(present) or C(absent)}
    step_scaling_policy_configuration: ${20:# A step scaling policy}
    target_tracking_scaling_policy_configuration: ${21:# A target tracking policy}
    validate_certs: ${22:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - community
    - aws
    - application_autoscaling_policy]]></content>
  <tabTrigger>community.aws.application_autoscaling_policy</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage Application Auto Scaling Scaling Policies</description>
</snippet>