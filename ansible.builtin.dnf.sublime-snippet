<snippet>
  <content><![CDATA[- name: ${1:Manages packages with the I(dnf) package manager}
  ansible.builtin.dnf:
    allow_downgrade: ${2:# Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package}
    allowerasing: ${3:# If V(true) it allows erasing of installed packages to resolve dependencies}
    autoremove: ${4:# If V(true), removes all 'leaf' packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package}
    best: ${5:# When set to V(true), either use a package with the highest version available or fail}
    bugfix: ${6:# If set to V(true), and O(state=latest) then only installs updates that have been marked bugfix related}
    cacheonly: ${7:# Tells dnf to run entirely from system cache; does not download or update metadata}
    conf_file: ${8:# The remote dnf configuration file to use for the transaction}
    disable_excludes: ${9:# Disable the excludes defined in DNF config files}
    disable_gpg_check: ${10:# Whether to disable the GPG checking of signatures of packages being installed}
    disable_plugin: ${11:# C(Plugin) name to disable for the install/update operation}
    disablerepo: ${12:# C(Repoid) of repositories to disable for the install/update operation}
    download_dir: ${13:# Specifies an alternate directory to store packages}
    download_only: ${14:# Only download the packages, do not install them}
    enable_plugin: ${15:# C(Plugin) name to enable for the install/update operation}
    enablerepo: ${16:# C(Repoid) of repositories to enable for the install/update operation}
    exclude: ${17:# Package name(s) to exclude when O(state=present), or latest}
    install_repoquery: ${18:# This is effectively a no-op in DNF as it is not needed with DNF}
    install_weak_deps: ${19:# Will also install all packages linked by a weak dependency relation}
    installroot: ${20:# Specifies an alternative installroot, relative to which all packages will be installed}
    list: ${21:# Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks}
    lock_timeout: ${22:# Amount of time to wait for the dnf lockfile to be freed}
    name: ${23:# A package name or package specifier with version, like C(name-1}
    nobest: ${24:# This is the opposite of the O(best) option kept for backwards compatibility}
    releasever: ${25:# Specifies an alternative release from which all packages will be installed}
    security: ${26:# If set to V(true), and O(state=latest) then only installs updates that have been marked security related}
    skip_broken: ${27:# Skip all unavailable packages or packages with broken dependencies without raising an error}
    sslverify: ${28:# Disables SSL validation of the repository server for this transaction}
    state: ${29:# Whether to install (V(present), V(latest)), or remove (V(absent)) a package}
    update_cache: ${30:# Force dnf to check if cache is out of date and redownload if needed}
    update_only: ${31:# When using latest, only update installed packages}
    use_backend: ${32:# Backend module to use}
    validate_certs: ${33:# This only applies if using a https url as the source of the rpm}
  tags:
    - dnf]]></content>
  <tabTrigger>ansible.builtin.dnf</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manages packages with the I(dnf) package manager</description>
</snippet>