<snippet>
  <content><![CDATA[- name: ${1:Gather info about a single VM}
  community.vmware.vmware_guest_info:
    name: ${2:# Name of the VM to work with}
    name_match: ${3:# If multiple VMs matching the name, use the first or last found}
    uuid: ${4:# UUID of the instance to manage if known, this is VMware's unique identifier}
    use_instance_uuid: ${5:# Whether to use the VMware instance UUID rather than the BIOS UUID}
    moid: ${6:# Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance}
    folder: ${7:# Destination folder, absolute or relative path to find an existing guest}
    datacenter: ${8:# Destination datacenter for the deploy operation}
    tags: ${9:# Whether to show tags or not}
    tag_details: ${10:# If set C(True), detail information about 'tags' returned}
    schema: ${11:# Specify the output schema desired}
    properties: ${12:# Specify the properties to retrieve}
    hostname: ${13:# The hostname or IP address of the vSphere vCenter or ESXi server}
    username: ${14:# The username of the vSphere vCenter or ESXi server}
    password: ${15:# The password of the vSphere vCenter or ESXi server}
    validate_certs: ${16:# Allows connection when SSL certificates are not valid}
    port: ${17:# The port number of the vSphere vCenter or ESXi server}
    proxy_host: ${18:# Address of a proxy that will receive all HTTPS requests and relay them}
    proxy_port: ${19:# Port of the HTTP proxy that will receive all HTTPS requests and relay them}
  tags:
    - community
    - vmware
    - vmware_guest_info]]></content>
  <tabTrigger>community.vmware.vmware_guest_info</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Gather info about a single VM</description>
</snippet>