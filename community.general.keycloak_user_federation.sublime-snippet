<snippet>
  <content><![CDATA[- name: ${1:Allows administration of Keycloak user federations via Keycloak API}
  community.general.keycloak_user_federation:
    auth_client_id: ${2:# OpenID Connect C(client_id) to authenticate to the API with}
    auth_client_secret: ${3:# Client Secret to use in conjunction with O(auth_client_id) (if required)}
    auth_keycloak_url: ${4:# URL to the Keycloak instance}
    auth_password: ${5:# Password to authenticate for API access with}
    auth_realm: ${6:# Keycloak realm name to authenticate to for API access}
    auth_username: ${7:# Username to authenticate for API access with}
    config: ${8:# Dict specifying the configuration options for the provider; the contents differ depending on the value of O(provider_id)}
    connection_timeout: ${9:# Controls the HTTP connections timeout period (in seconds) to Keycloak API}
    http_agent: ${10:# Configures the HTTP User-Agent header}
    id: ${11:# The unique ID for this user federation}
    mappers: ${12:# A list of dicts defining mappers associated with this Identity Provider}
    name: ${13:# Display name of provider when linked in admin console}
    parent_id: ${14:# Unique ID for the parent of this user federation}
    provider_id: ${15:# Provider for this user federation}
    provider_type: ${16:# Component type for user federation (only supported value is V(org}
    realm: ${17:# The Keycloak realm under which this user federation resides}
    state: ${18:# State of the user federation}
    token: ${19:# Authentication token for Keycloak API}
    validate_certs: ${20:# Verify TLS certificates (do not disable this in production)}
  tags:
    - community
    - general
    - keycloak_user_federation]]></content>
  <tabTrigger>community.general.keycloak_user_federation</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Allows administration of Keycloak user federations via Keycloak API</description>
</snippet>