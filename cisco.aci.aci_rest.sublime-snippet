<snippet>
  <content><![CDATA[- name: ${1:Direct access to the Cisco APIC REST API}
  cisco.aci.aci_rest:
    annotation: ${2:# User-defined string for annotating an object}
    certificate_name: ${3:# The X}
    content: ${4:# When used instead of C(src), sets the payload of the API request directly}
    host: ${5:# IP Address or hostname of APIC resolvable by Ansible control host}
    method: ${6:# The HTTP method of the request}
    output_level: ${7:# Influence the output of this ACI module}
    output_path: ${8:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    password: ${9:# The password to use for authentication}
    path: ${10:# URI being used to execute API calls}
    port: ${11:# Port number to be used for REST connection}
    private_key: ${12:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    rsp_subtree_preserve: ${13:# Preserve the response for the provided path}
    src: ${14:# Name of the absolute path of the filename that includes the body of the HTTP request being sent to the ACI fabric}
    suppress_previous: ${15:# If C(true), a GET to check previous will not be sent before a POST update to APIC}
    suppress_verification: ${16:# If C(true), a verifying GET will not be sent after a POST update to APIC}
    timeout: ${17:# The socket level timeout in seconds}
    use_proxy: ${18:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${19:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${20:# The username to use for authentication}
    validate_certs: ${21:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_rest]]></content>
  <tabTrigger>cisco.aci.aci_rest</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Direct access to the Cisco APIC REST API</description>
</snippet>