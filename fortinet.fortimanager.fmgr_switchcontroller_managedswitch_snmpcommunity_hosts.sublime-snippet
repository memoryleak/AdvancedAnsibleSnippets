<snippet>
  <content><![CDATA[- name: ${1:Configure IPv4 SNMP managers}
  fortinet.fortimanager.fmgr_switchcontroller_managedswitch_snmpcommunity_hosts:
    access_token: ${2:# The token to access FortiManager without using username and password}
    adom: ${3:# The parameter (adom) in requested url}
    bypass_validation: ${4:# Only set to True when module schema diffs with FortiManager API structure, module continues to execute without validating parameters}
    enable_log: ${5:# Enable/Disable logging for task}
    forticloud_access_token: ${6:# Authenticate Ansible client with forticloud API access token}
    managed-switch: ${7:# Deprecated, please use 'managed_switch'}
    managed_switch: ${8:# The parameter (managed-switch) in requested url}
    proposed_method: ${9:# The overridden method for the underlying Json RPC request}
    rc_failed: ${10:# The rc codes list with which the conditions to fail will be overriden}
    rc_succeeded: ${11:# The rc codes list with which the conditions to succeed will be overriden}
    snmp-community: ${12:# Deprecated, please use 'snmp_community'}
    snmp_community: ${13:# The parameter (snmp-community) in requested url}
    state: ${14:# The directive to create, update or delete an object}
    switchcontroller_managedswitch_snmpcommunity_hosts: ${15:# The top level parameters set}
    workspace_locking_adom: ${16:# The adom to lock for FortiManager running in workspace mode, the value can be global and others including root}
    workspace_locking_timeout: ${17:# The maximum time in seconds to wait for other user to release the workspace lock}
  tags:
    - fortinet
    - fortimanager
    - fmgr_switchcontroller_managedswitch_snmpcommunity_hosts]]></content>
  <tabTrigger>fortinet.fortimanager.fmgr_switchcontroller_managedswitch_snmpcommunity_hosts</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Configure IPv4 SNMP managers</description>
</snippet>