<snippet>
  <content><![CDATA[- name: ${1:Run, start or stop a task in ECS}
  community.aws.ecs_task:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    cluster: ${5:# The name of the cluster to run the task on}
    container_instances: ${6:# The list of container instances on which to deploy the task}
    count: ${7:# How many new instances to start}
    debug_botocore_endpoint_logs: ${8:# Use a C(botocore}
    endpoint_url: ${9:# URL to connect to instead of the default AWS endpoints}
    launch_type: ${10:# The launch type on which to run your service}
    network_configuration: ${11:# Network configuration of the service}
    operation: ${12:# Which task operation to execute}
    overrides: ${13:# A dictionary of values to pass to the new instances}
    profile: ${14:# A named AWS profile to use for authentication}
    region: ${15:# The AWS region to use}
    secret_key: ${16:# AWS secret access key}
    session_token: ${17:# AWS STS session token for use with temporary credentials}
    started_by: ${18:# A value showing who or what started the task (for informational purposes)}
    tags: ${19:# Tags that will be added to ecs tasks on start and run}
    task: ${20:# The ARN of the task to stop}
    task_definition: ${21:# The task definition to start, run or stop}
    validate_certs: ${22:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    wait: ${23:# Whether or not to wait for the desired state}
  tags:
    - community
    - aws
    - ecs_task]]></content>
  <tabTrigger>community.aws.ecs_task</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Run, start or stop a task in ECS</description>
</snippet>