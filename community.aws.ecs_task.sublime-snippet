<snippet>
  <content><![CDATA[- name: ${1:Run, start or stop a task in ECS}
  community.aws.ecs_task:
    operation: ${2:# Which task operation to execute}
    cluster: ${3:# The name of the cluster to run the task on}
    task_definition: ${4:# The task definition to start, run or stop}
    overrides: ${5:# A dictionary of values to pass to the new instances}
    count: ${6:# How many new instances to start}
    task: ${7:# The ARN of the task to stop}
    container_instances: ${8:# The list of container instances on which to deploy the task}
    started_by: ${9:# A value showing who or what started the task (for informational purposes)}
    network_configuration: ${10:# Network configuration of the service}
    launch_type: ${11:# The launch type on which to run your service}
    tags: ${12:# Tags that will be added to ecs tasks on start and run}
    wait: ${13:# Whether or not to wait for the desired state}
    access_key: ${14:# AWS access key ID}
    secret_key: ${15:# AWS secret access key}
    session_token: ${16:# AWS STS session token for use with temporary credentials}
    profile: ${17:# A named AWS profile to use for authentication}
    endpoint_url: ${18:# URL to connect to instead of the default AWS endpoints}
    aws_ca_bundle: ${19:# The location of a CA Bundle to use when validating SSL certificates}
    validate_certs: ${20:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    aws_config: ${21:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${22:# Use a C(botocore}
    region: ${23:# The AWS region to use}
  tags:
    - community
    - aws
    - ecs_task]]></content>
  <tabTrigger>community.aws.ecs_task</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Run, start or stop a task in ECS</description>
</snippet>