<snippet>
  <content><![CDATA[- name: ${1:Manage rabbitMQ queues}
  community.rabbitmq.rabbitmq_queue:
    arguments: ${2:# extra arguments for queue}
    auto_delete: ${3:# if the queue should delete itself after all queues/queues unbound from it}
    auto_expires: ${4:# How long a queue can be unused before it is automatically deleted (milliseconds)}
    ca_cert: ${5:# CA certificate to verify SSL connection to management API}
    client_cert: ${6:# Client certificate to send on SSL connections to management API}
    client_key: ${7:# Private key matching the client certificate}
    dead_letter_exchange: ${8:# Optional name of an exchange to which messages will be republished if they}
    dead_letter_routing_key: ${9:# Optional replacement routing key to use when a message is dead-lettered}
    durable: ${10:# whether queue is durable or not}
    login_host: ${11:# RabbitMQ host for connection}
    login_password: ${12:# RabbitMQ password for connection}
    login_port: ${13:# RabbitMQ management API port}
    login_protocol: ${14:# RabbitMQ management API protocol}
    login_user: ${15:# RabbitMQ user for connection}
    max_length: ${16:# How many messages can the queue contain before it starts rejecting}
    max_priority: ${17:# Maximum number of priority levels for the queue to support}
    message_ttl: ${18:# How long a message can live in queue before it is discarded (milliseconds)}
    name: ${19:# Name of the queue}
    state: ${20:# Whether the queue should be present or absent}
    vhost: ${21:# RabbitMQ virtual host}
  tags:
    - community
    - rabbitmq
    - rabbitmq_queue]]></content>
  <tabTrigger>community.rabbitmq.rabbitmq_queue</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage rabbitMQ queues</description>
</snippet>