<snippet>
  <content><![CDATA[- name: ${1:Resource module for networks _wireless _ssids _eapoverride}
  cisco.meraki.networks_wireless_ssids_eap_override:
    eapolKey: ${2:# EAPOL Key settings}
    identity: ${3:# EAP settings for identity requests}
    maxRetries: ${4:# Maximum number of general EAP retries}
    meraki_action_batch_retry_wait_time: ${5:# meraki_action_batch_retry_wait_time (integer), action batch concurrency error retry wait time}
    meraki_api_key: ${6:# meraki_api_key (string), API key generated in dashboard; can also be set as an environment variable MERAKI_DASHBOARD_API_KEY}
    meraki_base_url: ${7:# meraki_base_url (string), preceding all endpoint resources}
    meraki_be_geo_id: ${8:# meraki_be_geo_id (string), optional partner identifier for API usage tracking; can also be set as an environment variable BE_GEO_ID}
    meraki_caller: ${9:# meraki_caller (string), optional identifier for API usage tracking; can also be set as an environment variable MERAKI_PYTHON_SDK_CALLER}
    meraki_certificate_path: ${10:# meraki_certificate_path (string), path for TLS/SSL certificate verification if behind local proxy}
    meraki_inherit_logging_config: ${11:# meraki_inherit_logging_config (boolean), Inherits your own logger instance}
    meraki_log_file_prefix: ${12:# meraki_log_file_prefix (string), log file name appended with date and timestamp}
    meraki_log_path: ${13:# log_path (string), path to output log; by default, working directory of script if not specified}
    meraki_maximum_retries: ${14:# meraki_maximum_retries (integer), retry up to this many times when encountering 429s or other server-side errors}
    meraki_nginx_429_retry_wait_time: ${15:# meraki_nginx_429_retry_wait_time (integer), Nginx 429 retry wait time}
    meraki_output_log: ${16:# meraki_output_log (boolean), create an output log file?}
    meraki_print_console: ${17:# meraki_print_console (boolean), print logging output to console?}
    meraki_requests_proxy: ${18:# meraki_requests_proxy (string), proxy server and port, if needed, for HTTPS}
    meraki_retry_4xx_error: ${19:# meraki_retry_4xx_error (boolean), retry if encountering other 4XX error (besides 429)?}
    meraki_retry_4xx_error_wait_time: ${20:# meraki_retry_4xx_error_wait_time (integer), other 4XX error retry wait time}
    meraki_simulate: ${21:# meraki_simulate (boolean), simulate POST/PUT/DELETE calls to prevent changes?}
    meraki_single_request_timeout: ${22:# meraki_single_request_timeout (integer), maximum number of seconds for each API call}
    meraki_suppress_logging: ${23:# meraki_suppress_logging (boolean), disable all logging? you're on your own then!}
    meraki_use_iterator_for_get_pages: ${24:# meraki_use_iterator_for_get_pages (boolean), list* methods will return an iterator with each object instead of a complete list with all items}
    meraki_wait_on_rate_limit: ${25:# meraki_wait_on_rate_limit (boolean), retry if 429 rate limit error encountered?}
    networkId: ${26:# NetworkId path parameter}
    number: ${27:# Number path parameter}
    timeout: ${28:# General EAP timeout in seconds}
  tags:
    - cisco
    - meraki
    - networks_wireless_ssids_eap_override]]></content>
  <tabTrigger>cisco.meraki.networks_wireless_ssids_eap_override</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Resource module for networks _wireless _ssids _eapoverride</description>
</snippet>