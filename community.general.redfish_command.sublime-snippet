<snippet>
  <content><![CDATA[- name: ${1:Manages Out-Of-Band controllers using Redfish APIs}
  community.general.redfish_command:
    account_properties: ${2:# Properties of account service to update}
    account_types: ${3:# Array of account types to apply to a user account}
    auth_token: ${4:# Security token for authenticating to OOB controller}
    baseuri: ${5:# Base URI of OOB controller}
    bios_attributes: ${6:# BIOS attributes that needs to be verified in the given server}
    boot_next: ${7:# BootNext target when bootdevice is 'UefiBootNext'}
    boot_override_mode: ${8:# Boot mode when using an override}
    bootdevice: ${9:# Boot device when setting boot configuration}
    category: ${10:# Category to execute on OOB controller}
    ciphers: ${11:# SSL/TLS Ciphers to use for the request}
    command: ${12:# List of commands to execute on OOB controller}
    id: ${13:# ID of account to delete/modify}
    new_password: ${14:# New password of account to add/modify}
    new_username: ${15:# Username of account to add/delete/modify}
    oem_account_types: ${16:# Array of OEM account types to apply to a user account}
    password: ${17:# Password for authenticating to OOB controller}
    reset_to_defaults_mode: ${18:# Mode to apply when reseting to default}
    resource_id: ${19:# ID of the System, Manager or Chassis to modify}
    roleid: ${20:# Role of account to add/modify}
    session_uri: ${21:# URI of the session resource}
    strip_etag_quotes: ${22:# Removes surrounding quotes of etag used in C(If-Match) header of C(PATCH) requests}
    timeout: ${23:# Timeout in seconds for HTTP requests to OOB controller}
    uefi_target: ${24:# UEFI boot target when bootdevice is 'UefiTarget'}
    update_apply_time: ${25:# Time when to apply the update}
    update_creds: ${26:# Credentials for retrieving the update image}
    update_custom_oem_header: ${27:# Optional OEM header, sent as separate form-data for the Multipart HTTP push update}
    update_custom_oem_mime_type: ${28:# MIME Type for custom OEM properties for HTTP Multipart Push updates}
    update_custom_oem_params: ${29:# Custom OEM properties for HTTP Multipart Push updates}
    update_handle: ${30:# Handle to check the status of an update in progress}
    update_image_file: ${31:# Filename, with optional path, of the image for the update}
    update_image_uri: ${32:# URI of the image for the update}
    update_oem_params: ${33:# Properties for HTTP Multipart Push Updates}
    update_protocol: ${34:# Protocol for the update}
    update_targets: ${35:# List of target resource URIs to apply the update to}
    update_username: ${36:# New user name for updating account_username}
    username: ${37:# Username for authenticating to OOB controller}
    virtual_media: ${38:# Options for VirtualMedia commands}
    wait: ${39:# Block until the service is ready again}
    wait_timeout: ${40:# How long to block until the service is ready again before giving up}
  tags:
    - community
    - general
    - redfish_command]]></content>
  <tabTrigger>community.general.redfish_command</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manages Out-Of-Band controllers using Redfish APIs</description>
</snippet>