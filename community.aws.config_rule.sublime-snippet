<snippet>
  <content><![CDATA[- name: ${1:Manage AWS Config rule resources}
  community.aws.config_rule:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    description: ${6:# The description that you provide for the AWS Config rule}
    endpoint_url: ${7:# URL to connect to instead of the default AWS endpoints}
    execution_frequency: ${8:# The maximum frequency with which AWS Config runs evaluations for a rule}
    input_parameters: ${9:# A string, in JSON format, that is passed to the AWS Config rule Lambda function}
    name: ${10:# The name of the AWS Config resource}
    profile: ${11:# A named AWS profile to use for authentication}
    region: ${12:# The AWS region to use}
    scope: ${13:# Defines which resources can trigger an evaluation for the rule}
    secret_key: ${14:# AWS secret access key}
    session_token: ${15:# AWS STS session token for use with temporary credentials}
    source: ${16:# Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluate your AWS resources}
    state: ${17:# Whether the Config rule should be present or absent}
    validate_certs: ${18:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - community
    - aws
    - config_rule]]></content>
  <tabTrigger>community.aws.config_rule</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage AWS Config rule resources</description>
</snippet>