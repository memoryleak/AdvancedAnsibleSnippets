<snippet>
  <content><![CDATA[- name: ${1:Generate OpenSSL PKCS#12 archive}
  community.crypto.openssl_pkcs12:
    action: ${2:# V(export) or V(parse) a PKCS#12}
    attributes: ${3:# The attributes the resulting filesystem object should have}
    backup: ${4:# Create a backup file including a timestamp so you can get the original output file back if you overwrote it with a new one by accident}
    certificate_path: ${5:# The path to read certificates and private keys from}
    encryption_level: ${6:# Determines the encryption level used}
    force: ${7:# Should the file be regenerated even if it already exists}
    friendly_name: ${8:# Specifies the friendly name for the certificate and private key}
    group: ${9:# Name of the group that should own the filesystem object, as would be fed to C(chown)}
    iter_size: ${10:# Number of times to repeat the encryption step}
    maciter_size: ${11:# Number of times to repeat the MAC step}
    mode: ${12:# The permissions the resulting filesystem object should have}
    other_certificates: ${13:# List of other certificates to include}
    other_certificates_parse_all: ${14:# If set to V(true), assumes that the files mentioned in O(other_certificates) can contain more than one certificate per file (or even none per file)}
    owner: ${15:# Name of the user that should own the filesystem object, as would be fed to C(chown)}
    passphrase: ${16:# The PKCS#12 password}
    path: ${17:# Filename to write the PKCS#12 file to}
    privatekey_content: ${18:# Content of the private key file}
    privatekey_passphrase: ${19:# Passphrase source to decrypt any input private keys with}
    privatekey_path: ${20:# File to read private key from}
    return_content: ${21:# If set to V(true), will return the (current or generated) PKCS#12's content as RV(pkcs12)}
    select_crypto_backend: ${22:# Determines which crypto backend to use}
    selevel: ${23:# The level part of the SELinux filesystem object context}
    serole: ${24:# The role part of the SELinux filesystem object context}
    setype: ${25:# The type part of the SELinux filesystem object context}
    seuser: ${26:# The user part of the SELinux filesystem object context}
    src: ${27:# PKCS#12 file path to parse}
    state: ${28:# Whether the file should exist or not}
    unsafe_writes: ${29:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
  tags:
    - community
    - crypto
    - openssl_pkcs12]]></content>
  <tabTrigger>community.crypto.openssl_pkcs12</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generate OpenSSL PKCS#12 archive</description>
</snippet>