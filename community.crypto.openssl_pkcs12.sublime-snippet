<snippet>
  <content><![CDATA[- name: ${1:Generate OpenSSL PKCS#12 archive}
  community.crypto.openssl_pkcs12:
    action: ${2:# C(export) or C(parse) a PKCS#12}
    other_certificates: ${3:# List of other certificates to include}
    other_certificates_parse_all: ${4:# If set to C(true), assumes that the files mentioned in I(other_certificates) can contain more than one certificate per file (or even none per file)}
    certificate_path: ${5:# The path to read certificates and private keys from}
    force: ${6:# Should the file be regenerated even if it already exists}
    friendly_name: ${7:# Specifies the friendly name for the certificate and private key}
    iter_size: ${8:# Number of times to repeat the encryption step}
    maciter_size: ${9:# Number of times to repeat the MAC step}
    encryption_level: ${10:# Determines the encryption level used}
    passphrase: ${11:# The PKCS#12 password}
    path: ${12:# Filename to write the PKCS#12 file to}
    privatekey_passphrase: ${13:# Passphrase source to decrypt any input private keys with}
    privatekey_path: ${14:# File to read private key from}
    privatekey_content: ${15:# Content of the private key file}
    state: ${16:# Whether the file should exist or not}
    src: ${17:# PKCS#12 file path to parse}
    backup: ${18:# Create a backup file including a timestamp so you can get the original output file back if you overwrote it with a new one by accident}
    return_content: ${19:# If set to C(true), will return the (current or generated) PKCS#12's content as I(pkcs12)}
    select_crypto_backend: ${20:# Determines which crypto backend to use}
    mode: ${21:# The permissions the resulting filesystem object should have}
    owner: ${22:# Name of the user that should own the filesystem object, as would be fed to I(chown)}
    group: ${23:# Name of the group that should own the filesystem object, as would be fed to I(chown)}
    seuser: ${24:# The user part of the SELinux filesystem object context}
    serole: ${25:# The role part of the SELinux filesystem object context}
    setype: ${26:# The type part of the SELinux filesystem object context}
    selevel: ${27:# The level part of the SELinux filesystem object context}
    unsafe_writes: ${28:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
    attributes: ${29:# The attributes the resulting filesystem object should have}
  tags:
    - community
    - crypto
    - openssl_pkcs12]]></content>
  <tabTrigger>community.crypto.openssl_pkcs12</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generate OpenSSL PKCS#12 archive</description>
</snippet>