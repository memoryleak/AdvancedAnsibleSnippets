<snippet>
  <content><![CDATA[- name: ${1:Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)}
  cisco.aci.aci_encap_pool:
    annotation: ${2:# User-defined string for annotating an object}
    certificate_name: ${3:# The X}
    description: ${4:# Description for the C(pool)}
    host: ${5:# IP Address or hostname of APIC resolvable by Ansible control host}
    name_alias: ${6:# The alias for the current object}
    output_level: ${7:# Influence the output of this ACI module}
    output_path: ${8:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    owner_key: ${9:# User-defined string for the ownerKey attribute of an ACI object}
    owner_tag: ${10:# User-defined string for the ownerTag attribute of an ACI object}
    password: ${11:# The password to use for authentication}
    pool: ${12:# The name of the pool}
    pool_allocation_mode: ${13:# The method used for allocating encaps to resources}
    pool_type: ${14:# The encap type of C(pool)}
    port: ${15:# Port number to be used for REST connection}
    private_key: ${16:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    state: ${17:# Use C(present) or C(absent) for adding or removing}
    timeout: ${18:# The socket level timeout in seconds}
    use_proxy: ${19:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${20:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${21:# The username to use for authentication}
    validate_certs: ${22:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_encap_pool]]></content>
  <tabTrigger>cisco.aci.aci_encap_pool</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)</description>
</snippet>