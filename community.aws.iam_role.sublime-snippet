<snippet>
  <content><![CDATA[- name: ${1:Manage AWS IAM roles}
  community.aws.iam_role:
    path: ${2:# The path to the role}
    name: ${3:# The name of the role to create}
    description: ${4:# Provides a description of the role}
    boundary: ${5:# The ARN of an IAM managed policy to use to restrict the permissions this role can pass on to IAM roles/users that it creates}
    assume_role_policy_document: ${6:# The trust relationship policy document that grants an entity permission to assume the role}
    managed_policies: ${7:# A list of managed policy ARNs, managed policy ARNs or friendly names}
    max_session_duration: ${8:# The maximum duration (in seconds) of a session when assuming the role}
    purge_policies: ${9:# When I(purge_policies=true) any managed policies not listed in I(managed_policies) will be detatched}
    state: ${10:# Create or remove the IAM role}
    create_instance_profile: ${11:# Creates an IAM instance profile along with the role}
    delete_instance_profile: ${12:# When I(delete_instance_profile=true) and I(state=absent) deleting a role will also delete the instance profile created with the same I(name) as the role}
    wait_timeout: ${13:# How long (in seconds) to wait for creation / update to complete}
    wait: ${14:# When I(wait=True) the module will wait for up to I(wait_timeout) seconds for IAM role creation before returning}
    access_key: ${15:# AWS access key ID}
    secret_key: ${16:# AWS secret access key}
    session_token: ${17:# AWS STS session token for use with temporary credentials}
    profile: ${18:# A named AWS profile to use for authentication}
    endpoint_url: ${19:# URL to connect to instead of the default AWS endpoints}
    aws_ca_bundle: ${20:# The location of a CA Bundle to use when validating SSL certificates}
    validate_certs: ${21:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    aws_config: ${22:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${23:# Use a C(botocore}
    region: ${24:# The AWS region to use}
    tags: ${25:# A dictionary representing the tags to be applied to the resource}
    purge_tags: ${26:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
  tags:
    - community
    - aws
    - iam_role]]></content>
  <tabTrigger>community.aws.iam_role</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage AWS IAM roles</description>
</snippet>