<snippet>
  <content><![CDATA[- name: ${1:Add or remove PostgreSQL roles from groups}
  community.postgresql.postgresql_membership:
    ca_cert: ${2:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${3:# Any additional parameters to be passed to libpg}
    db: ${4:# Name of database to connect to}
    fail_on_role: ${5:# If C(true), fail when group or target_role doesn't exist}
    groups: ${6:# The list of groups (roles) that need to be granted to or revoked from I(target_roles)}
    login_host: ${7:# Host running the database}
    login_password: ${8:# The password this module should use to establish its PostgreSQL session}
    login_unix_socket: ${9:# Path to a Unix domain socket for local connections}
    login_user: ${10:# The username this module should use to establish its PostgreSQL session}
    port: ${11:# Database port to connect to}
    session_role: ${12:# Switch to session_role after connecting}
    ssl_cert: ${13:# Specifies the file name of the client SSL certificate}
    ssl_key: ${14:# Specifies the location for the secret key used for the client certificate}
    ssl_mode: ${15:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    state: ${16:# Membership state}
    target_roles: ${17:# The list of target roles (groups will be granted to them)}
    trust_input: ${18:# If C(false), check whether values of parameters I(groups), I(target_roles), I(session_role) are potentially dangerous}
  tags:
    - community
    - postgresql
    - postgresql_membership]]></content>
  <tabTrigger>community.postgresql.postgresql_membership</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Add or remove PostgreSQL roles from groups</description>
</snippet>