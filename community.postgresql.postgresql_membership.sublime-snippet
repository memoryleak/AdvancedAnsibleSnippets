<snippet>
  <content><![CDATA[- name: ${1:Add or remove PostgreSQL roles from groups}
  community.postgresql.postgresql_membership:
    groups: ${2:# The list of groups (roles) that need to be granted to or revoked from I(target_roles)}
    target_roles: ${3:# The list of target roles (groups will be granted to them)}
    fail_on_role: ${4:# If C(true), fail when group or target_role doesn't exist}
    state: ${5:# Membership state}
    db: ${6:# Name of database to connect to}
    session_role: ${7:# Switch to session_role after connecting}
    trust_input: ${8:# If C(false), check whether values of parameters I(groups), I(target_roles), I(session_role) are potentially dangerous}
    login_user: ${9:# The username this module should use to establish its PostgreSQL session}
    login_password: ${10:# The password this module should use to establish its PostgreSQL session}
    login_host: ${11:# Host running the database}
    login_unix_socket: ${12:# Path to a Unix domain socket for local connections}
    port: ${13:# Database port to connect to}
    ssl_mode: ${14:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    ca_cert: ${15:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${16:# Any additional parameters to be passed to libpg}
  tags:
    - community
    - postgresql
    - postgresql_membership]]></content>
  <tabTrigger>community.postgresql.postgresql_membership</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Add or remove PostgreSQL roles from groups</description>
</snippet>