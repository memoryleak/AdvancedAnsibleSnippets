<snippet>
  <content><![CDATA[- name: ${1:Module to manage virtual machine templates in oVirt/RHV}
  ovirt.ovirt.ovirt_template:
    allow_partial_import: ${2:# Boolean indication whether to allow partial registration of a template when C(state) is registered}
    auth: ${3:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
    ballooning_enabled: ${4:# If I(true), use memory ballooning}
    bios_type: ${5:# Set bios type, necessary for some operating systems and secure boot}
    boot_menu: ${6:# I(True) enable menu to select boot device, I(False) to disable it}
    clone_name: ${7:# Name for importing Template from storage domain}
    clone_permissions: ${8:# If I(True) then the permissions of the VM (only the direct ones, not the inherited ones) will be copied to the created template}
    cloud_init: ${9:# Dictionary with values for Unix-like Virtual Machine initialization using cloud init}
    cloud_init_nics: ${10:# List of dictionaries representing network interfaces to be setup by cloud init}
    cluster: ${11:# Name of the cluster, where template should be created/imported}
    cluster_mappings: ${12:# Mapper which maps cluster name between Template's OVF and the destination cluster this Template should be registered to, relevant when C(state) is registered}
    cpu_profile: ${13:# CPU profile to be set to template}
    description: ${14:# Description of the template}
    domain_mappings: ${15:# Mapper which maps aaa domain name between Template's OVF and the destination aaa domain this Template should be registered to, relevant when C(state) is registered}
    exclusive: ${16:# When C(state) is I(exported) this parameter indicates if the existing templates with the same name should be overwritten}
    export_domain: ${17:# When C(state) is I(exported) or I(imported) this parameter specifies the name of the export storage domain}
    fetch_nested: ${18:# If I(True) the module will fetch additional data from the API}
    id: ${19:# ID of the template to be registered}
    image_disk: ${20:# When C(state) is I(imported) and C(image_provider) is used this parameter specifies the name of disk to be imported as template}
    image_provider: ${21:# When C(state) is I(imported) this parameter specifies the name of the image provider to be used}
    io_threads: ${22:# Number of IO threads used by virtual machine}
    kvm: ${23:# Dictionary of values to be used to connect to kvm and import a template to oVirt}
    memory: ${24:# Amount of memory of the template}
    memory_guaranteed: ${25:# Amount of minimal guaranteed memory of the template}
    memory_max: ${26:# Upper bound of template memory up to which memory hot-plug can be performed}
    name: ${27:# Name of the template to manage}
    nested_attributes: ${28:# Specifies list of the attributes which should be fetched from the API}
    nics: ${29:# List of NICs, which should be attached to Virtual Machine}
    operating_system: ${30:# Operating system of the template, for example 'rhel_8x64'}
    poll_interval: ${31:# Number of the seconds the module waits until another poll request on entity status is sent}
    role_mappings: ${32:# Mapper which maps role name between Template's OVF and the destination role this Template should be registered to, relevant when C(state) is registered}
    seal: ${33:# 'Sealing' is an operation that erases all machine-specific configurations from a filesystem: This includes SSH keys, UDEV rules, MAC addresses, system ID, hostname, etc}
    smartcard_enabled: ${34:# If I(true), use smart card authentication}
    soundcard_enabled: ${35:# If I(true), the sound card is added to the virtual machine}
    sso: ${36:# I(True) enable Single Sign On by Guest Agent, I(False) to disable it}
    state: ${37:# Should the template be present/absent/exported/imported/registered}
    storage_domain: ${38:# When C(state) is I(imported) this parameter specifies the name of the destination data storage domain}
    sysprep: ${39:# Dictionary with values for Windows Virtual Machine initialization using sysprep}
    template_image_disk_name: ${40:# When C(state) is I(imported) and C(image_provider) is used this parameter specifies the new name for imported disk, if omitted then I(image_disk) name is used by default}
    timeout: ${41:# The amount of time in seconds the module should wait for the instance to get into desired state}
    timezone: ${42:# Sets time zone offset of the guest hardware clock}
    usb_support: ${43:# I(True) enable USB support, I(False) to disable it}
    version: ${44:# C(name) - The name of this version}
    vm: ${45:# Name of the VM, which will be used to create template}
    vnic_profile_mappings: ${46:# Mapper which maps an external virtual NIC profile to one that exists in the engine when C(state) is registered}
    wait: ${47:# C(yes) if the module should wait for the entity to get into desired state}
  tags:
    - ovirt
    - ovirt
    - ovirt_template]]></content>
  <tabTrigger>ovirt.ovirt.ovirt_template</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module to manage virtual machine templates in oVirt/RHV</description>
</snippet>