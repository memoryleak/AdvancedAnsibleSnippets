<snippet>
  <content><![CDATA[- name: ${1:Deploy and manage OpenNebula services}
  community.general.one_service:
    api_password: ${2:# Password of the user to login into OpenNebula OneFlow API server}
    api_url: ${3:# URL of the OpenNebula OneFlow API server}
    api_username: ${4:# Name of the user to login into the OpenNebula OneFlow API server}
    cardinality: ${5:# Number of VMs for the specified role}
    custom_attrs: ${6:# Dictionary of key/value custom attributes which will be used when instantiating a new service}
    force: ${7:# Force the new cardinality even if it is outside the limits}
    group_id: ${8:# ID of the group which will be set as the group of the service}
    mode: ${9:# Set permission mode of a service instance in octet format, for example V(0600) to give owner C(use) and C(manage) and nothing to group and others}
    owner_id: ${10:# ID of the user which will be set as the owner of the service}
    role: ${11:# Name of the role whose cardinality should be changed}
    service_id: ${12:# ID of a service instance that you would like to manage}
    service_name: ${13:# Name of a service instance that you would like to manage}
    state: ${14:# V(present) - instantiate a service from a template specified with O(template_id) or O(template_name)}
    template_id: ${15:# ID of a service template to use to create a new instance of a service}
    template_name: ${16:# Name of service template to use to create a new instance of a service}
    unique: ${17:# Setting O(unique=true) will make sure that there is only one service instance running with a name set with O(service_name) when instantiating a service from a template specified with O(template_id) or O(template_name)}
    wait: ${18:# Wait for the instance to reach RUNNING state after DEPLOYING or COOLDOWN state after SCALING}
    wait_timeout: ${19:# How long before wait gives up, in seconds}
  tags:
    - community
    - general
    - one_service]]></content>
  <tabTrigger>community.general.one_service</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Deploy and manage OpenNebula services</description>
</snippet>