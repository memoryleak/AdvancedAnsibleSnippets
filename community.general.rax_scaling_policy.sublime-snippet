<snippet>
  <content><![CDATA[- name: ${1:Manipulate Rackspace Cloud Autoscale Scaling Policy}
  community.general.rax_scaling_policy:
    at: ${2:# The UTC time when this policy will be executed}
    change: ${3:# The change, either as a number of servers or as a percentage, to make in the scaling group}
    cron: ${4:# The time when the policy will be executed, as a cron entry}
    cooldown: ${5:# The period of time, in seconds, that must pass before any scaling can occur after the previous scaling}
    desired_capacity: ${6:# The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group}
    is_percent: ${7:# Whether the value in I(change) is a percent value}
    name: ${8:# Name to give the policy}
    policy_type: ${9:# The type of policy that will be executed for the current release}
    scaling_group: ${10:# Name of the scaling group that this policy will be added to}
    state: ${11:# Indicate desired state of the resource}
    api_key: ${12:# Rackspace API key, overrides I(credentials)}
    credentials: ${13:# File to find the Rackspace credentials in}
    env: ${14:# Environment as configured in I(~/}
    region: ${15:# Region to create an instance in}
    username: ${16:# Rackspace username, overrides I(credentials)}
    validate_certs: ${17:# Whether or not to require SSL validation of API endpoints}
    auth_endpoint: ${18:# The URI of the authentication service}
    identity_type: ${19:# Authentication mechanism to use, such as rackspace or keystone}
    tenant_id: ${20:# The tenant ID used for authentication}
    tenant_name: ${21:# The tenant name used for authentication}
  tags:
    - community
    - general
    - rax_scaling_policy]]></content>
  <tabTrigger>community.general.rax_scaling_policy</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manipulate Rackspace Cloud Autoscale Scaling Policy</description>
</snippet>