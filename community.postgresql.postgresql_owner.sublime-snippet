<snippet>
  <content><![CDATA[- name: ${1:Change an owner of PostgreSQL database object}
  community.postgresql.postgresql_owner:
    new_owner: ${2:# Role (user/group) to set as an I(obj_name) owner}
    obj_name: ${3:# Name of a database object to change ownership}
    obj_type: ${4:# Type of a database object}
    reassign_owned_by: ${5:# Caution - the ownership of all the objects within the specified I(db), owned by this role(s) will be reassigned to I(new_owner)}
    fail_on_role: ${6:# If C(true), fail when I(reassign_owned_by) role does not exist}
    db: ${7:# Name of database to connect to}
    session_role: ${8:# Switch to session_role after connecting}
    trust_input: ${9:# If C(false), check whether values of parameters I(new_owner), I(obj_name), I(reassign_owned_by), I(session_role) are potentially dangerous}
    login_user: ${10:# The username this module should use to establish its PostgreSQL session}
    login_password: ${11:# The password this module should use to establish its PostgreSQL session}
    login_host: ${12:# Host running the database}
    login_unix_socket: ${13:# Path to a Unix domain socket for local connections}
    port: ${14:# Database port to connect to}
    ssl_mode: ${15:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    ca_cert: ${16:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${17:# Any additional parameters to be passed to libpg}
  tags:
    - community
    - postgresql
    - postgresql_owner]]></content>
  <tabTrigger>community.postgresql.postgresql_owner</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Change an owner of PostgreSQL database object</description>
</snippet>