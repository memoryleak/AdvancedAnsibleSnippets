<snippet>
  <content><![CDATA[- name: ${1:Perform a write operation against a KVv2 secret in HashiCorp Vault}
  community.hashi_vault.vault_kv2_write:
    auth_method: ${2:# Authentication method to be used}
    aws_access_key: ${3:# The AWS access key to use}
    aws_iam_server_id: ${4:# If specified, sets the value to use for the C(X-Vault-AWS-IAM-Server-ID) header as part of C(GetCallerIdentity) request}
    aws_profile: ${5:# The AWS profile}
    aws_secret_key: ${6:# The AWS secret key that corresponds to the access key}
    aws_security_token: ${7:# The AWS security token if using temporary access and secret keys}
    azure_client_id: ${8:# The client ID (also known as application ID) of the Azure AD service principal or managed identity}
    azure_client_secret: ${9:# The client secret of the Azure AD service principal}
    azure_resource: ${10:# The resource URL for the application registered in Azure Active Directory}
    azure_tenant_id: ${11:# The Azure Active Directory Tenant ID (also known as the Directory ID) of the service principal}
    ca_cert: ${12:# Path to certificate to use for authentication}
    cas: ${13:# Perform a check-and-set operation}
    cert_auth_private_key: ${14:# For C(cert) auth, path to the private key file to authenticate with, in PEM format}
    cert_auth_public_key: ${15:# For C(cert) auth, path to the certificate file to authenticate with, in PEM format}
    data: ${16:# KVv2 secret data to write}
    engine_mount_point: ${17:# The path where the secret backend is mounted}
    jwt: ${18:# The JSON Web Token (JWT) to use for JWT authentication to Vault}
    mount_point: ${19:# Vault mount point}
    namespace: ${20:# Vault namespace where secrets reside}
    password: ${21:# Authentication password}
    path: ${22:# Vault KVv2 path to be written to}
    proxies: ${23:# URL(s) to the proxies used to access the Vault service}
    read_before_write: ${24:# Read the secret first and write only when I(data) differs from the read data}
    region: ${25:# The AWS region for which to create the connection}
    retries: ${26:# Allows for retrying on errors, based on the L(Retry class in the urllib3 library,https://urllib3}
    retry_action: ${27:# Controls whether and how to show messages on I(retries)}
    role_id: ${28:# Vault Role ID or name}
    secret_id: ${29:# Secret ID to be used for Vault AppRole authentication}
    timeout: ${30:# Sets the connection timeout in seconds}
    token: ${31:# Vault token}
    token_file: ${32:# If no token is specified, will try to read the token from this file in I(token_path)}
    token_path: ${33:# If no token is specified, will try to read the I(token_file) from this path}
    token_validate: ${34:# For token auth, will perform a C(lookup-self) operation to determine the token's validity before using it}
    url: ${35:# URL to the Vault service}
    username: ${36:# Authentication user name}
    validate_certs: ${37:# Controls verification and validation of SSL certificates, mostly you only want to turn off with self signed ones}
  tags:
    - community
    - hashi_vault
    - vault_kv2_write]]></content>
  <tabTrigger>community.hashi_vault.vault_kv2_write</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Perform a write operation against a KVv2 secret in HashiCorp Vault</description>
</snippet>