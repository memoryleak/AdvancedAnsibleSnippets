<snippet>
  <content><![CDATA[- name: ${1:Request SSL/TLS certificates with the Entrust Certificate Services (ECS) API}
  community.crypto.ecs_certificate:
    additional_emails: ${2:# A list of additional email addresses to receive the delivery notice and expiry notification for the certificate}
    backup: ${3:# Whether a backup should be made for the certificate in O(path)}
    cert_expiry: ${4:# The date the certificate should be set to expire, in RFC3339 compliant date or date-time format}
    cert_lifetime: ${5:# The lifetime of the certificate}
    cert_type: ${6:# Specify the type of certificate requested}
    client_id: ${7:# The client ID to submit the Certificate Signing Request under}
    csr: ${8:# Base-64 encoded Certificate Signing Request (CSR)}
    ct_log: ${9:# In compliance with browser requirements, this certificate may be posted to the Certificate Transparency (CT) logs}
    custom_fields: ${10:# Mapping of custom fields to associate with the certificate request and certificate}
    eku: ${11:# If specified, overrides the key usage in the O(csr)}
    end_user_key_storage_agreement: ${12:# The end user of the Code Signing certificate must generate and store the private key for this request on cryptographically secure hardware to be compliant with the Entrust CSP and Subscription agreement}
    entrust_api_client_cert_key_path: ${13:# The path to the key for the client certificate used to authenticate to the Entrust Certificate Services (ECS) API}
    entrust_api_client_cert_path: ${14:# The path to the client certificate used to authenticate to the Entrust Certificate Services (ECS) API}
    entrust_api_key: ${15:# The key (password) for authentication to the Entrust Certificate Services (ECS) API}
    entrust_api_specification_path: ${16:# The path to the specification file defining the Entrust Certificate Services (ECS) API configuration}
    entrust_api_user: ${17:# The username for authentication to the Entrust Certificate Services (ECS) API}
    force: ${18:# If force is used, a certificate is requested regardless of whether O(path) points to an existing valid certificate}
    full_chain_path: ${19:# The destination path for the full certificate chain of the certificate, intermediates, and roots}
    org: ${20:# Organization 'O=' to include in the certificate}
    ou: ${21:# Organizational unit 'OU=' to include in the certificate}
    path: ${22:# The destination path for the generated certificate as a PEM encoded cert}
    remaining_days: ${23:# The number of days the certificate must have left being valid}
    request_type: ${24:# The operation performed if O(tracking_id) references a valid certificate to reissue, or there is already a certificate present in O(path) but either O(force) is specified or RV(cert_days) < O(remaining_days)}
    requester_email: ${25:# The requester email to associate with certificate tracking information and receive delivery and expiry notices for the certificate}
    requester_name: ${26:# The requester name to associate with certificate tracking information}
    requester_phone: ${27:# The requester phone number to associate with certificate tracking information}
    subject_alt_name: ${28:# The subject alternative name identifiers, as an array of values (applies to O(cert_type) with a value of V(STANDARD_SSL), V(ADVANTAGE_SSL), V(UC_SSL), V(EV_SSL), V(WILDCARD_SSL), V(PRIVATE_SSL), and V(PD_SSL))}
    tracking_id: ${29:# The tracking ID of the certificate to reissue or renew}
    tracking_info: ${30:# Free form tracking information to attach to the record for the certificate}
  tags:
    - community
    - crypto
    - ecs_certificate]]></content>
  <tabTrigger>community.crypto.ecs_certificate</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Request SSL/TLS certificates with the Entrust Certificate Services (ECS) API</description>
</snippet>