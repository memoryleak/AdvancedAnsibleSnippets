<snippet>
  <content><![CDATA[- name: ${1:Maintain an EC2 security group}
  amazon.aws.ec2_security_group:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    description: ${6:# Description of the security group}
    endpoint_url: ${7:# URL to connect to instead of the default AWS endpoints}
    group_id: ${8:# Id of group to delete (works only with absent)}
    name: ${9:# Name of the security group}
    profile: ${10:# A named AWS profile to use for authentication}
    purge_rules: ${11:# Purge existing rules on security group that are not found in rules}
    purge_rules_egress: ${12:# Purge existing rules_egress on security group that are not found in rules_egress}
    purge_tags: ${13:# If O(purge_tags=true) and O(tags) is set, existing tags will be purged from the resource to match exactly what is defined by O(tags) parameter}
    region: ${14:# The AWS region to use}
    rules: ${15:# List of firewall inbound rules to enforce in this group (see example)}
    rules_egress: ${16:# List of firewall outbound rules to enforce in this group (see example)}
    secret_key: ${17:# AWS secret access key}
    session_token: ${18:# AWS STS session token for use with temporary credentials}
    state: ${19:# Create or delete a security group}
    tags: ${20:# A dictionary representing the tags to be applied to the resource}
    validate_certs: ${21:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    vpc_id: ${22:# ID of the VPC to create the group in}
  tags:
    - amazon
    - aws
    - ec2_security_group]]></content>
  <tabTrigger>amazon.aws.ec2_security_group</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Maintain an EC2 security group</description>
</snippet>