<snippet>
  <content><![CDATA[- name: ${1:Run PostgreSQL queries}
  community.postgresql.postgresql_query:
    autocommit: ${2:# Execute in autocommit mode when the query can't be run inside a transaction block (e}
    ca_cert: ${3:# Specifies the name of a file containing SSL certificate authority (CA) certificate(s)}
    connect_params: ${4:# Any additional parameters to be passed to libpg}
    db: ${5:# Name of database to connect to and run queries against}
    encoding: ${6:# Set the client encoding for the current session (e}
    login_host: ${7:# Host running the database}
    login_password: ${8:# The password this module should use to establish its PostgreSQL session}
    login_unix_socket: ${9:# Path to a Unix domain socket for local connections}
    login_user: ${10:# The username this module should use to establish its PostgreSQL session}
    named_args: ${11:# Dictionary of key-value arguments to pass to the query}
    port: ${12:# Database port to connect to}
    positional_args: ${13:# List of values to be passed as positional arguments to the query}
    query: ${14:# SQL query string or list of queries to run}
    search_path: ${15:# List of schema names to look in}
    session_role: ${16:# Switch to session_role after connecting}
    ssl_cert: ${17:# Specifies the file name of the client SSL certificate}
    ssl_key: ${18:# Specifies the location for the secret key used for the client certificate}
    ssl_mode: ${19:# Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server}
    trust_input: ${20:# If C(false), check whether a value of I(session_role) is potentially dangerous}
  tags:
    - community
    - postgresql
    - postgresql_query]]></content>
  <tabTrigger>community.postgresql.postgresql_query</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Run PostgreSQL queries</description>
</snippet>