<snippet>
  <content><![CDATA[- name: ${1:copies AMI between AWS regions, return new image id}
  community.aws.ec2_ami_copy:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    description: ${6:# An optional human-readable string describing the contents and purpose of the new AMI}
    encrypted: ${7:# Whether or not the destination snapshots of the copied AMI should be encrypted}
    endpoint_url: ${8:# URL to connect to instead of the default AWS endpoints}
    kms_key_id: ${9:# KMS key id used to encrypt the image}
    name: ${10:# The name of the new AMI to copy}
    profile: ${11:# A named AWS profile to use for authentication}
    region: ${12:# The AWS region to use}
    secret_key: ${13:# AWS secret access key}
    session_token: ${14:# AWS STS session token for use with temporary credentials}
    source_image_id: ${15:# The ID of the AMI in source region that should be copied}
    source_region: ${16:# The source region the AMI should be copied from}
    tag_equality: ${17:# Whether to use tags if the source AMI already exists in the target region}
    tags: ${18:# A hash/dictionary of tags to add to the new copied AMI: C('key':'value') and C('key':'value','key':'value')}
    validate_certs: ${19:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    wait: ${20:# Wait for the copied AMI to be in state C(available) before returning}
    wait_timeout: ${21:# How long before wait gives up, in seconds}
  tags:
    - community
    - aws
    - ec2_ami_copy]]></content>
  <tabTrigger>community.aws.ec2_ami_copy</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>copies AMI between AWS regions, return new image id</description>
</snippet>