<snippet>
  <content><![CDATA[- name: ${1:Generate an OpenSSL public key from its private key}
  community.crypto.openssl_publickey:
    attributes: ${2:# The attributes the resulting filesystem object should have}
    backup: ${3:# Create a backup file including a timestamp so you can get the original public key back if you overwrote it with a different one by accident}
    force: ${4:# Should the key be regenerated even it it already exists}
    format: ${5:# The format of the public key}
    group: ${6:# Name of the group that should own the filesystem object, as would be fed to C(chown)}
    mode: ${7:# The permissions the resulting filesystem object should have}
    owner: ${8:# Name of the user that should own the filesystem object, as would be fed to C(chown)}
    path: ${9:# Name of the file in which the generated TLS/SSL public key will be written}
    privatekey_content: ${10:# The content of the TLS/SSL private key from which to generate the public key}
    privatekey_passphrase: ${11:# The passphrase for the private key}
    privatekey_path: ${12:# Path to the TLS/SSL private key from which to generate the public key}
    return_content: ${13:# If set to V(true), will return the (current or generated) public key's content as RV(publickey)}
    select_crypto_backend: ${14:# Determines which crypto backend to use}
    selevel: ${15:# The level part of the SELinux filesystem object context}
    serole: ${16:# The role part of the SELinux filesystem object context}
    setype: ${17:# The type part of the SELinux filesystem object context}
    seuser: ${18:# The user part of the SELinux filesystem object context}
    state: ${19:# Whether the public key should exist or not, taking action if the state is different from what is stated}
    unsafe_writes: ${20:# Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target filesystem object}
  tags:
    - community
    - crypto
    - openssl_publickey]]></content>
  <tabTrigger>community.crypto.openssl_publickey</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generate an OpenSSL public key from its private key</description>
</snippet>