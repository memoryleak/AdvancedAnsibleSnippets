<snippet>
  <content><![CDATA[- name: ${1:Creates a GCP HealthCheck}
  google.cloud.gcp_compute_health_check:
    state: ${2:# Whether the given object should exist in GCP}
    check_interval_sec: ${3:# How often (in seconds) to send a health check}
    description: ${4:# An optional description of this resource}
    healthy_threshold: ${5:# A so-far unhealthy instance will be marked healthy after this many consecutive successes}
    name: ${6:# Name of the resource}
    timeout_sec: ${7:# How long (in seconds) to wait before claiming failure}
    unhealthy_threshold: ${8:# A so-far healthy instance will be marked unhealthy after this many consecutive failures}
    type: ${9:# Specifies the type of the healthCheck, either TCP, SSL, HTTP or HTTPS}
    http_health_check: ${10:# A nested object resource}
    https_health_check: ${11:# A nested object resource}
    tcp_health_check: ${12:# A nested object resource}
    ssl_health_check: ${13:# A nested object resource}
    http2_health_check: ${14:# A nested object resource}
    grpc_health_check: ${15:# A nested object resource}
    project: ${16:# The Google Cloud Platform project to use}
    auth_kind: ${17:# The type of credential used}
    service_account_contents: ${18:# The contents of a Service Account JSON file, either in a dictionary or as a JSON string that represents it}
    service_account_file: ${19:# The path of a Service Account JSON file if serviceaccount is selected as type}
    service_account_email: ${20:# An optional service account email address if machineaccount is selected and the user does not wish to use the default email}
    scopes: ${21:# Array of scopes to be used}
    env_type: ${22:# Specifies which Ansible environment you're running this module within}
  tags:
    - google
    - cloud
    - gcp_compute_health_check]]></content>
  <tabTrigger>google.cloud.gcp_compute_health_check</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates a GCP HealthCheck</description>
</snippet>