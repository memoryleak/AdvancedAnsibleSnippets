<snippet>
  <content><![CDATA[- name: ${1:Manage a host in Icinga2}
  community.general.icinga2_host:
    url: ${2:# HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host}
    use_proxy: ${3:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    validate_certs: ${4:# If C(false), SSL certificates will not be validated}
    url_username: ${5:# The username for use in HTTP basic authentication}
    url_password: ${6:# The password for use in HTTP basic authentication}
    force_basic_auth: ${7:# httplib2, the library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status}
    client_cert: ${8:# PEM formatted certificate chain file to be used for SSL client authentication}
    client_key: ${9:# PEM formatted file that contains your private key to be used for SSL client authentication}
    state: ${10:# Apply feature state}
    name: ${11:# Name used to create / delete the host}
    zone: ${12:# The zone from where this host should be polled}
    template: ${13:# The template used to define the host}
    check_command: ${14:# The command used to check if the host is alive}
    display_name: ${15:# The name used to display the host}
    ip: ${16:# The IP address of the host}
    variables: ${17:# Dictionary of variables}
    force: ${18:# If C(yes) do not get a cached copy}
    http_agent: ${19:# Header to identify as, generally appears in web server logs}
    use_gssapi: ${20:# Use GSSAPI to perform the authentication, typically this is for Kerberos or Kerberos through Negotiate authentication}
  tags:
    - community
    - general
    - icinga2_host]]></content>
  <tabTrigger>community.general.icinga2_host</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage a host in Icinga2</description>
</snippet>