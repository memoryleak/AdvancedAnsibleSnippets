<snippet>
  <content><![CDATA[- name: ${1:Create SSL/TLS certificates with the ACME protocol}
  community.crypto.acme_certificate:
    account_email: ${2:# The email address associated with this account}
    account_key_content: ${3:# Content of the ACME account RSA or Elliptic Curve key}
    account_key_passphrase: ${4:# Phassphrase to use to decode the account key}
    account_key_src: ${5:# Path to a file containing the ACME account RSA or Elliptic Curve key}
    account_uri: ${6:# If specified, assumes that the account URI is as given}
    acme_directory: ${7:# The ACME directory to use}
    acme_version: ${8:# The ACME version of the endpoint}
    agreement: ${9:# URI to a terms of service document you agree to when using the ACME v1 service at O(acme_directory)}
    chain_dest: ${10:# If specified, the intermediate certificate will be written to this file}
    challenge: ${11:# The challenge to be performed}
    csr: ${12:# File containing the CSR for the new certificate}
    csr_content: ${13:# Content of the CSR for the new certificate}
    data: ${14:# The data to validate ongoing challenges}
    deactivate_authzs: ${15:# Deactivate authentication objects (authz) after issuing a certificate, or when issuing the certificate failed}
    dest: ${16:# The destination file for the certificate}
    force: ${17:# Enforces the execution of the challenge and validation, even if an existing certificate is still valid for more than O(remaining_days)}
    fullchain_dest: ${18:# The destination file for the full chain (that is, a certificate followed by chain of intermediate certificates)}
    modify_account: ${19:# Boolean indicating whether the module should create the account if necessary, and update its contact data}
    remaining_days: ${20:# The number of days the certificate must have left being valid}
    request_timeout: ${21:# The time Ansible should wait for a response from the ACME API}
    retrieve_all_alternates: ${22:# When set to V(true), will retrieve all alternate trust chains offered by the ACME CA}
    select_chain: ${23:# Allows to specify criteria by which an (alternate) trust chain can be selected}
    select_crypto_backend: ${24:# Determines which crypto backend to use}
    terms_agreed: ${25:# Boolean indicating whether you agree to the terms of service document}
    validate_certs: ${26:# Whether calls to the ACME directory will validate TLS certificates}
  tags:
    - community
    - crypto
    - acme_certificate]]></content>
  <tabTrigger>community.crypto.acme_certificate</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Create SSL/TLS certificates with the ACME protocol</description>
</snippet>