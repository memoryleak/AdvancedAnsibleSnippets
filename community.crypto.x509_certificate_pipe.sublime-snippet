<snippet>
  <content><![CDATA[- name: ${1:Generate and/or check OpenSSL certificates}
  community.crypto.x509_certificate_pipe:
    content: ${2:# The existing certificate}
    csr_content: ${3:# Content of the Certificate Signing Request (CSR) used to generate this certificate}
    csr_path: ${4:# Path to the Certificate Signing Request (CSR) used to generate this certificate}
    entrust_api_client_cert_key_path: ${5:# The path to the private key of the client certificate used to authenticate to the Entrust Certificate Services (ECS) API}
    entrust_api_client_cert_path: ${6:# The path to the client certificate used to authenticate to the Entrust Certificate Services (ECS) API}
    entrust_api_key: ${7:# The key (password) for authentication to the Entrust Certificate Services (ECS) API}
    entrust_api_specification_path: ${8:# The path to the specification file defining the Entrust Certificate Services (ECS) API configuration}
    entrust_api_user: ${9:# The username for authentication to the Entrust Certificate Services (ECS) API}
    entrust_cert_type: ${10:# Specify the type of certificate requested}
    entrust_not_after: ${11:# The point in time at which the certificate stops being valid}
    entrust_requester_email: ${12:# The email of the requester of the certificate (for tracking purposes)}
    entrust_requester_name: ${13:# The name of the requester of the certificate (for tracking purposes)}
    entrust_requester_phone: ${14:# The phone number of the requester of the certificate (for tracking purposes)}
    force: ${15:# Generate the certificate, even if it already exists}
    ignore_timestamps: ${16:# Whether the 'not before' and 'not after' timestamps should be ignored for idempotency checks}
    ownca_content: ${17:# Content of the CA (Certificate Authority) certificate}
    ownca_create_authority_key_identifier: ${18:# Create a Authority Key Identifier from the CA's certificate}
    ownca_create_subject_key_identifier: ${19:# Whether to create the Subject Key Identifier (SKI) from the public key}
    ownca_digest: ${20:# The digest algorithm to be used for the V(ownca) certificate}
    ownca_not_after: ${21:# The point in time at which the certificate stops being valid}
    ownca_not_before: ${22:# The point in time the certificate is valid from}
    ownca_path: ${23:# Remote absolute path of the CA (Certificate Authority) certificate}
    ownca_privatekey_content: ${24:# Content of the CA (Certificate Authority) private key to use when signing the certificate}
    ownca_privatekey_passphrase: ${25:# The passphrase for the O(ownca_privatekey_path) resp}
    ownca_privatekey_path: ${26:# Path to the CA (Certificate Authority) private key to use when signing the certificate}
    ownca_version: ${27:# The version of the V(ownca) certificate}
    privatekey_content: ${28:# Content of the private key to use when signing the certificate}
    privatekey_passphrase: ${29:# The passphrase for the O(privatekey_path) resp}
    privatekey_path: ${30:# Path to the private key to use when signing the certificate}
    provider: ${31:# Name of the provider to use to generate/retrieve the OpenSSL certificate}
    select_crypto_backend: ${32:# Determines which crypto backend to use}
    selfsigned_create_subject_key_identifier: ${33:# Whether to create the Subject Key Identifier (SKI) from the public key}
    selfsigned_digest: ${34:# Digest algorithm to be used when self-signing the certificate}
    selfsigned_not_after: ${35:# The point in time at which the certificate stops being valid}
    selfsigned_not_before: ${36:# The point in time the certificate is valid from}
    selfsigned_version: ${37:# Version of the V(selfsigned) certificate}
  tags:
    - community
    - crypto
    - x509_certificate_pipe]]></content>
  <tabTrigger>community.crypto.x509_certificate_pipe</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generate and/or check OpenSSL certificates</description>
</snippet>