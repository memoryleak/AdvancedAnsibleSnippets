<snippet>
  <content><![CDATA[- name: ${1:netconf device configuration}
  ansible.netcommon.netconf_config:
    backup: ${2:# This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made}
    backup_options: ${3:# This is a dict object containing configurable options related to backup file path}
    commit: ${4:# This boolean flag controls if the configuration changes should be committed or not after editing the candidate datastore}
    confirm: ${5:# This argument will configure a timeout value for the commit to be confirmed before it is automatically rolled back}
    confirm_commit: ${6:# This argument will execute commit operation on remote device}
    content: ${7:# The configuration data as defined by the device's data models, the value can be either in xml string format or text format or python dictionary representation of JSON format}
    default_operation: ${8:# The default operation for <edit-config> rpc, valid values are I(merge), I(replace) and I(none)}
    delete: ${9:# It instructs the module to delete the configuration from value mentioned in C(target) datastore}
    error_option: ${10:# This option controls the netconf server action after an error occurs while editing the configuration}
    format: ${11:# The format of the configuration provided as value of C(content)}
    get_filter: ${12:# This argument specifies the XML string which acts as a filter to restrict the portions of the data retrieved from the remote device when comparing the before and after state of the device following calls to edit_config}
    lock: ${13:# Instructs the module to explicitly lock the datastore specified as C(target)}
    save: ${14:# The C(save) argument instructs the module to save the configuration in C(target) datastore to the startup-config if changed and if :startup capability is supported by Netconf server}
    source_datastore: ${15:# Name of the configuration datastore to use as the source to copy the configuration to the datastore mentioned by C(target) option}
    target: ${16:# Name of the configuration datastore to be edited}
    validate: ${17:# This boolean flag if set validates the content of datastore given in C(target) option}
  tags:
    - netconf_config]]></content>
  <tabTrigger>ansible.netcommon.netconf_config</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>netconf device configuration</description>
</snippet>