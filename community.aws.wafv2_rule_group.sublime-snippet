<snippet>
  <content><![CDATA[- name: ${1:wafv2_web_acl}
  community.aws.wafv2_rule_group:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    capacity: ${5:# capacity of wafv2 rule group}
    cloudwatch_metrics: ${6:# Enable cloudwatch metric for wafv2 rule group}
    debug_botocore_endpoint_logs: ${7:# Use a C(botocore}
    description: ${8:# Description of wafv2 rule group}
    endpoint_url: ${9:# URL to connect to instead of the default AWS endpoints}
    metric_name: ${10:# Name of cloudwatch metrics}
    name: ${11:# The name of the rule group}
    profile: ${12:# A named AWS profile to use for authentication}
    purge_rules: ${13:# When set to C(no), keep the existing load balancer rules in place}
    purge_tags: ${14:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
    region: ${15:# The AWS region to use}
    rules: ${16:# The Rule statements used to identify the web requests that you want to allow, block, or count}
    sampled_requests: ${17:# Sampled requests, true or false}
    scope: ${18:# Scope of wafv2 rule group}
    secret_key: ${19:# AWS secret access key}
    session_token: ${20:# AWS STS session token for use with temporary credentials}
    state: ${21:# Whether the rule is present or absent}
    tags: ${22:# A dictionary representing the tags to be applied to the resource}
    validate_certs: ${23:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - community
    - aws
    - wafv2_rule_group]]></content>
  <tabTrigger>community.aws.wafv2_rule_group</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>wafv2_web_acl</description>
</snippet>