<snippet>
  <content><![CDATA[- name: ${1:Information module for networks _clients}
  cisco.meraki.networks_clients_info:
    description: ${2:# Description query parameter}
    direction: ${3:# direction (string), direction to paginate, either 'next' (default) or 'prev' page}
    endingBefore: ${4:# EndingBefore query parameter}
    headers: ${5:# Additional headers}
    ip: ${6:# Ip query parameter}
    ip6: ${7:# Ip6 query parameter}
    ip6Local: ${8:# Ip6Local query parameter}
    mac: ${9:# Mac query parameter}
    meraki_action_batch_retry_wait_time: ${10:# meraki_action_batch_retry_wait_time (integer), action batch concurrency error retry wait time}
    meraki_api_key: ${11:# meraki_api_key (string), API key generated in dashboard; can also be set as an environment variable MERAKI_DASHBOARD_API_KEY}
    meraki_base_url: ${12:# meraki_base_url (string), preceding all endpoint resources}
    meraki_be_geo_id: ${13:# meraki_be_geo_id (string), optional partner identifier for API usage tracking; can also be set as an environment variable BE_GEO_ID}
    meraki_caller: ${14:# meraki_caller (string), optional identifier for API usage tracking; can also be set as an environment variable MERAKI_PYTHON_SDK_CALLER}
    meraki_certificate_path: ${15:# meraki_certificate_path (string), path for TLS/SSL certificate verification if behind local proxy}
    meraki_inherit_logging_config: ${16:# meraki_inherit_logging_config (boolean), Inherits your own logger instance}
    meraki_log_file_prefix: ${17:# meraki_log_file_prefix (string), log file name appended with date and timestamp}
    meraki_log_path: ${18:# log_path (string), path to output log; by default, working directory of script if not specified}
    meraki_maximum_retries: ${19:# meraki_maximum_retries (integer), retry up to this many times when encountering 429s or other server-side errors}
    meraki_nginx_429_retry_wait_time: ${20:# meraki_nginx_429_retry_wait_time (integer), Nginx 429 retry wait time}
    meraki_output_log: ${21:# meraki_output_log (boolean), create an output log file?}
    meraki_print_console: ${22:# meraki_print_console (boolean), print logging output to console?}
    meraki_requests_proxy: ${23:# meraki_requests_proxy (string), proxy server and port, if needed, for HTTPS}
    meraki_retry_4xx_error: ${24:# meraki_retry_4xx_error (boolean), retry if encountering other 4XX error (besides 429)?}
    meraki_retry_4xx_error_wait_time: ${25:# meraki_retry_4xx_error_wait_time (integer), other 4XX error retry wait time}
    meraki_simulate: ${26:# meraki_simulate (boolean), simulate POST/PUT/DELETE calls to prevent changes?}
    meraki_single_request_timeout: ${27:# meraki_single_request_timeout (integer), maximum number of seconds for each API call}
    meraki_suppress_logging: ${28:# meraki_suppress_logging (boolean), disable all logging? you're on your own then!}
    meraki_use_iterator_for_get_pages: ${29:# meraki_use_iterator_for_get_pages (boolean), list* methods will return an iterator with each object instead of a complete list with all items}
    meraki_wait_on_rate_limit: ${30:# meraki_wait_on_rate_limit (boolean), retry if 429 rate limit error encountered?}
    networkId: ${31:# NetworkId path parameter}
    os: ${32:# Os query parameter}
    perPage: ${33:# PerPage query parameter}
    pskGroup: ${34:# PskGroup query parameter}
    recentDeviceConnections: ${35:# RecentDeviceConnections query parameter}
    startingAfter: ${36:# StartingAfter query parameter}
    statuses: ${37:# Statuses query parameter}
    t0: ${38:# T0 query parameter}
    timespan: ${39:# Timespan query parameter}
    total_pages: ${40:# total_pages(int), use with perPage to get total results up to total_pages*perPage; -1 for all pages}
    vlan: ${41:# Vlan query parameter}
  tags:
    - cisco
    - meraki
    - networks_clients_info]]></content>
  <tabTrigger>cisco.meraki.networks_clients_info</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Information module for networks _clients</description>
</snippet>