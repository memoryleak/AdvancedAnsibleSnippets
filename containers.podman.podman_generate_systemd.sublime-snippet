<snippet>
  <content><![CDATA[- name: ${1:Generate systemd unit from a pod or a container}
  containers.podman.podman_generate_systemd:
    after: ${2:# Add the systemd unit after (C(After=)) option, that ordering dependencies between the list of dependencies and this service}
    container_prefix: ${3:# Set the systemd unit name prefix for containers}
    dest: ${4:# Destination of the generated systemd unit file(s)}
    env: ${5:# Set environment variables to the systemd unit files}
    executable: ${6:# C(Podman) executable name or full path}
    force: ${7:# Replace the systemd unit file(s) even if it already exists}
    name: ${8:# Name of the pod or container to export}
    new: ${9:# Generate unit files that create containers and pods, not only start them}
    no_header: ${10:# Do not generate the header including meta data such as the Podman version and the timestamp}
    pod_prefix: ${11:# Set the systemd unit name prefix for pods}
    requires: ${12:# Set the systemd unit requires (Requires=) option}
    restart_policy: ${13:# Restart policy of the service}
    restart_sec: ${14:# Configures the time to sleep before restarting a service (as configured with restart-policy)}
    separator: ${15:# Systemd unit name separator between the name/id of a container/pod and the prefix}
    start_timeout: ${16:# Override the default start timeout for the container with the given value in seconds}
    stop_timeout: ${17:# Override the default stop timeout for the container with the given value in seconds}
    use_names: ${18:# Use name of the containers for the start, stop, and description in the unit file}
    wants: ${19:# Add the systemd unit wants (C(Wants=)) option, that this service is (weak) dependent on}
  tags:
    - containers
    - podman
    - podman_generate_systemd]]></content>
  <tabTrigger>containers.podman.podman_generate_systemd</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generate systemd unit from a pod or a container</description>
</snippet>