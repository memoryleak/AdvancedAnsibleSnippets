<snippet>
  <content><![CDATA[- name: ${1:Allows administration of Keycloak client authorization scopes via Keycloak API}
  community.general.keycloak_authz_authorization_scope:
    auth_client_id: ${2:# OpenID Connect C(client_id) to authenticate to the API with}
    auth_client_secret: ${3:# Client Secret to use in conjunction with O(auth_client_id) (if required)}
    auth_keycloak_url: ${4:# URL to the Keycloak instance}
    auth_password: ${5:# Password to authenticate for API access with}
    auth_realm: ${6:# Keycloak realm name to authenticate to for API access}
    auth_username: ${7:# Username to authenticate for API access with}
    client_id: ${8:# The C(clientId) of the Keycloak client that should have the authorization scope}
    connection_timeout: ${9:# Controls the HTTP connections timeout period (in seconds) to Keycloak API}
    display_name: ${10:# The display name of the authorization scope}
    http_agent: ${11:# Configures the HTTP User-Agent header}
    icon_uri: ${12:# The icon URI for the authorization scope}
    name: ${13:# Name of the authorization scope to create}
    realm: ${14:# The name of the Keycloak realm the Keycloak client is in}
    state: ${15:# State of the authorization scope}
    token: ${16:# Authentication token for Keycloak API}
    validate_certs: ${17:# Verify TLS certificates (do not disable this in production)}
  tags:
    - community
    - general
    - keycloak_authz_authorization_scope]]></content>
  <tabTrigger>community.general.keycloak_authz_authorization_scope</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Allows administration of Keycloak client authorization scopes via Keycloak API</description>
</snippet>