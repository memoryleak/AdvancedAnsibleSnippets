<snippet>
  <content><![CDATA[- name: ${1:Creates a GCP RegionUrlMap}
  google.cloud.gcp_compute_region_url_map:
    access_token: ${2:# An OAuth2 access token if credential type is accesstoken}
    auth_kind: ${3:# The type of credential used}
    default_service: ${4:# The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match}
    default_url_redirect: ${5:# When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect}
    description: ${6:# An optional description of this resource}
    env_type: ${7:# Specifies which Ansible environment you're running this module within}
    host_rules: ${8:# The list of HostRules to use against the URL}
    name: ${9:# Name of the resource}
    path_matchers: ${10:# The list of named PathMatchers to use against the URL}
    project: ${11:# The Google Cloud Platform project to use}
    region: ${12:# A reference to the region where the url map resides}
    scopes: ${13:# Array of scopes to be used}
    service_account_contents: ${14:# The contents of a Service Account JSON file, either in a dictionary or as a JSON string that represents it}
    service_account_email: ${15:# An optional service account email address if machineaccount is selected and the user does not wish to use the default email}
    service_account_file: ${16:# The path of a Service Account JSON file if serviceaccount is selected as type}
    state: ${17:# Whether the given object should exist in GCP}
    tests: ${18:# The list of expected URL mappings}
  tags:
    - google
    - cloud
    - gcp_compute_region_url_map]]></content>
  <tabTrigger>google.cloud.gcp_compute_region_url_map</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates a GCP RegionUrlMap</description>
</snippet>