<snippet>
  <content><![CDATA[- name: ${1:Performs validation of IAM policies}
  community.aws.accessanalyzer_validate_policy_info:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${5:# Use a C(botocore}
    endpoint_url: ${6:# URL to connect to instead of the default AWS endpoints}
    locale: ${7:# The locale to use for localizing the findings}
    policy: ${8:# A properly json formatted policy}
    policy_type: ${9:# The type of policy to validate}
    profile: ${10:# A named AWS profile to use for authentication}
    region: ${11:# The AWS region to use}
    resource_type: ${12:# The type of resource to attach to your resource policy}
    results_filter: ${13:# Filter the findings and limit them to specific finding types}
    secret_key: ${14:# AWS secret access key}
    session_token: ${15:# AWS STS session token for use with temporary credentials}
    validate_certs: ${16:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - community
    - aws
    - accessanalyzer_validate_policy_info]]></content>
  <tabTrigger>community.aws.accessanalyzer_validate_policy_info</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Performs validation of IAM policies</description>
</snippet>