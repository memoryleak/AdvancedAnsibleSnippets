<snippet>
  <content><![CDATA[- name: ${1:Request, stop, reboot or cancel spot instance}
  amazon.aws.ec2_spot_instance:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    client_token: ${5:# The idempotency token you provided when you launched the instance, if applicable}
    count: ${6:# Number of instances to launch}
    debug_botocore_endpoint_logs: ${7:# Use a C(botocore}
    endpoint_url: ${8:# URL to connect to instead of the default AWS endpoints}
    interruption: ${9:# The behavior when a Spot Instance is interrupted}
    launch_group: ${10:# Launch group for spot requests, see U(https://docs}
    launch_specification: ${11:# The launch specification}
    profile: ${12:# A named AWS profile to use for authentication}
    region: ${13:# The AWS region to use}
    secret_key: ${14:# AWS secret access key}
    session_token: ${15:# AWS STS session token for use with temporary credentials}
    spot_instance_request_ids: ${16:# List of strings with IDs of spot requests to be cancelled}
    spot_price: ${17:# Maximum spot price to bid}
    spot_type: ${18:# The type of spot request}
    state: ${19:# Whether the spot request should be created or removed}
    tags: ${20:# A dictionary of key-value pairs for tagging the Spot Instance request on creation}
    terminate_instances: ${21:# Boolean value to set whether or not to terminate instances associated to spot request}
    validate_certs: ${22:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    zone_group: ${23:# Name for logical grouping of spot requests}
  tags:
    - amazon
    - aws
    - ec2_spot_instance]]></content>
  <tabTrigger>amazon.aws.ec2_spot_instance</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Request, stop, reboot or cancel spot instance</description>
</snippet>