<snippet>
  <content><![CDATA[- name: ${1:Module to manage QoS entries in ovirt}
  ovirt.ovirt.ovirt_qos:
    id: ${2:# ID of the QoS to manage}
    name: ${3:# Name of QoS to manage}
    description: ${4:# Description of the QoS}
    data_center: ${5:# Name of the data center where the QoS entry should be created}
    max_iops: ${6:# The max number of read/write iops}
    write_iops: ${7:# The max number of write iops}
    read_iops: ${8:# The max number of read iops}
    max_throughput: ${9:# The max number of read/write throughput}
    write_throughput: ${10:# The max number of write throughput}
    read_throughput: ${11:# The max number of read throughput}
    cpu_limit: ${12:# The maximum processing capability in %}
    inbound_average: ${13:# The desired average inbound bit rate in Mbps (Megabits per sec)}
    inbound_peak: ${14:# The maximum inbound rate in Mbps (Megabits per sec)}
    inbound_burst: ${15:# The amount of data that can be delivered in a single burst, in MB}
    outbound_average: ${16:# The desired average outbound bit rate in Mbps (Megabits per sec)}
    outbound_peak: ${17:# The maximum outbound rate in Mbps (Megabits per sec)}
    outbound_burst: ${18:# The amount of data that can be sent in a single burst, in MB}
    outbound_average_linkshare: ${19:# Weighted share}
    outbound_average_upperlimit: ${20:# The maximum bandwidth to be used by a network in Mbps (Megabits per sec)}
    outbound_average_realtime: ${21:# The committed rate in Mbps (Megabits per sec)}
    type: ${22:# The type of QoS}
    state: ${23:# Should the QoS be present/absent}
    wait: ${24:# C(yes) if the module should wait for the entity to get into desired state}
    fetch_nested: ${25:# If I(True) the module will fetch additional data from the API}
    nested_attributes: ${26:# Specifies list of the attributes which should be fetched from the API}
    auth: ${27:# Dictionary with values needed to create HTTP/HTTPS connection to oVirt:}
    timeout: ${28:# The amount of time in seconds the module should wait for the instance to get into desired state}
    poll_interval: ${29:# Number of the seconds the module waits until another poll request on entity status is sent}
  tags:
    - ovirt
    - ovirt
    - ovirt_qos]]></content>
  <tabTrigger>ovirt.ovirt.ovirt_qos</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module to manage QoS entries in ovirt</description>
</snippet>