<snippet>
  <content><![CDATA[- name: ${1:Installs/uninstalls an installable package}
  ansible.windows.win_package:
    arguments: ${2:# Any arguments the installer needs to either install or uninstall the package}
    chdir: ${3:# Set the specified path as the current working directory before installing or uninstalling a package}
    creates_path: ${4:# Will check the existence of the path specified and use the result to determine whether the package is already installed}
    creates_service: ${5:# Will check the existing of the service specified and use the result to determine whether the package is already installed}
    creates_version: ${6:# Will check the file version property of the file at C(creates_path) and use the result to determine whether the package is already installed}
    expected_return_code: ${7:# One or more return codes from the package installation that indicates success}
    log_path: ${8:# Specifies the path to a log file that is persisted after a package is installed or uninstalled}
    password: ${9:# The password for C(user_name), must be set when C(user_name) is}
    path: ${10:# Location of the package to be installed or uninstalled}
    product_id: ${11:# The product id of the installed packaged}
    provider: ${12:# Set the package provider to use when searching for a package}
    state: ${13:# Whether to install or uninstall the package}
    username: ${14:# Username of an account with access to the package if it is located on a file share}
    wait_for_children: ${15:# The module will wait for the process it spawns to finish but any processes spawned in that child process as ignored}
    url_method: ${16:# The HTTP Method of the request}
    follow_redirects: ${17:# Whether or the module should follow redirects}
    headers: ${18:# Extra headers to set on the request}
    http_agent: ${19:# Header to identify as, generally appears in web server logs}
    maximum_redirection: ${20:# Specify how many times the module will redirect a connection to an alternative URI before the connection fails}
    url_timeout: ${21:# Specifies how long the request can be pending before it times out (in seconds)}
    validate_certs: ${22:# If C(no), SSL certificates will not be validated}
    client_cert: ${23:# The path to the client certificate (}
    client_cert_password: ${24:# The password for I(client_cert) if the cert is password protected}
    force_basic_auth: ${25:# By default the authentication header is only sent when a webservice responses to an initial request with a 401 status}
    url_username: ${26:# The username to use for authentication}
    url_password: ${27:# The password for I(url_username)}
    use_default_credential: ${28:# Uses the current user's credentials when authenticating with a server protected with C(NTLM), C(Kerberos), or C(Negotiate) authentication}
    use_proxy: ${29:# If C(no), it will not use the proxy defined in IE for the current user}
    proxy_url: ${30:# An explicit proxy to use for the request}
    proxy_username: ${31:# The username to use for proxy authentication}
    proxy_password: ${32:# The password for I(proxy_username)}
    proxy_use_default_credential: ${33:# Uses the current user's credentials when authenticating with a proxy host protected with C(NTLM), C(Kerberos), or C(Negotiate) authentication}
  tags:
    - ansible
    - windows
    - win_package]]></content>
  <tabTrigger>ansible.windows.win_package</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Installs/uninstalls an installable package</description>
</snippet>