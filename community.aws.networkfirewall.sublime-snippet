<snippet>
  <content><![CDATA[- name: ${1:manage AWS Network Firewall firewalls}
  community.aws.networkfirewall:
    access_key: ${2:# AWS access key ID}
    arn: ${3:# The ARN of the firewall}
    aws_ca_bundle: ${4:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${5:# A dictionary to modify the botocore configuration}
    debug_botocore_endpoint_logs: ${6:# Use a C(botocore}
    delete_protection: ${7:# When I(delete_protection=True), the firewall is protected from deletion}
    description: ${8:# A description for the firewall}
    endpoint_url: ${9:# URL to connect to instead of the default AWS endpoints}
    name: ${10:# The name of the firewall}
    policy: ${11:# The ARN of the Network Firewall policy to use for the firewall}
    policy_change_protection: ${12:# When I(policy_change_protection=True), the firewall is protected from changes to which policy is attached to the firewall}
    profile: ${13:# A named AWS profile to use for authentication}
    purge_subnets: ${14:# If I(purge_subnets=true), existing subnets will be removed from the firewall as necessary to match exactly what is defined by I(subnets)}
    purge_tags: ${15:# If I(purge_tags=true) and I(tags) is set, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter}
    region: ${16:# The AWS region to use}
    secret_key: ${17:# AWS secret access key}
    session_token: ${18:# AWS STS session token for use with temporary credentials}
    state: ${19:# Create or remove the firewall}
    subnet_change_protection: ${20:# When I(subnet_change_protection=True), the firewall is protected from changes to which subnets is attached to the firewall}
    subnets: ${21:# The ID of the subnets to which the firewall will be associated}
    tags: ${22:# A dictionary representing the tags to be applied to the resource}
    validate_certs: ${23:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
    wait: ${24:# On creation, whether to wait for the firewall to reach the C(READY) state}
    wait_timeout: ${25:# Maximum time, in seconds, to wait for the firewall to reach the expected state}
  tags:
    - community
    - aws
    - networkfirewall]]></content>
  <tabTrigger>community.aws.networkfirewall</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>manage AWS Network Firewall firewalls</description>
</snippet>