<snippet>
  <content><![CDATA[- name: ${1:Manage Cloud AWS Provider (cloud:AwsProvider)}
  cisco.aci.aci_cloud_aws_provider:
    access_key_id: ${2:# Cloud Access Key ID}
    account_id: ${3:# AWS Account ID}
    is_account_in_org: ${4:# Is Account in Organization}
    is_trusted: ${5:# Trusted Tenant}
    secret_access_key: ${6:# Cloud Secret Access Key}
    tenant: ${7:# Name of tenant}
    state: ${8:# Use C(present) or C(absent) for adding or removing}
    host: ${9:# IP Address or hostname of APIC resolvable by Ansible control host}
    port: ${10:# Port number to be used for REST connection}
    username: ${11:# The username to use for authentication}
    password: ${12:# The password to use for authentication}
    private_key: ${13:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    certificate_name: ${14:# The X}
    output_level: ${15:# Influence the output of this ACI module}
    timeout: ${16:# The socket level timeout in seconds}
    use_proxy: ${17:# If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${18:# If C(no), an HTTP connection will be used instead of the default HTTPS connection}
    validate_certs: ${19:# If C(no), SSL certificates will not be validated}
    output_path: ${20:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    annotation: ${21:# User-defined string for annotating an object}
    owner_key: ${22:# User-defined string for the ownerKey attribute of an ACI object}
    owner_tag: ${23:# User-defined string for the ownerTag attribute of an ACI object}
  tags:
    - cisco
    - aci
    - aci_cloud_aws_provider]]></content>
  <tabTrigger>cisco.aci.aci_cloud_aws_provider</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage Cloud AWS Provider (cloud:AwsProvider)</description>
</snippet>