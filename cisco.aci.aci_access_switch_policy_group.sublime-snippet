<snippet>
  <content><![CDATA[- name: ${1:Manage Access Switch Policy Groups (infra:AccNodePGrp and infra:SpineAccNodePGrp)}
  cisco.aci.aci_access_switch_policy_group:
    annotation: ${2:# User-defined string for annotating an object}
    bfd_ipv4_policy: ${3:# The BFD IPv4 policy bound to the access switch policy group}
    bfd_ipv6_policy: ${4:# The BFD IPv6 policy bound to the access switch policy group}
    bfd_multihop_ipv4_policy: ${5:# The BFD multihop IPv4 policy bound to the access switch policy group}
    bfd_multihop_ipv6_policy: ${6:# The BFD multihop IPv6 policy bound to the access switch policy group}
    cdp_policy: ${7:# The CDP policy bound to the access switch policy group}
    certificate_name: ${8:# The X}
    copp_policy: ${9:# The CoPP policy bound to the access switch policy group}
    copp_pre_filter_policy: ${10:# The CoPP pre-filter policy bound to the access switch policy group}
    description: ${11:# The description of the access switch policy group}
    equipment_flash_policy: ${12:# The equipment flash policy bound to the access switch policy group}
    fast_link_failover_policy: ${13:# The fast link failover policy bound to the access switch policy group}
    fibre_channel_node_policy: ${14:# The fibre channel node policy bound to the access switch policy group}
    fibre_channel_san_policy: ${15:# The fibre channel SAN policy bound to the access switch policy group}
    forward_scale_profile_policy: ${16:# The forward scale profile policy bound to the access switch policy group}
    host: ${17:# IP Address or hostname of APIC resolvable by Ansible control host}
    lldp_policy: ${18:# The LLDP policy bound to the access switch policy group}
    monitoring_policy: ${19:# The monitoring policy bound to the access switch policy group}
    name: ${20:# The name of the access switch policy group}
    netflow_node_policy: ${21:# The netflow node policy bound to the access switch policy group}
    node_802_1x_authentication_policy: ${22:# The 802}
    output_level: ${23:# Influence the output of this ACI module}
    output_path: ${24:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    owner_key: ${25:# User-defined string for the ownerKey attribute of an ACI object}
    owner_tag: ${26:# User-defined string for the ownerTag attribute of an ACI object}
    password: ${27:# The password to use for authentication}
    poe_node_policy: ${28:# The PoE node policy bound to the access switch policy group}
    port: ${29:# Port number to be used for REST connection}
    private_key: ${30:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    ptp_node_policy: ${31:# The PTP node policy bound to the access switch policy group}
    spanning_tree_policy: ${32:# The spanning tree policy bound to the access switch policy group}
    state: ${33:# Use C(present) or C(absent) for adding or removing}
    suppress_previous: ${34:# If C(true), a GET to check previous will not be sent before a POST update to APIC}
    suppress_verification: ${35:# If C(true), a verifying GET will not be sent after a POST update to APIC}
    switch_type: ${36:# Whether this is a leaf or spine policy group}
    sync_e_node_policy: ${37:# The SyncE node policy bound to the access switch policy group}
    timeout: ${38:# The socket level timeout in seconds}
    usb_configuration_policy: ${39:# The USB configuration policy bound to the access switch policy group}
    use_proxy: ${40:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${41:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${42:# The username to use for authentication}
    validate_certs: ${43:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_access_switch_policy_group]]></content>
  <tabTrigger>cisco.aci.aci_access_switch_policy_group</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage Access Switch Policy Groups (infra:AccNodePGrp and infra:SpineAccNodePGrp)</description>
</snippet>