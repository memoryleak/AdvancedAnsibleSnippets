<snippet>
  <content><![CDATA[- name: ${1:Manage IAM server certificates for use on ELBs and CloudFront}
  community.aws.iam_server_certificate:
    access_key: ${2:# AWS access key ID}
    aws_ca_bundle: ${3:# The location of a CA Bundle to use when validating SSL certificates}
    aws_config: ${4:# A dictionary to modify the botocore configuration}
    cert: ${5:# The content of the certificate body in PEM encoded format}
    cert_chain: ${6:# The content of the CA certificate chain in PEM encoded format}
    debug_botocore_endpoint_logs: ${7:# Use a C(botocore}
    dup_ok: ${8:# By default the module will not upload a certificate that is already uploaded into AWS}
    endpoint_url: ${9:# URL to connect to instead of the default AWS endpoints}
    key: ${10:# The content of the private key in PEM encoded format}
    name: ${11:# Name of certificate to add, update or remove}
    new_name: ${12:# When I(state=present), this will update the name of the cert}
    new_path: ${13:# When I(state=present), this will update the path of the cert}
    path: ${14:# When creating or updating, specify the desired path of the certificate}
    profile: ${15:# A named AWS profile to use for authentication}
    region: ${16:# The AWS region to use}
    secret_key: ${17:# AWS secret access key}
    session_token: ${18:# AWS STS session token for use with temporary credentials}
    state: ${19:# Whether to create (or update) or delete the certificate}
    validate_certs: ${20:# When set to C(false), SSL certificates will not be validated for communication with the AWS APIs}
  tags:
    - community
    - aws
    - iam_server_certificate]]></content>
  <tabTrigger>community.aws.iam_server_certificate</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage IAM server certificates for use on ELBs and CloudFront</description>
</snippet>