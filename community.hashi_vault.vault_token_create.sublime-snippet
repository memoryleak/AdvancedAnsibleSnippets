<snippet>
  <content><![CDATA[- name: ${1:Create a HashiCorp Vault token}
  community.hashi_vault.vault_token_create:
    auth_method: ${2:# Authentication method to be used}
    aws_access_key: ${3:# The AWS access key to use}
    aws_iam_server_id: ${4:# If specified, sets the value to use for the C(X-Vault-AWS-IAM-Server-ID) header as part of C(GetCallerIdentity) request}
    aws_profile: ${5:# The AWS profile}
    aws_secret_key: ${6:# The AWS secret key that corresponds to the access key}
    aws_security_token: ${7:# The AWS security token if using temporary access and secret keys}
    azure_client_id: ${8:# The client ID (also known as application ID) of the Azure AD service principal or managed identity}
    azure_client_secret: ${9:# The client secret of the Azure AD service principal}
    azure_resource: ${10:# The resource URL for the application registered in Azure Active Directory}
    azure_tenant_id: ${11:# The Azure Active Directory Tenant ID (also known as the Directory ID) of the service principal}
    ca_cert: ${12:# Path to certificate to use for authentication}
    cert_auth_private_key: ${13:# For C(cert) auth, path to the private key file to authenticate with, in PEM format}
    cert_auth_public_key: ${14:# For C(cert) auth, path to the certificate file to authenticate with, in PEM format}
    display_name: ${15:# The display name of the token}
    entity_alias: ${16:# Name of the entity alias to associate with during token creation}
    explicit_max_ttl: ${17:# If set, the token will have an explicit max TTL set upon it}
    id: ${18:# The ID of the client token}
    jwt: ${19:# The JSON Web Token (JWT) to use for JWT authentication to Vault}
    meta: ${20:# A dict of string to string valued metadata}
    mount_point: ${21:# Vault mount point}
    namespace: ${22:# Vault namespace where secrets reside}
    no_default_policy: ${23:# If C(true) the default policy will not be contained in this token's policy set}
    no_parent: ${24:# This option only has effect if used by a C(root) or C(sudo) caller and only when I(orphan=false)}
    num_uses: ${25:# The maximum uses for the given token}
    orphan: ${26:# When C(true), uses the C(/create-orphan) API endpoint, which requires C(sudo) (but not C(root)) to create an orphan}
    password: ${27:# Authentication password}
    period: ${28:# If specified, the token will be periodic}
    policies: ${29:# A list of policies for the token}
    proxies: ${30:# URL(s) to the proxies used to access the Vault service}
    region: ${31:# The AWS region for which to create the connection}
    renewable: ${32:# Set to C(false) to disable the ability of the token to be renewed past its initial TTL}
    retries: ${33:# Allows for retrying on errors, based on the L(Retry class in the urllib3 library,https://urllib3}
    retry_action: ${34:# Controls whether and how to show messages on I(retries)}
    role_id: ${35:# Vault Role ID or name}
    role_name: ${36:# The name of the token role}
    secret_id: ${37:# Secret ID to be used for Vault AppRole authentication}
    timeout: ${38:# Sets the connection timeout in seconds}
    token: ${39:# Vault token}
    token_file: ${40:# If no token is specified, will try to read the token from this file in I(token_path)}
    token_path: ${41:# If no token is specified, will try to read the I(token_file) from this path}
    token_validate: ${42:# For token auth, will perform a C(lookup-self) operation to determine the token's validity before using it}
    ttl: ${43:# The TTL period of the token, provided as C(1h) for example, where hour is the largest suffix}
    type: ${44:# The token type}
    url: ${45:# URL to the Vault service}
    username: ${46:# Authentication user name}
    validate_certs: ${47:# Controls verification and validation of SSL certificates, mostly you only want to turn off with self signed ones}
    wrap_ttl: ${48:# Specifies response wrapping token creation with duration}
  tags:
    - community
    - hashi_vault
    - vault_token_create]]></content>
  <tabTrigger>community.hashi_vault.vault_token_create</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Create a HashiCorp Vault token</description>
</snippet>