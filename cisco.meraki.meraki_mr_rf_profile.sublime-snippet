<snippet>
  <content><![CDATA[- name: ${1:Manage RF profiles for Meraki wireless networks}
  cisco.meraki.meraki_mr_rf_profile:
    state: ${2:# Query, edit, or delete wireless RF profile settings}
    net_name: ${3:# Name of network}
    net_id: ${4:# ID of network}
    profile_id: ${5:# Unique identifier of existing RF profile}
    band_selection_type: ${6:# Sets whether band selection is assigned per access point or SSID}
    min_bitrate_type: ${7:# Type of minimum bitrate}
    name: ${8:# The unique name of the new profile}
    client_balancing_enabled: ${9:# Steers client to best available access point}
    ap_band_settings: ${10:# Settings that will be enabled if selectionType is set to 'ap'}
    five_ghz_settings: ${11:# Settings related to 5Ghz band}
    two_four_ghz_settings: ${12:# Settings related to 2}
    auth_key: ${13:# Authentication key provided by the dashboard}
    host: ${14:# Hostname for Meraki dashboard}
    use_proxy: ${15:# If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_https: ${16:# If C(no), it will use HTTP}
    output_format: ${17:# Instructs module whether response keys should be snake case (ex}
    output_level: ${18:# Set amount of debug output during module execution}
    timeout: ${19:# Time to timeout for HTTP requests}
    validate_certs: ${20:# Whether to validate HTTP certificates}
    org_name: ${21:# Name of organization}
    org_id: ${22:# ID of organization}
    rate_limit_retry_time: ${23:# Number of seconds to retry if rate limiter is triggered}
    internal_error_retry_time: ${24:# Number of seconds to retry if server returns an internal server error}
  tags:
    - cisco
    - meraki
    - meraki_mr_rf_profile]]></content>
  <tabTrigger>cisco.meraki.meraki_mr_rf_profile</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage RF profiles for Meraki wireless networks</description>
</snippet>