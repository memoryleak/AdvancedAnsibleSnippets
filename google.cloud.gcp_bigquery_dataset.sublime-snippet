<snippet>
  <content><![CDATA[- name: ${1:Creates a GCP Dataset}
  google.cloud.gcp_bigquery_dataset:
    state: ${2:# Whether the given object should exist in GCP}
    name: ${3:# Dataset name}
    access: ${4:# An array of objects that define dataset access for one or more entities}
    dataset_reference: ${5:# A reference that identifies the dataset}
    default_table_expiration_ms: ${6:# The default lifetime of all tables in the dataset, in milliseconds}
    default_partition_expiration_ms: ${7:# The default partition expiration for all partitioned tables in the dataset, in milliseconds}
    description: ${8:# A user-friendly description of the dataset}
    friendly_name: ${9:# A descriptive name for the dataset}
    labels: ${10:# The labels associated with this dataset}
    location: ${11:# The geographic location where the dataset should reside}
    default_encryption_configuration: ${12:# The default encryption key for all tables in the dataset}
    project: ${13:# The Google Cloud Platform project to use}
    auth_kind: ${14:# The type of credential used}
    service_account_contents: ${15:# The contents of a Service Account JSON file, either in a dictionary or as a JSON string that represents it}
    service_account_file: ${16:# The path of a Service Account JSON file if serviceaccount is selected as type}
    service_account_email: ${17:# An optional service account email address if machineaccount is selected and the user does not wish to use the default email}
    scopes: ${18:# Array of scopes to be used}
    env_type: ${19:# Specifies which Ansible environment you're running this module within}
  tags:
    - google
    - cloud
    - gcp_bigquery_dataset]]></content>
  <tabTrigger>google.cloud.gcp_bigquery_dataset</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Creates a GCP Dataset</description>
</snippet>