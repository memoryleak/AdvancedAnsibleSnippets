<snippet>
  <content><![CDATA[- name: ${1:Manage Bridge Domains (BD) objects (fv:BD)}
  cisco.aci.aci_bd:
    annotation: ${2:# User-defined string for annotating an object}
    arp_flooding: ${3:# Determines if the Bridge Domain should flood ARP traffic}
    bd: ${4:# The name of the Bridge Domain}
    bd_type: ${5:# The type of traffic on the Bridge Domain}
    certificate_name: ${6:# The X}
    description: ${7:# Description for the Bridge Domain}
    enable_multicast: ${8:# Determines if PIM is enabled}
    enable_routing: ${9:# Determines if IP forwarding should be allowed}
    endpoint_clear: ${10:# Clears all End Points in all Leaves when C(true)}
    endpoint_move_detect: ${11:# Determines if GARP should be enabled to detect when End Points move}
    endpoint_retention_action: ${12:# Determines if the Bridge Domain should inherit or resolve the End Point Retention Policy}
    endpoint_retention_policy: ${13:# The name of the End Point Retention Policy the Bridge Domain should use when overriding the default End Point Retention Policy}
    host: ${14:# IP Address or hostname of APIC resolvable by Ansible control host}
    igmp_snoop_policy: ${15:# The name of the IGMP Snooping Policy the Bridge Domain should use when overriding the default IGMP Snooping Policy}
    ip_learning: ${16:# Determines if the Bridge Domain should learn End Point IPs}
    ipv6_l3_unknown_multicast: ${17:# Determines the forwarding method to use for IPv6 unknown multicast destinations}
    ipv6_nd_policy: ${18:# The name of the IPv6 Neighbor Discovery Policy the Bridge Domain should use when overridding the default IPV6 ND Policy}
    l2_unknown_unicast: ${19:# Determines what forwarding method to use for unknown l2 destinations}
    l3_unknown_multicast: ${20:# Determines the forwarding method to use for unknown multicast destinations}
    limit_ip_learn: ${21:# Determines if the BD should limit IP learning to only subnets owned by the Bridge Domain}
    mac_address: ${22:# The MAC Address to assign to the C(bd) instead of using the default}
    multi_dest: ${23:# Determines the forwarding method for L2 multicast, broadcast, and link layer traffic}
    name_alias: ${24:# The alias for the current object}
    output_level: ${25:# Influence the output of this ACI module}
    output_path: ${26:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    owner_key: ${27:# User-defined string for the ownerKey attribute of an ACI object}
    owner_tag: ${28:# User-defined string for the ownerTag attribute of an ACI object}
    password: ${29:# The password to use for authentication}
    port: ${30:# Port number to be used for REST connection}
    private_key: ${31:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    route_profile: ${32:# The Route Profile to associate with the Bridge Domain}
    route_profile_l3out: ${33:# The L3 Out that contains the associated Route Profile}
    state: ${34:# Use C(present) or C(absent) for adding or removing}
    tenant: ${35:# The name of the Tenant}
    timeout: ${36:# The socket level timeout in seconds}
    use_proxy: ${37:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${38:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${39:# The username to use for authentication}
    validate_certs: ${40:# If C(false), SSL certificates will not be validated}
    vrf: ${41:# The name of the VRF}
  tags:
    - cisco
    - aci
    - aci_bd]]></content>
  <tabTrigger>cisco.aci.aci_bd</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage Bridge Domains (BD) objects (fv:BD)</description>
</snippet>