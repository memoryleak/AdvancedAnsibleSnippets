<snippet>
  <content><![CDATA[- name: ${1:Manage Bridge Domains (BD) objects (fv:BD)}
  cisco.aci.aci_bd:
    arp_flooding: ${2:# Determines if the Bridge Domain should flood ARP traffic}
    bd: ${3:# The name of the Bridge Domain}
    bd_type: ${4:# The type of traffic on the Bridge Domain}
    description: ${5:# Description for the Bridge Domain}
    enable_multicast: ${6:# Determines if PIM is enabled}
    enable_routing: ${7:# Determines if IP forwarding should be allowed}
    endpoint_clear: ${8:# Clears all End Points in all Leaves when C(yes)}
    endpoint_move_detect: ${9:# Determines if GARP should be enabled to detect when End Points move}
    endpoint_retention_action: ${10:# Determines if the Bridge Domain should inherit or resolve the End Point Retention Policy}
    endpoint_retention_policy: ${11:# The name of the End Point Retention Policy the Bridge Domain should use when overriding the default End Point Retention Policy}
    igmp_snoop_policy: ${12:# The name of the IGMP Snooping Policy the Bridge Domain should use when overriding the default IGMP Snooping Policy}
    ip_learning: ${13:# Determines if the Bridge Domain should learn End Point IPs}
    ipv6_nd_policy: ${14:# The name of the IPv6 Neighbor Discovery Policy the Bridge Domain should use when overridding the default IPV6 ND Policy}
    l2_unknown_unicast: ${15:# Determines what forwarding method to use for unknown l2 destinations}
    l3_unknown_multicast: ${16:# Determines the forwarding method to use for unknown multicast destinations}
    ipv6_l3_unknown_multicast: ${17:# Determines the forwarding method to use for IPv6 unknown multicast destinations}
    limit_ip_learn: ${18:# Determines if the BD should limit IP learning to only subnets owned by the Bridge Domain}
    mac_address: ${19:# The MAC Address to assign to the C(bd) instead of using the default}
    multi_dest: ${20:# Determines the forwarding method for L2 multicast, broadcast, and link layer traffic}
    state: ${21:# Use C(present) or C(absent) for adding or removing}
    name_alias: ${22:# The alias for the current object}
    tenant: ${23:# The name of the Tenant}
    vrf: ${24:# The name of the VRF}
    route_profile: ${25:# The Route Profile to associate with the Bridge Domain}
    route_profile_l3out: ${26:# The L3 Out that contains the associated Route Profile}
    host: ${27:# IP Address or hostname of APIC resolvable by Ansible control host}
    port: ${28:# Port number to be used for REST connection}
    username: ${29:# The username to use for authentication}
    password: ${30:# The password to use for authentication}
    private_key: ${31:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    certificate_name: ${32:# The X}
    output_level: ${33:# Influence the output of this ACI module}
    timeout: ${34:# The socket level timeout in seconds}
    use_proxy: ${35:# If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${36:# If C(no), an HTTP connection will be used instead of the default HTTPS connection}
    validate_certs: ${37:# If C(no), SSL certificates will not be validated}
    output_path: ${38:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    annotation: ${39:# User-defined string for annotating an object}
    owner_key: ${40:# User-defined string for the ownerKey attribute of an ACI object}
    owner_tag: ${41:# User-defined string for the ownerTag attribute of an ACI object}
  tags:
    - cisco
    - aci
    - aci_bd]]></content>
  <tabTrigger>cisco.aci.aci_bd</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage Bridge Domains (BD) objects (fv:BD)</description>
</snippet>