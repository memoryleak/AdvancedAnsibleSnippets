<snippet>
  <content><![CDATA[- name: ${1:Module for setup of ServerAutoScalePolicy Avi RESTful Object}
  community.network.avi_serverautoscalepolicy:
    api_context: ${2:# Avi API context that includes current session ID and CSRF Token}
    api_version: ${3:# Avi API version of to use for Avi API and objects}
    avi_api_patch_op: ${4:# Patch operation to use when using avi_api_update_method as patch}
    avi_api_update_method: ${5:# Default method for object update is HTTP PUT}
    avi_credentials: ${6:# Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details}
    avi_disable_session_cache_as_fact: ${7:# It disables avi session information to be cached as a fact}
    controller: ${8:# IP address or hostname of the controller}
    description: ${9:# User defined description for the object}
    intelligent_autoscale: ${10:# Use avi intelligent autoscale algorithm where autoscale is performed by comparing load on the pool against estimated capacity of all the servers}
    intelligent_scalein_margin: ${11:# Maximum extra capacity as percentage of load used by the intelligent scheme}
    intelligent_scaleout_margin: ${12:# Minimum extra capacity as percentage of load used by the intelligent scheme}
    max_scalein_adjustment_step: ${13:# Maximum number of servers to scalein simultaneously}
    max_scaleout_adjustment_step: ${14:# Maximum number of servers to scaleout simultaneously}
    max_size: ${15:# Maximum number of servers after scaleout}
    min_size: ${16:# No scale-in happens once number of operationally up servers reach min_servers}
    name: ${17:# Name of the object}
    password: ${18:# Password of Avi user in Avi controller}
    scalein_alertconfig_refs: ${19:# Trigger scalein when alerts due to any of these alert configurations are raised}
    scalein_cooldown: ${20:# Cooldown period during which no new scalein is triggered to allow previous scalein to successfully complete}
    scaleout_alertconfig_refs: ${21:# Trigger scaleout when alerts due to any of these alert configurations are raised}
    scaleout_cooldown: ${22:# Cooldown period during which no new scaleout is triggered to allow previous scaleout to successfully complete}
    state: ${23:# The state that should be applied on the entity}
    tenant: ${24:# Name of tenant used for all Avi API calls and context of object}
    tenant_ref: ${25:# It is a reference to an object of type tenant}
    tenant_uuid: ${26:# UUID of tenant used for all Avi API calls and context of object}
    url: ${27:# Avi controller URL of the object}
    use_predicted_load: ${28:# Use predicted load rather than current load}
    username: ${29:# Username used for accessing Avi controller}
    uuid: ${30:# Unique object identifier of the object}
  tags:
    - community
    - network
    - avi_serverautoscalepolicy]]></content>
  <tabTrigger>community.network.avi_serverautoscalepolicy</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module for setup of ServerAutoScalePolicy Avi RESTful Object</description>
</snippet>