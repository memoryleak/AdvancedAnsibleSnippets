<snippet>
  <content><![CDATA[- name: ${1:Module for setup of ServerAutoScalePolicy Avi RESTful Object}
  community.network.avi_serverautoscalepolicy:
    state: ${2:# The state that should be applied on the entity}
    avi_api_update_method: ${3:# Default method for object update is HTTP PUT}
    avi_api_patch_op: ${4:# Patch operation to use when using avi_api_update_method as patch}
    description: ${5:# User defined description for the object}
    intelligent_autoscale: ${6:# Use avi intelligent autoscale algorithm where autoscale is performed by comparing load on the pool against estimated capacity of all the servers}
    intelligent_scalein_margin: ${7:# Maximum extra capacity as percentage of load used by the intelligent scheme}
    intelligent_scaleout_margin: ${8:# Minimum extra capacity as percentage of load used by the intelligent scheme}
    max_scalein_adjustment_step: ${9:# Maximum number of servers to scalein simultaneously}
    max_scaleout_adjustment_step: ${10:# Maximum number of servers to scaleout simultaneously}
    max_size: ${11:# Maximum number of servers after scaleout}
    min_size: ${12:# No scale-in happens once number of operationally up servers reach min_servers}
    name: ${13:# Name of the object}
    scalein_alertconfig_refs: ${14:# Trigger scalein when alerts due to any of these alert configurations are raised}
    scalein_cooldown: ${15:# Cooldown period during which no new scalein is triggered to allow previous scalein to successfully complete}
    scaleout_alertconfig_refs: ${16:# Trigger scaleout when alerts due to any of these alert configurations are raised}
    scaleout_cooldown: ${17:# Cooldown period during which no new scaleout is triggered to allow previous scaleout to successfully complete}
    tenant_ref: ${18:# It is a reference to an object of type tenant}
    url: ${19:# Avi controller URL of the object}
    use_predicted_load: ${20:# Use predicted load rather than current load}
    uuid: ${21:# Unique object identifier of the object}
    controller: ${22:# IP address or hostname of the controller}
    username: ${23:# Username used for accessing Avi controller}
    password: ${24:# Password of Avi user in Avi controller}
    tenant: ${25:# Name of tenant used for all Avi API calls and context of object}
    tenant_uuid: ${26:# UUID of tenant used for all Avi API calls and context of object}
    api_version: ${27:# Avi API version of to use for Avi API and objects}
    avi_credentials: ${28:# Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details}
    api_context: ${29:# Avi API context that includes current session ID and CSRF Token}
    avi_disable_session_cache_as_fact: ${30:# It disables avi session information to be cached as a fact}
  tags:
    - community
    - network
    - avi_serverautoscalepolicy]]></content>
  <tabTrigger>community.network.avi_serverautoscalepolicy</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Module for setup of ServerAutoScalePolicy Avi RESTful Object</description>
</snippet>