<snippet>
  <content><![CDATA[- name: ${1:Manage filter entries (vz:Entry)}
  cisco.aci.aci_filter_entry:
    annotation: ${2:# User-defined string for annotating an object}
    arp_flag: ${3:# The arp flag to use when the ether_type is arp}
    certificate_name: ${4:# The X}
    description: ${5:# Description for the Filter Entry}
    destination_port: ${6:# Used to set both destination start and end ports to the same value when ip_protocol is tcp or udp}
    destination_port_end: ${7:# Used to set the destination end port when ip_protocol is tcp or udp}
    destination_port_start: ${8:# Used to set the destination start port when ip_protocol is tcp or udp}
    entry: ${9:# Then name of the Filter Entry}
    ether_type: ${10:# The Ethernet type}
    filter: ${11:# The name of Filter that the entry should belong to}
    host: ${12:# IP Address or hostname of APIC resolvable by Ansible control host}
    icmp6_msg_type: ${13:# ICMPv6 message type; used when ip_protocol is icmpv6}
    icmp_msg_type: ${14:# ICMPv4 message type; used when ip_protocol is icmp}
    ip_protocol: ${15:# The IP Protocol type when ether_type is ip}
    match_only_fragments: ${16:# The match only packet fragments of the filter entry}
    name_alias: ${17:# The alias for the current object}
    output_level: ${18:# Influence the output of this ACI module}
    output_path: ${19:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    password: ${20:# The password to use for authentication}
    port: ${21:# Port number to be used for REST connection}
    private_key: ${22:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    source_port: ${23:# Used to set both source start and end ports to the same value when ip_protocol is tcp or udp}
    source_port_end: ${24:# Used to set the source end port when ip_protocol is tcp or udp}
    source_port_start: ${25:# Used to set the source start port when ip_protocol is tcp or udp}
    state: ${26:# present, absent, query}
    stateful: ${27:# Determines the statefulness of the filter entry}
    tcp_flags: ${28:# The TCP flags of the filter entry}
    tenant: ${29:# The name of the tenant}
    timeout: ${30:# The socket level timeout in seconds}
    use_proxy: ${31:# If C(false), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${32:# If C(false), an HTTP connection will be used instead of the default HTTPS connection}
    username: ${33:# The username to use for authentication}
    validate_certs: ${34:# If C(false), SSL certificates will not be validated}
  tags:
    - cisco
    - aci
    - aci_filter_entry]]></content>
  <tabTrigger>cisco.aci.aci_filter_entry</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage filter entries (vz:Entry)</description>
</snippet>