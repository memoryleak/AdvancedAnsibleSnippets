<snippet>
  <content><![CDATA[- name: ${1:Manage filter entries (vz:Entry)}
  cisco.aci.aci_filter_entry:
    arp_flag: ${2:# The arp flag to use when the ether_type is arp}
    description: ${3:# Description for the Filter Entry}
    dst_port: ${4:# Used to set both destination start and end ports to the same value when ip_protocol is tcp or udp}
    dst_port_end: ${5:# Used to set the destination end port when ip_protocol is tcp or udp}
    dst_port_start: ${6:# Used to set the destination start port when ip_protocol is tcp or udp}
    entry: ${7:# Then name of the Filter Entry}
    ether_type: ${8:# The Ethernet type}
    filter: ${9:# The name of Filter that the entry should belong to}
    icmp_msg_type: ${10:# ICMPv4 message type; used when ip_protocol is icmp}
    icmp6_msg_type: ${11:# ICMPv6 message type; used when ip_protocol is icmpv6}
    ip_protocol: ${12:# The IP Protocol type when ether_type is ip}
    state: ${13:# present, absent, query}
    name_alias: ${14:# The alias for the current object}
    stateful: ${15:# Determines the statefulness of the filter entry}
    tenant: ${16:# The name of the tenant}
    host: ${17:# IP Address or hostname of APIC resolvable by Ansible control host}
    port: ${18:# Port number to be used for REST connection}
    username: ${19:# The username to use for authentication}
    password: ${20:# The password to use for authentication}
    private_key: ${21:# Either a PEM-formatted private key file or the private key content used for signature-based authentication}
    certificate_name: ${22:# The X}
    output_level: ${23:# Influence the output of this ACI module}
    timeout: ${24:# The socket level timeout in seconds}
    use_proxy: ${25:# If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts}
    use_ssl: ${26:# If C(no), an HTTP connection will be used instead of the default HTTPS connection}
    validate_certs: ${27:# If C(no), SSL certificates will not be validated}
    output_path: ${28:# Path to a file that will be used to dump the ACI JSON configuration objects generated by the module}
    annotation: ${29:# User-defined string for annotating an object}
  tags:
    - cisco
    - aci
    - aci_filter_entry]]></content>
  <tabTrigger>cisco.aci.aci_filter_entry</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Manage filter entries (vz:Entry)</description>
</snippet>