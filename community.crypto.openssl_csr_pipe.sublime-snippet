<snippet>
  <content><![CDATA[- name: ${1:Generate OpenSSL Certificate Signing Request (CSR)}
  community.crypto.openssl_csr_pipe:
    authority_cert_issuer: ${2:# Names that will be present in the authority cert issuer field of the certificate signing request}
    authority_cert_serial_number: ${3:# The authority cert serial number}
    authority_key_identifier: ${4:# The authority key identifier as a hex string, where two bytes are separated by colons}
    basic_constraints: ${5:# Indicates basic constraints, such as if the certificate is a CA}
    basic_constraints_critical: ${6:# Should the basicConstraints extension be considered as critical}
    common_name: ${7:# The commonName field of the certificate signing request subject}
    content: ${8:# The existing CSR}
    country_name: ${9:# The countryName field of the certificate signing request subject}
    create_subject_key_identifier: ${10:# Create the Subject Key Identifier from the public key}
    crl_distribution_points: ${11:# Allows to specify one or multiple CRL distribution points}
    digest: ${12:# The digest used when signing the certificate signing request with the private key}
    email_address: ${13:# The emailAddress field of the certificate signing request subject}
    extended_key_usage: ${14:# Additional restrictions (for example client authentication, server authentication) on the allowed purposes for which the public key may be used}
    extended_key_usage_critical: ${15:# Should the extkeyUsage extension be considered as critical}
    key_usage: ${16:# This defines the purpose (for example encipherment, signature, certificate signing) of the key contained in the certificate}
    key_usage_critical: ${17:# Should the keyUsage extension be considered as critical}
    locality_name: ${18:# The localityName field of the certificate signing request subject}
    name_constraints_critical: ${19:# Should the Name Constraints extension be considered as critical}
    name_constraints_excluded: ${20:# For CA certificates, this specifies a list of identifiers which describe subtrees of names that this CA is B(not) allowed to issue certificates for}
    name_constraints_permitted: ${21:# For CA certificates, this specifies a list of identifiers which describe subtrees of names that this CA is allowed to issue certificates for}
    ocsp_must_staple: ${22:# Indicates that the certificate should contain the OCSP Must Staple extension (U(https://tools}
    ocsp_must_staple_critical: ${23:# Should the OCSP Must Staple extension be considered as critical}
    organization_name: ${24:# The organizationName field of the certificate signing request subject}
    organizational_unit_name: ${25:# The organizationalUnitName field of the certificate signing request subject}
    privatekey_content: ${26:# The content of the private key to use when signing the certificate signing request}
    privatekey_passphrase: ${27:# The passphrase for the private key}
    privatekey_path: ${28:# The path to the private key to use when signing the certificate signing request}
    select_crypto_backend: ${29:# Determines which crypto backend to use}
    state_or_province_name: ${30:# The stateOrProvinceName field of the certificate signing request subject}
    subject: ${31:# Key/value pairs that will be present in the subject name field of the certificate signing request}
    subject_alt_name: ${32:# Subject Alternative Name (SAN) extension to attach to the certificate signing request}
    subject_alt_name_critical: ${33:# Should the subjectAltName extension be considered as critical}
    subject_key_identifier: ${34:# The subject key identifier as a hex string, where two bytes are separated by colons}
    subject_ordered: ${35:# A list of dictionaries, where every dictionary must contain one key/value pair}
    use_common_name_for_san: ${36:# If set to V(true), the module will fill the common name in for O(subject_alt_name) with C(DNS:) prefix if no SAN is specified}
    version: ${37:# The version of the certificate signing request}
  tags:
    - community
    - crypto
    - openssl_csr_pipe]]></content>
  <tabTrigger>community.crypto.openssl_csr_pipe</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Generate OpenSSL Certificate Signing Request (CSR)</description>
</snippet>