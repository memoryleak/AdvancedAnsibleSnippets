<snippet>
  <content><![CDATA[- name: ${1:Modifies query rules using the proxysql admin interface}
  community.proxysql.proxysql_query_rules:
    OK_msg: ${2:# The specified message will be returned for a query that uses the defined rule}
    active: ${3:# A rule with I(active) set to C(False) will be tracked in the database, but will be never loaded in the in-memory data structures}
    apply: ${4:# Used in combination with I(flagIN) and I(flagOUT) to create chains of rules}
    cache_empty_result: ${5:# Controls if resultset without rows will be cached or not}
    cache_ttl: ${6:# The number of milliseconds for which to cache the result of the query}
    client_addr: ${7:# Match traffic from a specific source}
    comment: ${8:# Free form text field, usable for a descriptive comment of the query rule}
    config_file: ${9:# Specify a config file from which I(login_user) and I(login_password) are to be read}
    delay: ${10:# Number of milliseconds to delay the execution of the query}
    destination_hostgroup: ${11:# Route matched queries to this hostgroup}
    digest: ${12:# Match queries with a specific digest, as returned by stats_mysql_query_digest}
    error_msg: ${13:# Query will be blocked, and the specified error_msg will be returned to the client}
    flagIN: ${14:# Used in combination with I(flagOUT) and I(apply) to create chains of rules}
    flagOUT: ${15:# Used in combination with I(flagIN) and apply to create chains of rules}
    force_delete: ${16:# By default we avoid deleting more than one schedule in a single batch, however if you need this behaviour and you are not concerned about the schedules deleted, you can set I(force_delete) to C(True)}
    load_to_runtime: ${17:# Dynamically load config to runtime memory}
    log: ${18:# Query will be logged}
    login_host: ${19:# The host used to connect to ProxySQL admin interface}
    login_password: ${20:# The password used to authenticate to ProxySQL admin interface}
    login_port: ${21:# The port used to connect to ProxySQL admin interface}
    login_unix_socket: ${22:# The socket used to connect to ProxySQL admin interface}
    login_user: ${23:# The username used to authenticate to ProxySQL admin interface}
    match_digest: ${24:# Regular expression that matches the query digest}
    match_pattern: ${25:# Regular expression that matches the query text}
    mirror_flagOUT: ${26:# Enables query mirroring}
    mirror_hostgroup: ${27:# Enables query mirroring}
    multiplex: ${28:# If C(0), multiplex will be disabled}
    negate_match_pattern: ${29:# If I(negate_match_pattern) is set to C(True), only queries not matching the query text will be considered as a match}
    next_query_flagIN: ${30:# When is set, its value will become the I(flagIN) value for the next queries}
    proxy_addr: ${31:# Match incoming traffic on a specific local IP}
    proxy_port: ${32:# Match incoming traffic on a specific local port}
    re_modifiers: ${33:# Comma separated list of options to modify the behavior of the RE engine}
    replace_pattern: ${34:# This is the pattern with which to replace the matched pattern}
    retries: ${35:# The maximum number of times a query needs to be re-executed in case of detected failure during the execution of the query}
    rule_id: ${36:# The unique id of the rule}
    save_to_disk: ${37:# Save config to sqlite db on disk to persist the configuration}
    schemaname: ${38:# Filtering criteria matching schemaname}
    state: ${39:# When C(present) - adds the rule, when C(absent) - removes the rule}
    timeout: ${40:# The maximum timeout in milliseconds with which the matched or rewritten query should be executed}
    username: ${41:# Filtering criteria matching username}
  tags:
    - community
    - proxysql
    - proxysql_query_rules]]></content>
  <tabTrigger>community.proxysql.proxysql_query_rules</tabTrigger>
  <scope>source.yaml,source.ansible</scope>
  <description>Modifies query rules using the proxysql admin interface</description>
</snippet>